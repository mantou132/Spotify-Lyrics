"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i = decorators.length - 1, decorator; i >= 0; i--)
      if (decorator = decorators[i])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };

  // node_modules/chinese-conv/tongwen/tongwen-st.js
  var require_tongwen_st = __commonJS({
    "node_modules/chinese-conv/tongwen/tongwen-st.js"(exports, module) {
      var TongWen = {};
      TongWen.s_2_t = {
        "\xB7": "\u2027",
        "\u2015": "\u2500",
        "\u2016": "\u2225",
        "\u2018": "\u300E",
        "\u2019": "\u300F",
        "\u201C": "\u300C",
        "\u201D": "\u300D",
        "\u2033": "\u301E",
        "\u220F": "\u03A0",
        "\u2211": "\u03A3",
        "\u2227": "\uFE3F",
        "\u2228": "\uFE40",
        "\u2236": "\uFE30",
        "\u2248": "\u2252",
        "\u2264": "\u2266",
        "\u2265": "\u2267",
        "\u2501": "\u2500",
        "\u2503": "\u2502",
        "\u250F": "\u250C",
        "\u2513": "\u2510",
        "\u2517": "\u2514",
        "\u251B": "\u2518",
        "\u2523": "\u251C",
        "\u252B": "\u2524",
        "\u2533": "\u252C",
        "\u253B": "\u2534",
        "\u254B": "\u253C",
        "\u3016": "\u3010",
        "\u3017": "\u3011",
        "\u3447": "\u3473",
        "\u359E": "\u558E",
        "\u360E": "\u361A",
        "\u3918": "\u396E",
        "\u39CF": "\u6386",
        "\u39D0": "\u3A73",
        "\u39DF": "\u64D3",
        "\u3B4E": "\u68E1",
        "\u3CE0": "\u6FBE",
        "\u4056": "\u779C",
        "\u415F": "\u7A47",
        "\u4337": "\u7D2C",
        "\u43AC": "\u43B1",
        "\u43DD": "\u819E",
        "\u44D6": "\u85ED",
        "\u464C": "\u4661",
        "\u4723": "\u8A22",
        "\u4729": "\u8B8C",
        "\u478D": "\u477C",
        "\u497A": "\u91FE",
        "\u497D": "\u93FA",
        "\u4982": "\u4947",
        "\u4983": "\u942F",
        "\u4985": "\u9425",
        "\u4986": "\u9481",
        "\u49B6": "\u499B",
        "\u49B7": "\u499F",
        "\u4C9F": "\u9BA3",
        "\u4CA1": "\u9C0C",
        "\u4CA2": "\u9C27",
        "\u4CA3": "\u4C77",
        "\u4D13": "\u9CFE",
        "\u4D14": "\u9D41",
        "\u4D15": "\u9D37",
        "\u4D16": "\u9D84",
        "\u4D17": "\u9DAA",
        "\u4D18": "\u9DC9",
        "\u4D19": "\u9E0A",
        "\u4DAE": "\u9F91",
        "\u4E07": "\u842C",
        "\u4E0E": "\u8207",
        "\u4E13": "\u5C08",
        "\u4E1A": "\u696D",
        "\u4E1B": "\u53E2",
        "\u4E1C": "\u6771",
        "\u4E1D": "\u7D72",
        "\u4E22": "\u4E1F",
        "\u4E24": "\u5169",
        "\u4E25": "\u56B4",
        "\u4E27": "\u55AA",
        "\u4E2A": "\u500B",
        "\u4E30": "\u8C50",
        "\u4E34": "\u81E8",
        "\u4E3A": "\u70BA",
        "\u4E3D": "\u9E97",
        "\u4E3E": "\u8209",
        "\u4E48": "\u9EBC",
        "\u4E49": "\u7FA9",
        "\u4E4C": "\u70CF",
        "\u4E50": "\u6A02",
        "\u4E54": "\u55AC",
        "\u4E60": "\u7FD2",
        "\u4E61": "\u9109",
        "\u4E66": "\u66F8",
        "\u4E70": "\u8CB7",
        "\u4E71": "\u4E82",
        "\u4E89": "\u722D",
        "\u4E8E": "\u65BC",
        "\u4E8F": "\u8667",
        "\u4E91": "\u96F2",
        "\u4E98": "\u4E99",
        "\u4E9A": "\u4E9E",
        "\u4EA7": "\u7522",
        "\u4EA9": "\u755D",
        "\u4EB2": "\u89AA",
        "\u4EB5": "\u893B",
        "\u4EBF": "\u5104",
        "\u4EC5": "\u50C5",
        "\u4EC6": "\u50D5",
        "\u4ECE": "\u5F9E",
        "\u4ED1": "\u4F96",
        "\u4ED3": "\u5009",
        "\u4EEA": "\u5100",
        "\u4EEC": "\u5011",
        "\u4EF7": "\u50F9",
        "\u4F17": "\u773E",
        "\u4F18": "\u512A",
        "\u4F1A": "\u6703",
        "\u4F1B": "\u50B4",
        "\u4F1E": "\u5098",
        "\u4F1F": "\u5049",
        "\u4F20": "\u50B3",
        "\u4F24": "\u50B7",
        "\u4F25": "\u5000",
        "\u4F26": "\u502B",
        "\u4F27": "\u5096",
        "\u4F2A": "\u507D",
        "\u4F2B": "\u4F47",
        "\u4F32": "\u4F60",
        "\u4F53": "\u9AD4",
        "\u4F63": "\u50AD",
        "\u4F65": "\u50C9",
        "\u4FA0": "\u4FE0",
        "\u4FA3": "\u4FB6",
        "\u4FA5": "\u50E5",
        "\u4FA6": "\u5075",
        "\u4FA7": "\u5074",
        "\u4FA8": "\u50D1",
        "\u4FA9": "\u5108",
        "\u4FAA": "\u5115",
        "\u4FAC": "\u5102",
        "\u4FE3": "\u4FC1",
        "\u4FE6": "\u5114",
        "\u4FE8": "\u513C",
        "\u4FE9": "\u5006",
        "\u4FEA": "\u5137",
        "\u4FED": "\u5109",
        "\u502E": "\u88F8",
        "\u503A": "\u50B5",
        "\u503E": "\u50BE",
        "\u506C": "\u50AF",
        "\u507B": "\u50C2",
        "\u507E": "\u50E8",
        "\u507F": "\u511F",
        "\u50A5": "\u513B",
        "\u50A7": "\u5110",
        "\u50A8": "\u5132",
        "\u50A9": "\u513A",
        "\u513F": "\u5152",
        "\u5151": "\u514C",
        "\u5156": "\u5157",
        "\u515A": "\u9EE8",
        "\u5170": "\u862D",
        "\u5173": "\u95DC",
        "\u5174": "\u8208",
        "\u5179": "\u8332",
        "\u517B": "\u990A",
        "\u517D": "\u7378",
        "\u5181": "\u56C5",
        "\u5185": "\u5167",
        "\u5188": "\u5CA1",
        "\u518C": "\u518A",
        "\u5199": "\u5BEB",
        "\u519B": "\u8ECD",
        "\u519C": "\u8FB2",
        "\u51AF": "\u99AE",
        "\u51B2": "\u6C96",
        "\u51B3": "\u6C7A",
        "\u51B5": "\u6CC1",
        "\u51BB": "\u51CD",
        "\u51C0": "\u6DE8",
        "\u51C4": "\u6DD2",
        "\u51C7": "\u6DDE",
        "\u51C9": "\u6DBC",
        "\u51CF": "\u6E1B",
        "\u51D1": "\u6E4A",
        "\u51DB": "\u51DC",
        "\u51E0": "\u5E7E",
        "\u51E4": "\u9CF3",
        "\u51E6": "\u8655",
        "\u51EB": "\u9CE7",
        "\u51ED": "\u6191",
        "\u51EF": "\u51F1",
        "\u51FB": "\u64CA",
        "\u51FC": "\u5E7D",
        "\u51FF": "\u947F",
        "\u520D": "\u82BB",
        "\u5212": "\u5283",
        "\u5218": "\u5289",
        "\u5219": "\u5247",
        "\u521A": "\u525B",
        "\u521B": "\u5275",
        "\u5220": "\u522A",
        "\u522B": "\u5225",
        "\u522C": "\u5257",
        "\u522D": "\u5244",
        "\u5239": "\u524E",
        "\u523D": "\u528A",
        "\u523F": "\u528C",
        "\u5240": "\u5274",
        "\u5242": "\u5291",
        "\u5250": "\u526E",
        "\u5251": "\u528D",
        "\u5265": "\u525D",
        "\u5267": "\u5287",
        "\u5273": "\u5284",
        "\u529D": "\u52F8",
        "\u529E": "\u8FA6",
        "\u52A1": "\u52D9",
        "\u52A2": "\u52F1",
        "\u52A8": "\u52D5",
        "\u52B1": "\u52F5",
        "\u52B2": "\u52C1",
        "\u52B3": "\u52DE",
        "\u52BF": "\u52E2",
        "\u52CB": "\u52F3",
        "\u52DA": "\u52E9",
        "\u52DB": "\u52F3",
        "\u52E6": "\u527F",
        "\u5300": "\u52FB",
        "\u5326": "\u532D",
        "\u532E": "\u5331",
        "\u533A": "\u5340",
        "\u533B": "\u91AB",
        "\u534E": "\u83EF",
        "\u534F": "\u5354",
        "\u5355": "\u55AE",
        "\u5356": "\u8CE3",
        "\u5360": "\u4F54",
        "\u5362": "\u76E7",
        "\u5364": "\u9E75",
        "\u5367": "\u81E5",
        "\u536B": "\u885B",
        "\u5374": "\u537B",
        "\u537A": "\u5DF9",
        "\u5382": "\u5EE0",
        "\u5385": "\u5EF3",
        "\u5386": "\u6B77",
        "\u5389": "\u53B2",
        "\u538B": "\u58D3",
        "\u538C": "\u53AD",
        "\u538D": "\u5399",
        "\u5395": "\u5EC1",
        "\u5398": "\u91D0",
        "\u53A2": "\u5EC2",
        "\u53A3": "\u53B4",
        "\u53A6": "\u5EC8",
        "\u53A8": "\u5EDA",
        "\u53A9": "\u5EC4",
        "\u53AE": "\u5EDD",
        "\u53BF": "\u7E23",
        "\u53C1": "\u53C3",
        "\u53C2": "\u53C3",
        "\u53C6": "\u9749",
        "\u53C7": "\u9746",
        "\u53CC": "\u96D9",
        "\u53D1": "\u767C",
        "\u53D8": "\u8B8A",
        "\u53D9": "\u6558",
        "\u53E0": "\u758A",
        "\u53F6": "\u8449",
        "\u53F7": "\u865F",
        "\u53F9": "\u5606",
        "\u53FD": "\u5630",
        "\u5401": "\u7C72",
        "\u540E": "\u5F8C",
        "\u5413": "\u5687",
        "\u5415": "\u5442",
        "\u5417": "\u55CE",
        "\u5428": "\u5678",
        "\u542C": "\u807D",
        "\u542F": "\u555F",
        "\u5434": "\u5433",
        "\u5450": "\u5436",
        "\u5452": "\u5638",
        "\u5453": "\u56C8",
        "\u5455": "\u5614",
        "\u5456": "\u56A6",
        "\u5457": "\u5504",
        "\u5458": "\u54E1",
        "\u5459": "\u54BC",
        "\u545B": "\u55C6",
        "\u545C": "\u55DA",
        "\u548F": "\u8A60",
        "\u5499": "\u56A8",
        "\u549B": "\u5680",
        "\u549D": "\u565D",
        "\u54CC": "\u5471",
        "\u54CD": "\u97FF",
        "\u54D1": "\u555E",
        "\u54D2": "\u5660",
        "\u54D3": "\u5635",
        "\u54D4": "\u55F6",
        "\u54D5": "\u5666",
        "\u54D7": "\u5629",
        "\u54D9": "\u5672",
        "\u54DC": "\u568C",
        "\u54DD": "\u5665",
        "\u54DF": "\u55B2",
        "\u551B": "\u561C",
        "\u551D": "\u55CA",
        "\u5520": "\u562E",
        "\u5521": "\u5562",
        "\u5522": "\u55E9",
        "\u5524": "\u559A",
        "\u5553": "\u555F",
        "\u5567": "\u5616",
        "\u556C": "\u55C7",
        "\u556D": "\u56C0",
        "\u556E": "\u9F67",
        "\u5570": "\u56C9",
        "\u5578": "\u562F",
        "\u55B7": "\u5674",
        "\u55BD": "\u560D",
        "\u55BE": "\u56B3",
        "\u55EB": "\u56C1",
        "\u55EC": "\u5475",
        "\u55F3": "\u566F",
        "\u5618": "\u5653",
        "\u5624": "\u56B6",
        "\u5629": "\u8B41",
        "\u5631": "\u56D1",
        "\u565C": "\u5695",
        "\u56A3": "\u56C2",
        "\u56AE": "\u5411",
        "\u56E2": "\u5718",
        "\u56ED": "\u5712",
        "\u56EF": "\u570B",
        "\u56F1": "\u56EA",
        "\u56F4": "\u570D",
        "\u56F5": "\u5707",
        "\u56FD": "\u570B",
        "\u56FE": "\u5716",
        "\u5706": "\u5713",
        "\u5723": "\u8056",
        "\u5739": "\u58D9",
        "\u573A": "\u5834",
        "\u5742": "\u962A",
        "\u574F": "\u58DE",
        "\u5757": "\u584A",
        "\u575A": "\u5805",
        "\u575B": "\u58C7",
        "\u575C": "\u58E2",
        "\u575D": "\u58E9",
        "\u575E": "\u5862",
        "\u575F": "\u58B3",
        "\u5760": "\u589C",
        "\u5784": "\u58DF",
        "\u5785": "\u58DF",
        "\u5786": "\u58DA",
        "\u5792": "\u58D8",
        "\u57A6": "\u58BE",
        "\u57A9": "\u580A",
        "\u57AB": "\u588A",
        "\u57AD": "\u57E1",
        "\u57B2": "\u584F",
        "\u57B4": "\u5816",
        "\u57D8": "\u5852",
        "\u57D9": "\u58CE",
        "\u57DA": "\u581D",
        "\u5811": "\u5879",
        "\u5815": "\u58AE",
        "\u5892": "\u5891",
        "\u5899": "\u7246",
        "\u58EE": "\u58EF",
        "\u58F0": "\u8072",
        "\u58F3": "\u6BBC",
        "\u58F6": "\u58FA",
        "\u5904": "\u8655",
        "\u5907": "\u5099",
        "\u590D": "\u5FA9",
        "\u591F": "\u5920",
        "\u5934": "\u982D",
        "\u5938": "\u8A87",
        "\u5939": "\u593E",
        "\u593A": "\u596A",
        "\u5941": "\u5969",
        "\u5942": "\u5950",
        "\u594B": "\u596E",
        "\u5956": "\u734E",
        "\u5965": "\u5967",
        "\u596C": "\u734E",
        "\u5986": "\u599D",
        "\u5987": "\u5A66",
        "\u5988": "\u5ABD",
        "\u59A9": "\u5AF5",
        "\u59AA": "\u5AD7",
        "\u59AB": "\u5AAF",
        "\u59D7": "\u59CD",
        "\u5A04": "\u5A41",
        "\u5A05": "\u5A6D",
        "\u5A06": "\u5B08",
        "\u5A07": "\u5B0C",
        "\u5A08": "\u5B4C",
        "\u5A31": "\u5A1B",
        "\u5A32": "\u5AA7",
        "\u5A34": "\u5AFB",
        "\u5A73": "\u5AFF",
        "\u5A74": "\u5B30",
        "\u5A75": "\u5B0B",
        "\u5A76": "\u5B38",
        "\u5AAA": "\u5ABC",
        "\u5AD2": "\u5B21",
        "\u5AD4": "\u5B2A",
        "\u5AF1": "\u5B19",
        "\u5B37": "\u5B24",
        "\u5B59": "\u5B6B",
        "\u5B66": "\u5B78",
        "\u5B6A": "\u5B7F",
        "\u5B81": "\u5BE7",
        "\u5B9D": "\u5BF6",
        "\u5B9E": "\u5BE6",
        "\u5BA0": "\u5BF5",
        "\u5BA1": "\u5BE9",
        "\u5BAA": "\u61B2",
        "\u5BAB": "\u5BAE",
        "\u5BBD": "\u5BEC",
        "\u5BBE": "\u8CD3",
        "\u5BC0": "\u91C7",
        "\u5BDD": "\u5BE2",
        "\u5BF9": "\u5C0D",
        "\u5BFB": "\u5C0B",
        "\u5BFC": "\u5C0E",
        "\u5BFF": "\u58FD",
        "\u5C06": "\u5C07",
        "\u5C14": "\u723E",
        "\u5C18": "\u5875",
        "\u5C1C": "\u560E",
        "\u5C1D": "\u5617",
        "\u5C27": "\u582F",
        "\u5C34": "\u5C37",
        "\u5C38": "\u5C4D",
        "\u5C3D": "\u76E1",
        "\u5C42": "\u5C64",
        "\u5C49": "\u5C5C",
        "\u5C4A": "\u5C46",
        "\u5C5E": "\u5C6C",
        "\u5C61": "\u5C62",
        "\u5C66": "\u5C68",
        "\u5C7F": "\u5DBC",
        "\u5C81": "\u6B72",
        "\u5C82": "\u8C48",
        "\u5C96": "\u5D87",
        "\u5C97": "\u5D17",
        "\u5C98": "\u5CF4",
        "\u5C9A": "\u5D50",
        "\u5C9B": "\u5CF6",
        "\u5CAD": "\u5DBA",
        "\u5CBD": "\u5D20",
        "\u5CBF": "\u5DCB",
        "\u5CC3": "\u5DA8",
        "\u5CC4": "\u5DA7",
        "\u5CE1": "\u5CFD",
        "\u5CE3": "\u5DA2",
        "\u5CE4": "\u5DA0",
        "\u5CE5": "\u5D22",
        "\u5CE6": "\u5DD2",
        "\u5CEF": "\u5CF0",
        "\u5D02": "\u5D97",
        "\u5D03": "\u5D0D",
        "\u5D10": "\u5D11",
        "\u5D2D": "\u5D84",
        "\u5D58": "\u5DB8",
        "\u5D5A": "\u5D94",
        "\u5D5B": "\u5D33",
        "\u5D5D": "\u5D81",
        "\u5DC5": "\u5DD4",
        "\u5DCC": "\u5DD6",
        "\u5DE9": "\u978F",
        "\u5DEF": "\u5DF0",
        "\u5E01": "\u5E63",
        "\u5E05": "\u5E25",
        "\u5E08": "\u5E2B",
        "\u5E0F": "\u5E43",
        "\u5E10": "\u5E33",
        "\u5E18": "\u7C3E",
        "\u5E1C": "\u5E5F",
        "\u5E26": "\u5E36",
        "\u5E27": "\u5E40",
        "\u5E2E": "\u5E6B",
        "\u5E31": "\u5E6C",
        "\u5E3B": "\u5E58",
        "\u5E3C": "\u5E57",
        "\u5E42": "\u51AA",
        "\u5E75": "\u958B",
        "\u5E76": "\u4E26",
        "\u5E77": "\u4E26",
        "\u5E7F": "\u5EE3",
        "\u5E84": "\u838A",
        "\u5E86": "\u6176",
        "\u5E90": "\u5EEC",
        "\u5E91": "\u5EE1",
        "\u5E93": "\u5EAB",
        "\u5E94": "\u61C9",
        "\u5E99": "\u5EDF",
        "\u5E9E": "\u9F90",
        "\u5E9F": "\u5EE2",
        "\u5EBC": "\u5ECE",
        "\u5EEA": "\u5EE9",
        "\u5F00": "\u958B",
        "\u5F02": "\u7570",
        "\u5F03": "\u68C4",
        "\u5F11": "\u5F12",
        "\u5F20": "\u5F35",
        "\u5F25": "\u5F4C",
        "\u5F2A": "\u5F33",
        "\u5F2F": "\u5F4E",
        "\u5F39": "\u5F48",
        "\u5F3A": "\u5F37",
        "\u5F52": "\u6B78",
        "\u5F53": "\u7576",
        "\u5F54": "\u5F55",
        "\u5F55": "\u9304",
        "\u5F5A": "\u5F59",
        "\u5F66": "\u5F65",
        "\u5F7B": "\u5FB9",
        "\u5F84": "\u5F91",
        "\u5F95": "\u5FA0",
        "\u5FC6": "\u61B6",
        "\u5FCF": "\u61FA",
        "\u5FE7": "\u6182",
        "\u5FFE": "\u613E",
        "\u6000": "\u61F7",
        "\u6001": "\u614B",
        "\u6002": "\u616B",
        "\u6003": "\u61AE",
        "\u6004": "\u616A",
        "\u6005": "\u60B5",
        "\u6006": "\u6134",
        "\u601C": "\u6190",
        "\u603B": "\u7E3D",
        "\u603C": "\u61DF",
        "\u603F": "\u61CC",
        "\u604B": "\u6200",
        "\u6052": "\u6046",
        "\u6073": "\u61C7",
        "\u6076": "\u60E1",
        "\u6078": "\u615F",
        "\u6079": "\u61E8",
        "\u607A": "\u6137",
        "\u607B": "\u60FB",
        "\u607C": "\u60F1",
        "\u607D": "\u60F2",
        "\u60A6": "\u6085",
        "\u60AB": "\u6128",
        "\u60AC": "\u61F8",
        "\u60AD": "\u6173",
        "\u60AF": "\u61AB",
        "\u60CA": "\u9A5A",
        "\u60E7": "\u61FC",
        "\u60E8": "\u6158",
        "\u60E9": "\u61F2",
        "\u60EB": "\u618A",
        "\u60EC": "\u611C",
        "\u60ED": "\u615A",
        "\u60EE": "\u619A",
        "\u60EF": "\u6163",
        "\u6120": "\u614D",
        "\u6124": "\u61A4",
        "\u6126": "\u6192",
        "\u613F": "\u9858",
        "\u6151": "\u61FE",
        "\u61D1": "\u61E3",
        "\u61D2": "\u61F6",
        "\u61D4": "\u61CD",
        "\u6206": "\u6207",
        "\u620B": "\u6214",
        "\u620F": "\u6232",
        "\u6217": "\u6227",
        "\u6218": "\u6230",
        "\u622C": "\u6229",
        "\u6237": "\u6236",
        "\u6251": "\u64B2",
        "\u6267": "\u57F7",
        "\u6269": "\u64F4",
        "\u626A": "\u636B",
        "\u626B": "\u6383",
        "\u626C": "\u63DA",
        "\u6270": "\u64FE",
        "\u629A": "\u64AB",
        "\u629B": "\u62CB",
        "\u629F": "\u6476",
        "\u62A0": "\u6473",
        "\u62A1": "\u6384",
        "\u62A2": "\u6436",
        "\u62A4": "\u8B77",
        "\u62A5": "\u5831",
        "\u62C5": "\u64D4",
        "\u62DF": "\u64EC",
        "\u62E2": "\u650F",
        "\u62E3": "\u63C0",
        "\u62E5": "\u64C1",
        "\u62E6": "\u6514",
        "\u62E7": "\u64F0",
        "\u62E8": "\u64A5",
        "\u62E9": "\u64C7",
        "\u6302": "\u639B",
        "\u631A": "\u646F",
        "\u631B": "\u6523",
        "\u631C": "\u6397",
        "\u631D": "\u64BE",
        "\u631E": "\u64BB",
        "\u631F": "\u633E",
        "\u6320": "\u6493",
        "\u6321": "\u64CB",
        "\u6322": "\u649F",
        "\u6323": "\u6399",
        "\u6324": "\u64E0",
        "\u6325": "\u63EE",
        "\u6326": "\u648F",
        "\u635C": "\u641C",
        "\u635E": "\u6488",
        "\u635F": "\u640D",
        "\u6361": "\u64BF",
        "\u6362": "\u63DB",
        "\u6363": "\u6417",
        "\u636E": "\u64DA",
        "\u63B3": "\u64C4",
        "\u63B4": "\u6451",
        "\u63B7": "\u64F2",
        "\u63B8": "\u64A3",
        "\u63BA": "\u647B",
        "\u63BC": "\u645C",
        "\u63FD": "\u652C",
        "\u63FF": "\u64B3",
        "\u6400": "\u6519",
        "\u6401": "\u64F1",
        "\u6402": "\u645F",
        "\u6405": "\u652A",
        "\u643A": "\u651C",
        "\u6444": "\u651D",
        "\u6445": "\u6504",
        "\u6446": "\u64FA",
        "\u6447": "\u6416",
        "\u6448": "\u64EF",
        "\u644A": "\u6524",
        "\u6484": "\u6516",
        "\u6491": "\u6490",
        "\u64B5": "\u6506",
        "\u64B7": "\u64F7",
        "\u64B8": "\u64FC",
        "\u64BA": "\u651B",
        "\u64C0": "\u641F",
        "\u64DE": "\u64FB",
        "\u6512": "\u6522",
        "\u654C": "\u6575",
        "\u655B": "\u6582",
        "\u6570": "\u6578",
        "\u658B": "\u9F4B",
        "\u6593": "\u6595",
        "\u65A9": "\u65AC",
        "\u65AD": "\u65B7",
        "\u65E0": "\u7121",
        "\u65E7": "\u820A",
        "\u65F6": "\u6642",
        "\u65F7": "\u66E0",
        "\u65F8": "\u6698",
        "\u6619": "\u66C7",
        "\u6635": "\u66B1",
        "\u663C": "\u665D",
        "\u663D": "\u66E8",
        "\u663E": "\u986F",
        "\u664B": "\u6649",
        "\u6652": "\u66EC",
        "\u6653": "\u66C9",
        "\u6654": "\u66C4",
        "\u6655": "\u6688",
        "\u6656": "\u6689",
        "\u6682": "\u66AB",
        "\u66A7": "\u66D6",
        "\u66B8": "\u77AD",
        "\u672E": "\u8853",
        "\u672F": "\u8853",
        "\u673A": "\u6A5F",
        "\u6740": "\u6BBA",
        "\u6742": "\u96DC",
        "\u6743": "\u6B0A",
        "\u6746": "\u687F",
        "\u6760": "\u69D3",
        "\u6761": "\u689D",
        "\u6765": "\u4F86",
        "\u6768": "\u694A",
        "\u6769": "\u69AA",
        "\u6770": "\u5091",
        "\u6781": "\u6975",
        "\u6784": "\u69CB",
        "\u679E": "\u6A05",
        "\u67A2": "\u6A1E",
        "\u67A3": "\u68D7",
        "\u67A5": "\u6AEA",
        "\u67A7": "\u6898",
        "\u67A8": "\u68D6",
        "\u67AA": "\u69CD",
        "\u67AB": "\u6953",
        "\u67AD": "\u689F",
        "\u67DC": "\u6AC3",
        "\u67E0": "\u6AB8",
        "\u67FD": "\u6A89",
        "\u6800": "\u6894",
        "\u6805": "\u67F5",
        "\u6807": "\u6A19",
        "\u6808": "\u68E7",
        "\u6809": "\u6ADB",
        "\u680A": "\u6AF3",
        "\u680B": "\u68DF",
        "\u680C": "\u6AE8",
        "\u680E": "\u6ADF",
        "\u680F": "\u6B04",
        "\u6811": "\u6A39",
        "\u6816": "\u68F2",
        "\u6837": "\u6A23",
        "\u683E": "\u6B12",
        "\u6854": "\u6A58",
        "\u6860": "\u690F",
        "\u6861": "\u6A48",
        "\u6862": "\u6968",
        "\u6863": "\u6A94",
        "\u6864": "\u69BF",
        "\u6865": "\u6A4B",
        "\u6866": "\u6A3A",
        "\u6867": "\u6A9C",
        "\u6868": "\u69F3",
        "\u6869": "\u6A01",
        "\u68A6": "\u5922",
        "\u68C0": "\u6AA2",
        "\u68C2": "\u6AFA",
        "\u6901": "\u69E8",
        "\u691F": "\u6ADD",
        "\u6920": "\u69E7",
        "\u6924": "\u6B0F",
        "\u692D": "\u6A62",
        "\u697C": "\u6A13",
        "\u6984": "\u6B16",
        "\u6987": "\u6AEC",
        "\u6988": "\u6ADA",
        "\u6989": "\u6AF8",
        "\u6998": "\u77E9",
        "\u69DA": "\u6A9F",
        "\u69DB": "\u6ABB",
        "\u69DF": "\u6AB3",
        "\u69E0": "\u6AE7",
        "\u69FC": "\u898F",
        "\u6A2A": "\u6A6B",
        "\u6A2F": "\u6AA3",
        "\u6A31": "\u6AFB",
        "\u6A65": "\u6AEB",
        "\u6A71": "\u6AE5",
        "\u6A79": "\u6AD3",
        "\u6A7C": "\u6ADE",
        "\u6A90": "\u7C37",
        "\u6AA9": "\u6A81",
        "\u6B22": "\u6B61",
        "\u6B24": "\u6B5F",
        "\u6B27": "\u6B50",
        "\u6B4E": "\u5606",
        "\u6B7C": "\u6BB2",
        "\u6B81": "\u6B7F",
        "\u6B87": "\u6BA4",
        "\u6B8B": "\u6B98",
        "\u6B92": "\u6B9E",
        "\u6B93": "\u6BAE",
        "\u6B9A": "\u6BAB",
        "\u6BA1": "\u6BAF",
        "\u6BB4": "\u6BC6",
        "\u6BC1": "\u6BC0",
        "\u6BC2": "\u8F42",
        "\u6BD5": "\u7562",
        "\u6BD9": "\u6583",
        "\u6BE1": "\u6C08",
        "\u6BF5": "\u6BFF",
        "\u6C07": "\u6C0C",
        "\u6C14": "\u6C23",
        "\u6C22": "\u6C2B",
        "\u6C29": "\u6C2C",
        "\u6C32": "\u6C33",
        "\u6C3D": "\u6C46",
        "\u6C47": "\u532F",
        "\u6C49": "\u6F22",
        "\u6C64": "\u6E6F",
        "\u6C79": "\u6D36",
        "\u6C9F": "\u6E9D",
        "\u6CA1": "\u6C92",
        "\u6CA3": "\u7043",
        "\u6CA4": "\u6F1A",
        "\u6CA5": "\u701D",
        "\u6CA6": "\u6DEA",
        "\u6CA7": "\u6EC4",
        "\u6CA8": "\u6E22",
        "\u6CA9": "\u6E88",
        "\u6CAA": "\u6EEC",
        "\u6CB2": "\u6CB1",
        "\u6CC4": "\u6D29",
        "\u6CDE": "\u6FD8",
        "\u6CEA": "\u6DDA",
        "\u6CF6": "\u6FA9",
        "\u6CF7": "\u7027",
        "\u6CF8": "\u7018",
        "\u6CFA": "\u6FFC",
        "\u6CFB": "\u7009",
        "\u6CFC": "\u6F51",
        "\u6CFD": "\u6FA4",
        "\u6CFE": "\u6D87",
        "\u6D01": "\u6F54",
        "\u6D12": "\u7051",
        "\u6D3C": "\u7AAA",
        "\u6D43": "\u6D79",
        "\u6D45": "\u6DFA",
        "\u6D46": "\u6F3F",
        "\u6D47": "\u6F86",
        "\u6D48": "\u6E5E",
        "\u6D49": "\u6EAE",
        "\u6D4A": "\u6FC1",
        "\u6D4B": "\u6E2C",
        "\u6D4D": "\u6FAE",
        "\u6D4E": "\u6FDF",
        "\u6D4F": "\u700F",
        "\u6D50": "\u6EFB",
        "\u6D51": "\u6E3E",
        "\u6D52": "\u6EF8",
        "\u6D53": "\u6FC3",
        "\u6D54": "\u6F6F",
        "\u6D55": "\u6FDC",
        "\u6D5C": "\u6FF1",
        "\u6D8C": "\u6E67",
        "\u6D9B": "\u6FE4",
        "\u6D9D": "\u6F87",
        "\u6D9E": "\u6DF6",
        "\u6D9F": "\u6F23",
        "\u6DA0": "\u6F7F",
        "\u6DA1": "\u6E26",
        "\u6DA2": "\u6EB3",
        "\u6DA3": "\u6E19",
        "\u6DA4": "\u6ECC",
        "\u6DA6": "\u6F64",
        "\u6DA7": "\u6F97",
        "\u6DA8": "\u6F32",
        "\u6DA9": "\u6F80",
        "\u6E0A": "\u6DF5",
        "\u6E0C": "\u6DE5",
        "\u6E0D": "\u6F2C",
        "\u6E0E": "\u7006",
        "\u6E10": "\u6F38",
        "\u6E11": "\u6FA0",
        "\u6E14": "\u6F01",
        "\u6E16": "\u700B",
        "\u6E17": "\u6EF2",
        "\u6E29": "\u6EAB",
        "\u6E7E": "\u7063",
        "\u6E7F": "\u6FD5",
        "\u6E83": "\u6F70",
        "\u6E85": "\u6FFA",
        "\u6E86": "\u6F35",
        "\u6E87": "\u6F0A",
        "\u6EBC": "\u6FD5",
        "\u6ED7": "\u6F77",
        "\u6EDA": "\u6EFE",
        "\u6EDE": "\u6EEF",
        "\u6EDF": "\u7069",
        "\u6EE0": "\u7044",
        "\u6EE1": "\u6EFF",
        "\u6EE2": "\u7005",
        "\u6EE4": "\u6FFE",
        "\u6EE5": "\u6FEB",
        "\u6EE6": "\u7064",
        "\u6EE8": "\u6FF1",
        "\u6EE9": "\u7058",
        "\u6EEA": "\u6FA6",
        "\u6F46": "\u7020",
        "\u6F47": "\u701F",
        "\u6F4B": "\u7032",
        "\u6F4D": "\u6FF0",
        "\u6F5C": "\u6F5B",
        "\u6F74": "\u7026",
        "\u6F9C": "\u703E",
        "\u6FD1": "\u7028",
        "\u6FD2": "\u7015",
        "\u704F": "\u705D",
        "\u706D": "\u6EC5",
        "\u706F": "\u71C8",
        "\u7075": "\u9748",
        "\u707E": "\u707D",
        "\u707F": "\u71E6",
        "\u7080": "\u716C",
        "\u7089": "\u7210",
        "\u7096": "\u71C9",
        "\u709C": "\u7152",
        "\u709D": "\u7197",
        "\u70A4": "\u7167",
        "\u70B9": "\u9EDE",
        "\u70BC": "\u7149",
        "\u70BD": "\u71BE",
        "\u70C1": "\u720D",
        "\u70C2": "\u721B",
        "\u70C3": "\u70F4",
        "\u70DB": "\u71ED",
        "\u70DF": "\u7159",
        "\u70E6": "\u7169",
        "\u70E7": "\u71D2",
        "\u70E8": "\u71C1",
        "\u70E9": "\u71F4",
        "\u70EB": "\u71D9",
        "\u70EC": "\u71FC",
        "\u70ED": "\u71B1",
        "\u7115": "\u7165",
        "\u7116": "\u71DC",
        "\u7118": "\u71FE",
        "\u7145": "\u935B",
        "\u7231": "\u611B",
        "\u7232": "\u70BA",
        "\u7237": "\u723A",
        "\u7240": "\u5E8A",
        "\u724D": "\u7258",
        "\u7266": "\u729B",
        "\u7275": "\u727D",
        "\u727A": "\u72A7",
        "\u728A": "\u72A2",
        "\u72B6": "\u72C0",
        "\u72B7": "\u7377",
        "\u72B8": "\u7341",
        "\u72B9": "\u7336",
        "\u72C8": "\u72FD",
        "\u72DD": "\u736E",
        "\u72DE": "\u7370",
        "\u72EC": "\u7368",
        "\u72ED": "\u72F9",
        "\u72EE": "\u7345",
        "\u72EF": "\u736A",
        "\u72F0": "\u7319",
        "\u72F1": "\u7344",
        "\u72F2": "\u733B",
        "\u7303": "\u736B",
        "\u730E": "\u7375",
        "\u7315": "\u737C",
        "\u7321": "\u7380",
        "\u732A": "\u8C6C",
        "\u732B": "\u8C93",
        "\u732C": "\u875F",
        "\u732E": "\u737B",
        "\u7343": "\u5446",
        "\u736D": "\u737A",
        "\u7391": "\u74A3",
        "\u739B": "\u746A",
        "\u73AE": "\u744B",
        "\u73AF": "\u74B0",
        "\u73B0": "\u73FE",
        "\u73B1": "\u7472",
        "\u73BA": "\u74BD",
        "\u73C9": "\u739F",
        "\u73CF": "\u73A8",
        "\u73D0": "\u743A",
        "\u73D1": "\u74CF",
        "\u73F2": "\u743F",
        "\u740E": "\u74A1",
        "\u740F": "\u7489",
        "\u7410": "\u7463",
        "\u742F": "\u7BA1",
        "\u743C": "\u74CA",
        "\u7476": "\u7464",
        "\u7477": "\u74A6",
        "\u748E": "\u74D4",
        "\u74D2": "\u74DA",
        "\u74EE": "\u7515",
        "\u74EF": "\u750C",
        "\u7523": "\u7522",
        "\u7535": "\u96FB",
        "\u753B": "\u756B",
        "\u7545": "\u66A2",
        "\u7572": "\u756C",
        "\u7574": "\u7587",
        "\u7596": "\u7664",
        "\u7597": "\u7642",
        "\u759F": "\u7627",
        "\u75A0": "\u7658",
        "\u75A1": "\u760D",
        "\u75AC": "\u7667",
        "\u75AE": "\u7621",
        "\u75AF": "\u760B",
        "\u75B1": "\u76B0",
        "\u75B4": "\u75FE",
        "\u75C8": "\u7670",
        "\u75C9": "\u75D9",
        "\u75D2": "\u7662",
        "\u75D6": "\u7602",
        "\u75E8": "\u7646",
        "\u75EA": "\u7613",
        "\u75EB": "\u7647",
        "\u75F9": "\u75FA",
        "\u7605": "\u7649",
        "\u7617": "\u761E",
        "\u7618": "\u763B",
        "\u762A": "\u765F",
        "\u762B": "\u7671",
        "\u763E": "\u766E",
        "\u763F": "\u766D",
        "\u765E": "\u7669",
        "\u7661": "\u75F4",
        "\u7663": "\u766C",
        "\u766B": "\u7672",
        "\u7691": "\u769A",
        "\u76B0": "\u75B1",
        "\u76B1": "\u76BA",
        "\u76B2": "\u76B8",
        "\u76CF": "\u76DE",
        "\u76D0": "\u9E7D",
        "\u76D1": "\u76E3",
        "\u76D6": "\u84CB",
        "\u76D7": "\u76DC",
        "\u76D8": "\u76E4",
        "\u770D": "\u7798",
        "\u770E": "\u8996",
        "\u7726": "\u7725",
        "\u772C": "\u77D3",
        "\u7740": "\u8457",
        "\u7741": "\u775C",
        "\u7750": "\u775E",
        "\u7751": "\u77BC",
        "\u7792": "\u779E",
        "\u77A9": "\u77DA",
        "\u77EB": "\u77EF",
        "\u77F6": "\u78EF",
        "\u77FE": "\u792C",
        "\u77FF": "\u7926",
        "\u7800": "\u78AD",
        "\u7801": "\u78BC",
        "\u7816": "\u78DA",
        "\u7817": "\u7868",
        "\u781A": "\u786F",
        "\u781C": "\u78B8",
        "\u783A": "\u792A",
        "\u783B": "\u7931",
        "\u783E": "\u792B",
        "\u7840": "\u790E",
        "\u7855": "\u78A9",
        "\u7856": "\u7864",
        "\u7857": "\u78FD",
        "\u7859": "\u78D1",
        "\u785A": "\u7904",
        "\u786E": "\u78BA",
        "\u7877": "\u9E7C",
        "\u788D": "\u7919",
        "\u789B": "\u78E7",
        "\u789C": "\u78E3",
        "\u78B1": "\u9E7C",
        "\u7921": "\u7934",
        "\u793C": "\u79AE",
        "\u794E": "\u7995",
        "\u796F": "\u798E",
        "\u7977": "\u79B1",
        "\u7978": "\u798D",
        "\u7980": "\u7A1F",
        "\u7984": "\u797F",
        "\u7985": "\u79AA",
        "\u79B0": "\u7962",
        "\u79BB": "\u96E2",
        "\u79C3": "\u79BF",
        "\u79C6": "\u7A08",
        "\u79CD": "\u7A2E",
        "\u79EF": "\u7A4D",
        "\u79F0": "\u7A31",
        "\u79FD": "\u7A62",
        "\u7A0E": "\u7A05",
        "\u7A23": "\u7A4C",
        "\u7A2D": "\u79F8",
        "\u7A33": "\u7A69",
        "\u7A51": "\u7A61",
        "\u7A77": "\u7AAE",
        "\u7A83": "\u7ACA",
        "\u7A8D": "\u7AC5",
        "\u7A8E": "\u7AB5",
        "\u7A91": "\u7AAF",
        "\u7A9C": "\u7AC4",
        "\u7A9D": "\u7AA9",
        "\u7AA5": "\u7ABA",
        "\u7AA6": "\u7AC7",
        "\u7AAD": "\u7AB6",
        "\u7AD6": "\u8C4E",
        "\u7ADE": "\u7AF6",
        "\u7B03": "\u7BE4",
        "\u7B0B": "\u7B4D",
        "\u7B14": "\u7B46",
        "\u7B15": "\u7B67",
        "\u7B3A": "\u7B8B",
        "\u7B3C": "\u7C60",
        "\u7B3E": "\u7C69",
        "\u7B51": "\u7BC9",
        "\u7B5A": "\u7BF3",
        "\u7B5B": "\u7BE9",
        "\u7B5D": "\u7B8F",
        "\u7B79": "\u7C4C",
        "\u7B7E": "\u7C3D",
        "\u7B80": "\u7C21",
        "\u7B93": "\u7C59",
        "\u7BA6": "\u7C00",
        "\u7BA7": "\u7BCB",
        "\u7BA8": "\u7C5C",
        "\u7BA9": "\u7C6E",
        "\u7BAA": "\u7C1E",
        "\u7BAB": "\u7C2B",
        "\u7BD1": "\u7C23",
        "\u7BD3": "\u7C0D",
        "\u7BEE": "\u7C43",
        "\u7BF1": "\u7C6C",
        "\u7C16": "\u7C6A",
        "\u7C41": "\u7C5F",
        "\u7C74": "\u7CF4",
        "\u7C7B": "\u985E",
        "\u7C7C": "\u79C8",
        "\u7C9C": "\u7CF6",
        "\u7C9D": "\u7CF2",
        "\u7CA4": "\u7CB5",
        "\u7CAA": "\u7CDE",
        "\u7CAE": "\u7CE7",
        "\u7CC1": "\u7CDD",
        "\u7CC7": "\u9931",
        "\u7CCD": "\u9908",
        "\u7D25": "\u7D2E",
        "\u7D27": "\u7DCA",
        "\u7D77": "\u7E36",
        "\u7DAB": "\u7DDA",
        "\u7EA0": "\u7CFE",
        "\u7EA1": "\u7D06",
        "\u7EA2": "\u7D05",
        "\u7EA3": "\u7D02",
        "\u7EA4": "\u7E96",
        "\u7EA5": "\u7D07",
        "\u7EA6": "\u7D04",
        "\u7EA7": "\u7D1A",
        "\u7EA8": "\u7D08",
        "\u7EA9": "\u7E8A",
        "\u7EAA": "\u7D00",
        "\u7EAB": "\u7D09",
        "\u7EAC": "\u7DEF",
        "\u7EAD": "\u7D1C",
        "\u7EAE": "\u7D18",
        "\u7EAF": "\u7D14",
        "\u7EB0": "\u7D15",
        "\u7EB1": "\u7D17",
        "\u7EB2": "\u7DB1",
        "\u7EB3": "\u7D0D",
        "\u7EB4": "\u7D1D",
        "\u7EB5": "\u7E31",
        "\u7EB6": "\u7DB8",
        "\u7EB7": "\u7D1B",
        "\u7EB8": "\u7D19",
        "\u7EB9": "\u7D0B",
        "\u7EBA": "\u7D21",
        "\u7EBC": "\u7D16",
        "\u7EBD": "\u7D10",
        "\u7EBE": "\u7D13",
        "\u7EBF": "\u7DDA",
        "\u7EC0": "\u7D3A",
        "\u7EC1": "\u7D32",
        "\u7EC2": "\u7D31",
        "\u7EC3": "\u7DF4",
        "\u7EC4": "\u7D44",
        "\u7EC5": "\u7D33",
        "\u7EC6": "\u7D30",
        "\u7EC7": "\u7E54",
        "\u7EC8": "\u7D42",
        "\u7EC9": "\u7E10",
        "\u7ECA": "\u7D46",
        "\u7ECB": "\u7D3C",
        "\u7ECC": "\u7D40",
        "\u7ECD": "\u7D39",
        "\u7ECE": "\u7E79",
        "\u7ECF": "\u7D93",
        "\u7ED0": "\u7D3F",
        "\u7ED1": "\u7D81",
        "\u7ED2": "\u7D68",
        "\u7ED3": "\u7D50",
        "\u7ED4": "\u7D5D",
        "\u7ED5": "\u7E5E",
        "\u7ED6": "\u7D70",
        "\u7ED7": "\u7D4E",
        "\u7ED8": "\u7E6A",
        "\u7ED9": "\u7D66",
        "\u7EDA": "\u7D62",
        "\u7EDB": "\u7D73",
        "\u7EDC": "\u7D61",
        "\u7EDD": "\u7D55",
        "\u7EDE": "\u7D5E",
        "\u7EDF": "\u7D71",
        "\u7EE0": "\u7D86",
        "\u7EE1": "\u7D83",
        "\u7EE2": "\u7D79",
        "\u7EE3": "\u7E61",
        "\u7EE5": "\u7D8F",
        "\u7EE6": "\u7D5B",
        "\u7EE7": "\u7E7C",
        "\u7EE8": "\u7D88",
        "\u7EE9": "\u7E3E",
        "\u7EEA": "\u7DD2",
        "\u7EEB": "\u7DBE",
        "\u7EED": "\u7E8C",
        "\u7EEE": "\u7DBA",
        "\u7EEF": "\u7DCB",
        "\u7EF0": "\u7DBD",
        "\u7EF1": "\u7DD4",
        "\u7EF2": "\u7DC4",
        "\u7EF3": "\u7E69",
        "\u7EF4": "\u7DAD",
        "\u7EF5": "\u7DBF",
        "\u7EF6": "\u7DAC",
        "\u7EF7": "\u7E43",
        "\u7EF8": "\u7DA2",
        "\u7EFA": "\u7DB9",
        "\u7EFB": "\u7DA3",
        "\u7EFC": "\u7D9C",
        "\u7EFD": "\u7DBB",
        "\u7EFE": "\u7DB0",
        "\u7EFF": "\u7DA0",
        "\u7F00": "\u7DB4",
        "\u7F01": "\u7DC7",
        "\u7F02": "\u7DD9",
        "\u7F03": "\u7DD7",
        "\u7F04": "\u7DD8",
        "\u7F05": "\u7DEC",
        "\u7F06": "\u7E9C",
        "\u7F07": "\u7DF9",
        "\u7F08": "\u7DF2",
        "\u7F09": "\u7DDD",
        "\u7F0A": "\u7E15",
        "\u7F0B": "\u7E62",
        "\u7F0C": "\u7DE6",
        "\u7F0D": "\u7D9E",
        "\u7F0E": "\u7DDE",
        "\u7F0F": "\u7DF6",
        "\u7F11": "\u7DF1",
        "\u7F12": "\u7E0B",
        "\u7F13": "\u7DE9",
        "\u7F14": "\u7DE0",
        "\u7F15": "\u7E37",
        "\u7F16": "\u7DE8",
        "\u7F17": "\u7DE1",
        "\u7F18": "\u7DE3",
        "\u7F19": "\u7E09",
        "\u7F1A": "\u7E1B",
        "\u7F1B": "\u7E1F",
        "\u7F1C": "\u7E1D",
        "\u7F1D": "\u7E2B",
        "\u7F1E": "\u7E17",
        "\u7F1F": "\u7E1E",
        "\u7F20": "\u7E8F",
        "\u7F21": "\u7E2D",
        "\u7F22": "\u7E0A",
        "\u7F23": "\u7E11",
        "\u7F24": "\u7E7D",
        "\u7F25": "\u7E39",
        "\u7F26": "\u7E35",
        "\u7F27": "\u7E32",
        "\u7F28": "\u7E93",
        "\u7F29": "\u7E2E",
        "\u7F2A": "\u7E46",
        "\u7F2B": "\u7E45",
        "\u7F2C": "\u7E88",
        "\u7F2D": "\u7E5A",
        "\u7F2E": "\u7E55",
        "\u7F2F": "\u7E52",
        "\u7F30": "\u97C1",
        "\u7F31": "\u7E7E",
        "\u7F32": "\u7E70",
        "\u7F33": "\u7E6F",
        "\u7F34": "\u7E73",
        "\u7F35": "\u7E98",
        "\u7F42": "\u7F4C",
        "\u7F4E": "\u7F48",
        "\u7F51": "\u7DB2",
        "\u7F57": "\u7F85",
        "\u7F5A": "\u7F70",
        "\u7F62": "\u7F77",
        "\u7F74": "\u7F86",
        "\u7F81": "\u7F88",
        "\u7F9F": "\u7FA5",
        "\u7FA1": "\u7FA8",
        "\u7FD8": "\u7FF9",
        "\u7FDA": "\u7FEC",
        "\u8022": "\u802E",
        "\u8027": "\u802C",
        "\u8038": "\u8073",
        "\u803B": "\u6065",
        "\u8042": "\u8076",
        "\u804B": "\u807E",
        "\u804C": "\u8077",
        "\u804D": "\u8079",
        "\u8054": "\u806F",
        "\u8069": "\u8075",
        "\u806A": "\u8070",
        "\u8080": "\u807F",
        "\u8083": "\u8085",
        "\u80A0": "\u8178",
        "\u80A4": "\u819A",
        "\u80AE": "\u9AAF",
        "\u80BE": "\u814E",
        "\u80BF": "\u816B",
        "\u80C0": "\u8139",
        "\u80C1": "\u8105",
        "\u80C6": "\u81BD",
        "\u80DC": "\u52DD",
        "\u80E7": "\u6727",
        "\u80E8": "\u8156",
        "\u80EA": "\u81DA",
        "\u80EB": "\u811B",
        "\u80F6": "\u81A0",
        "\u8109": "\u8108",
        "\u810D": "\u81BE",
        "\u810F": "\u9AD2",
        "\u8110": "\u81CD",
        "\u8111": "\u8166",
        "\u8113": "\u81BF",
        "\u8114": "\u81E0",
        "\u811A": "\u8173",
        "\u8123": "\u5507",
        "\u8129": "\u4FEE",
        "\u8131": "\u812B",
        "\u8136": "\u8161",
        "\u8138": "\u81C9",
        "\u814A": "\u81D8",
        "\u814C": "\u9183",
        "\u8158": "\u8195",
        "\u816D": "\u984E",
        "\u817B": "\u81A9",
        "\u817C": "\u9766",
        "\u817D": "\u8183",
        "\u817E": "\u9A30",
        "\u8191": "\u81CF",
        "\u81BB": "\u7FB6",
        "\u81DC": "\u81E2",
        "\u8206": "\u8F3F",
        "\u8223": "\u8264",
        "\u8230": "\u8266",
        "\u8231": "\u8259",
        "\u823B": "\u826B",
        "\u8270": "\u8271",
        "\u8273": "\u8C54",
        "\u827A": "\u85DD",
        "\u8282": "\u7BC0",
        "\u8288": "\u7F8B",
        "\u8297": "\u858C",
        "\u829C": "\u856A",
        "\u82A6": "\u8606",
        "\u82C1": "\u84EF",
        "\u82C7": "\u8466",
        "\u82C8": "\u85F6",
        "\u82CB": "\u83A7",
        "\u82CC": "\u8407",
        "\u82CD": "\u84BC",
        "\u82CE": "\u82E7",
        "\u82CF": "\u8607",
        "\u82F9": "\u860B",
        "\u830E": "\u8396",
        "\u830F": "\u8622",
        "\u8311": "\u8526",
        "\u8314": "\u584B",
        "\u8315": "\u7162",
        "\u8327": "\u7E6D",
        "\u8346": "\u834A",
        "\u8350": "\u85A6",
        "\u835A": "\u83A2",
        "\u835B": "\u8558",
        "\u835C": "\u84FD",
        "\u835E": "\u854E",
        "\u835F": "\u8588",
        "\u8360": "\u85BA",
        "\u8361": "\u8569",
        "\u8363": "\u69AE",
        "\u8364": "\u8477",
        "\u8365": "\u6ECE",
        "\u8366": "\u7296",
        "\u8367": "\u7192",
        "\u8368": "\u8541",
        "\u8369": "\u85CE",
        "\u836A": "\u84C0",
        "\u836B": "\u852D",
        "\u836C": "\u8552",
        "\u836D": "\u8452",
        "\u836E": "\u8464",
        "\u836F": "\u85E5",
        "\u8385": "\u849E",
        "\u83B1": "\u840A",
        "\u83B2": "\u84EE",
        "\u83B3": "\u8494",
        "\u83B4": "\u8435",
        "\u83B6": "\u859F",
        "\u83B7": "\u7372",
        "\u83B8": "\u8555",
        "\u83B9": "\u7469",
        "\u83BA": "\u9DAF",
        "\u83BC": "\u84F4",
        "\u841A": "\u8600",
        "\u841D": "\u863F",
        "\u8424": "\u87A2",
        "\u8425": "\u71DF",
        "\u8426": "\u7E08",
        "\u8427": "\u856D",
        "\u8428": "\u85A9",
        "\u8457": "\u8457",
        "\u846F": "\u85E5",
        "\u8471": "\u8525",
        "\u8487": "\u8546",
        "\u8489": "\u8562",
        "\u848B": "\u8523",
        "\u848C": "\u851E",
        "\u84DD": "\u85CD",
        "\u84DF": "\u858A",
        "\u84E0": "\u863A",
        "\u84E3": "\u8577",
        "\u84E5": "\u93A3",
        "\u84E6": "\u9A40",
        "\u8534": "\u9EBB",
        "\u8537": "\u8594",
        "\u8539": "\u861E",
        "\u853A": "\u85FA",
        "\u853C": "\u85F9",
        "\u8572": "\u8604",
        "\u8574": "\u860A",
        "\u85AE": "\u85EA",
        "\u85D3": "\u861A",
        "\u8616": "\u8617",
        "\u864F": "\u865C",
        "\u8651": "\u616E",
        "\u865A": "\u865B",
        "\u866B": "\u87F2",
        "\u866C": "\u866F",
        "\u866E": "\u87E3",
        "\u8671": "\u8768",
        "\u867D": "\u96D6",
        "\u867E": "\u8766",
        "\u867F": "\u8806",
        "\u8680": "\u8755",
        "\u8681": "\u87FB",
        "\u8682": "\u879E",
        "\u8695": "\u8836",
        "\u86AC": "\u8706",
        "\u86CA": "\u8831",
        "\u86CE": "\u8823",
        "\u86CF": "\u87F6",
        "\u86EE": "\u883B",
        "\u86F0": "\u87C4",
        "\u86F1": "\u86FA",
        "\u86F2": "\u87EF",
        "\u86F3": "\u8784",
        "\u86F4": "\u8810",
        "\u8715": "\u86FB",
        "\u8717": "\u8778",
        "\u8721": "\u881F",
        "\u8747": "\u8805",
        "\u8748": "\u87C8",
        "\u8749": "\u87EC",
        "\u874E": "\u880D",
        "\u8770": "\u867A",
        "\u877C": "\u87BB",
        "\u877E": "\u8811",
        "\u87A8": "\u87CE",
        "\u87CF": "\u8828",
        "\u87EE": "\u87FA",
        "\u8845": "\u91C1",
        "\u8846": "\u773E",
        "\u8854": "\u929C",
        "\u8865": "\u88DC",
        "\u886C": "\u896F",
        "\u886E": "\u889E",
        "\u8884": "\u8956",
        "\u8885": "\u88CA",
        "\u889C": "\u896A",
        "\u88AD": "\u8972",
        "\u88C5": "\u88DD",
        "\u88C6": "\u8960",
        "\u88CF": "\u88E1",
        "\u88E2": "\u8933",
        "\u88E3": "\u895D",
        "\u88E4": "\u8932",
        "\u88E5": "\u8949",
        "\u891B": "\u8938",
        "\u8934": "\u8964",
        "\u89C1": "\u898B",
        "\u89C2": "\u89C0",
        "\u89C3": "\u898E",
        "\u89C4": "\u898F",
        "\u89C5": "\u8993",
        "\u89C6": "\u8996",
        "\u89C7": "\u8998",
        "\u89C8": "\u89BD",
        "\u89C9": "\u89BA",
        "\u89CA": "\u89AC",
        "\u89CB": "\u89A1",
        "\u89CC": "\u89BF",
        "\u89CE": "\u89A6",
        "\u89CF": "\u89AF",
        "\u89D0": "\u89B2",
        "\u89D1": "\u89B7",
        "\u89DE": "\u89F4",
        "\u89E6": "\u89F8",
        "\u89EF": "\u89F6",
        "\u8A3C": "\u8B49",
        "\u8A89": "\u8B7D",
        "\u8A8A": "\u8B04",
        "\u8BA1": "\u8A08",
        "\u8BA2": "\u8A02",
        "\u8BA3": "\u8A03",
        "\u8BA4": "\u8A8D",
        "\u8BA5": "\u8B4F",
        "\u8BA6": "\u8A10",
        "\u8BA7": "\u8A0C",
        "\u8BA8": "\u8A0E",
        "\u8BA9": "\u8B93",
        "\u8BAA": "\u8A15",
        "\u8BAB": "\u8A16",
        "\u8BAD": "\u8A13",
        "\u8BAE": "\u8B70",
        "\u8BAF": "\u8A0A",
        "\u8BB0": "\u8A18",
        "\u8BB2": "\u8B1B",
        "\u8BB3": "\u8AF1",
        "\u8BB4": "\u8B33",
        "\u8BB5": "\u8A4E",
        "\u8BB6": "\u8A1D",
        "\u8BB7": "\u8A25",
        "\u8BB8": "\u8A31",
        "\u8BB9": "\u8A1B",
        "\u8BBA": "\u8AD6",
        "\u8BBB": "\u8A29",
        "\u8BBC": "\u8A1F",
        "\u8BBD": "\u8AF7",
        "\u8BBE": "\u8A2D",
        "\u8BBF": "\u8A2A",
        "\u8BC0": "\u8A23",
        "\u8BC1": "\u8B49",
        "\u8BC2": "\u8A41",
        "\u8BC3": "\u8A36",
        "\u8BC4": "\u8A55",
        "\u8BC5": "\u8A5B",
        "\u8BC6": "\u8B58",
        "\u8BC7": "\u8A57",
        "\u8BC8": "\u8A50",
        "\u8BC9": "\u8A34",
        "\u8BCA": "\u8A3A",
        "\u8BCB": "\u8A46",
        "\u8BCC": "\u8B05",
        "\u8BCD": "\u8A5E",
        "\u8BCE": "\u8A58",
        "\u8BCF": "\u8A54",
        "\u8BD1": "\u8B6F",
        "\u8BD2": "\u8A52",
        "\u8BD3": "\u8A86",
        "\u8BD4": "\u8A84",
        "\u8BD5": "\u8A66",
        "\u8BD6": "\u8A7F",
        "\u8BD7": "\u8A69",
        "\u8BD8": "\u8A70",
        "\u8BD9": "\u8A7C",
        "\u8BDA": "\u8AA0",
        "\u8BDB": "\u8A85",
        "\u8BDC": "\u8A75",
        "\u8BDD": "\u8A71",
        "\u8BDE": "\u8A95",
        "\u8BDF": "\u8A6C",
        "\u8BE0": "\u8A6E",
        "\u8BE1": "\u8A6D",
        "\u8BE2": "\u8A62",
        "\u8BE3": "\u8A63",
        "\u8BE4": "\u8ACD",
        "\u8BE5": "\u8A72",
        "\u8BE6": "\u8A73",
        "\u8BE7": "\u8A6B",
        "\u8BE8": "\u8AE2",
        "\u8BE9": "\u8A61",
        "\u8BEB": "\u8AA1",
        "\u8BEC": "\u8AA3",
        "\u8BED": "\u8A9E",
        "\u8BEE": "\u8A9A",
        "\u8BEF": "\u8AA4",
        "\u8BF0": "\u8AA5",
        "\u8BF1": "\u8A98",
        "\u8BF2": "\u8AA8",
        "\u8BF3": "\u8A91",
        "\u8BF4": "\u8AAA",
        "\u8BF5": "\u8AA6",
        "\u8BF6": "\u8A92",
        "\u8BF7": "\u8ACB",
        "\u8BF8": "\u8AF8",
        "\u8BF9": "\u8ACF",
        "\u8BFA": "\u8AFE",
        "\u8BFB": "\u8B80",
        "\u8BFC": "\u8AD1",
        "\u8BFD": "\u8AB9",
        "\u8BFE": "\u8AB2",
        "\u8BFF": "\u8AC9",
        "\u8C00": "\u8ADB",
        "\u8C01": "\u8AB0",
        "\u8C02": "\u8AD7",
        "\u8C03": "\u8ABF",
        "\u8C04": "\u8AC2",
        "\u8C05": "\u8AD2",
        "\u8C06": "\u8AC4",
        "\u8C07": "\u8AB6",
        "\u8C08": "\u8AC7",
        "\u8C09": "\u8B85",
        "\u8C0A": "\u8ABC",
        "\u8C0B": "\u8B00",
        "\u8C0C": "\u8AF6",
        "\u8C0D": "\u8ADC",
        "\u8C0E": "\u8B0A",
        "\u8C0F": "\u8AEB",
        "\u8C10": "\u8AE7",
        "\u8C11": "\u8B14",
        "\u8C12": "\u8B01",
        "\u8C13": "\u8B02",
        "\u8C14": "\u8AE4",
        "\u8C15": "\u8AED",
        "\u8C16": "\u8AFC",
        "\u8C17": "\u8B92",
        "\u8C18": "\u8AEE",
        "\u8C19": "\u8AF3",
        "\u8C1A": "\u8AFA",
        "\u8C1B": "\u8AE6",
        "\u8C1C": "\u8B0E",
        "\u8C1D": "\u8ADE",
        "\u8C1E": "\u8ADD",
        "\u8C1F": "\u8B28",
        "\u8C20": "\u8B9C",
        "\u8C21": "\u8B16",
        "\u8C22": "\u8B1D",
        "\u8C23": "\u8B20",
        "\u8C24": "\u8B17",
        "\u8C25": "\u8B1A",
        "\u8C26": "\u8B19",
        "\u8C27": "\u8B10",
        "\u8C28": "\u8B39",
        "\u8C29": "\u8B3E",
        "\u8C2A": "\u8B2B",
        "\u8C2B": "\u8B7E",
        "\u8C2C": "\u8B2C",
        "\u8C2D": "\u8B5A",
        "\u8C2E": "\u8B56",
        "\u8C2F": "\u8B59",
        "\u8C30": "\u8B95",
        "\u8C31": "\u8B5C",
        "\u8C32": "\u8B4E",
        "\u8C33": "\u8B9E",
        "\u8C34": "\u8B74",
        "\u8C35": "\u8B6B",
        "\u8C36": "\u8B96",
        "\u8C6E": "\u8C76",
        "\u8D1C": "\u8D13",
        "\u8D1D": "\u8C9D",
        "\u8D1E": "\u8C9E",
        "\u8D1F": "\u8CA0",
        "\u8D21": "\u8CA2",
        "\u8D22": "\u8CA1",
        "\u8D23": "\u8CAC",
        "\u8D24": "\u8CE2",
        "\u8D25": "\u6557",
        "\u8D26": "\u8CEC",
        "\u8D27": "\u8CA8",
        "\u8D28": "\u8CEA",
        "\u8D29": "\u8CA9",
        "\u8D2A": "\u8CAA",
        "\u8D2B": "\u8CA7",
        "\u8D2C": "\u8CB6",
        "\u8D2D": "\u8CFC",
        "\u8D2E": "\u8CAF",
        "\u8D2F": "\u8CAB",
        "\u8D30": "\u8CB3",
        "\u8D31": "\u8CE4",
        "\u8D32": "\u8CC1",
        "\u8D33": "\u8CB0",
        "\u8D34": "\u8CBC",
        "\u8D35": "\u8CB4",
        "\u8D36": "\u8CBA",
        "\u8D37": "\u8CB8",
        "\u8D38": "\u8CBF",
        "\u8D39": "\u8CBB",
        "\u8D3A": "\u8CC0",
        "\u8D3B": "\u8CBD",
        "\u8D3C": "\u8CCA",
        "\u8D3D": "\u8D04",
        "\u8D3E": "\u8CC8",
        "\u8D3F": "\u8CC4",
        "\u8D40": "\u8CB2",
        "\u8D41": "\u8CC3",
        "\u8D42": "\u8CC2",
        "\u8D43": "\u8D13",
        "\u8D44": "\u8CC7",
        "\u8D45": "\u8CC5",
        "\u8D46": "\u8D10",
        "\u8D47": "\u8CD5",
        "\u8D48": "\u8CD1",
        "\u8D49": "\u8CDA",
        "\u8D4A": "\u8CD2",
        "\u8D4B": "\u8CE6",
        "\u8D4C": "\u8CED",
        "\u8D4D": "\u9F4E",
        "\u8D4E": "\u8D16",
        "\u8D4F": "\u8CDE",
        "\u8D50": "\u8CDC",
        "\u8D52": "\u8CD9",
        "\u8D53": "\u8CE1",
        "\u8D54": "\u8CE0",
        "\u8D55": "\u8CE7",
        "\u8D56": "\u8CF4",
        "\u8D57": "\u8CF5",
        "\u8D58": "\u8D05",
        "\u8D59": "\u8CFB",
        "\u8D5A": "\u8CFA",
        "\u8D5B": "\u8CFD",
        "\u8D5C": "\u8CFE",
        "\u8D5D": "\u8D0B",
        "\u8D5E": "\u8D0A",
        "\u8D5F": "\u8D07",
        "\u8D60": "\u8D08",
        "\u8D61": "\u8D0D",
        "\u8D62": "\u8D0F",
        "\u8D63": "\u8D1B",
        "\u8D75": "\u8D99",
        "\u8D76": "\u8D95",
        "\u8D8B": "\u8DA8",
        "\u8DB1": "\u8DB2",
        "\u8DB8": "\u8E89",
        "\u8DC3": "\u8E8D",
        "\u8DC4": "\u8E4C",
        "\u8DDE": "\u8E92",
        "\u8DF5": "\u8E10",
        "\u8DF7": "\u8E7A",
        "\u8DF8": "\u8E55",
        "\u8DF9": "\u8E9A",
        "\u8DFB": "\u8E8B",
        "\u8E0A": "\u8E34",
        "\u8E0C": "\u8E8A",
        "\u8E2A": "\u8E64",
        "\u8E2C": "\u8E93",
        "\u8E2F": "\u8E91",
        "\u8E51": "\u8EA1",
        "\u8E52": "\u8E63",
        "\u8E70": "\u8E95",
        "\u8E7F": "\u8EA5",
        "\u8E8F": "\u8EAA",
        "\u8E9C": "\u8EA6",
        "\u8EAF": "\u8EC0",
        "\u8EB0": "\u9AD4",
        "\u8F66": "\u8ECA",
        "\u8F67": "\u8ECB",
        "\u8F68": "\u8ECC",
        "\u8F69": "\u8ED2",
        "\u8F6B": "\u8ED4",
        "\u8F6C": "\u8F49",
        "\u8F6D": "\u8EDB",
        "\u8F6E": "\u8F2A",
        "\u8F6F": "\u8EDF",
        "\u8F70": "\u8F5F",
        "\u8F71": "\u8EF2",
        "\u8F72": "\u8EFB",
        "\u8F73": "\u8F64",
        "\u8F74": "\u8EF8",
        "\u8F75": "\u8EF9",
        "\u8F76": "\u8EFC",
        "\u8F77": "\u8EE4",
        "\u8F78": "\u8EEB",
        "\u8F79": "\u8F62",
        "\u8F7A": "\u8EFA",
        "\u8F7B": "\u8F15",
        "\u8F7C": "\u8EFE",
        "\u8F7D": "\u8F09",
        "\u8F7E": "\u8F0A",
        "\u8F7F": "\u8F4E",
        "\u8F81": "\u8F07",
        "\u8F82": "\u8F05",
        "\u8F83": "\u8F03",
        "\u8F84": "\u8F12",
        "\u8F85": "\u8F14",
        "\u8F86": "\u8F1B",
        "\u8F87": "\u8F26",
        "\u8F88": "\u8F29",
        "\u8F89": "\u8F1D",
        "\u8F8A": "\u8F25",
        "\u8F8B": "\u8F1E",
        "\u8F8D": "\u8F1F",
        "\u8F8E": "\u8F1C",
        "\u8F8F": "\u8F33",
        "\u8F90": "\u8F3B",
        "\u8F91": "\u8F2F",
        "\u8F93": "\u8F38",
        "\u8F94": "\u8F61",
        "\u8F95": "\u8F45",
        "\u8F96": "\u8F44",
        "\u8F97": "\u8F3E",
        "\u8F98": "\u8F46",
        "\u8F99": "\u8F4D",
        "\u8F9A": "\u8F54",
        "\u8F9E": "\u8FAD",
        "\u8FA9": "\u8FAF",
        "\u8FAB": "\u8FAE",
        "\u8FB9": "\u908A",
        "\u8FBD": "\u907C",
        "\u8FBE": "\u9054",
        "\u8FC1": "\u9077",
        "\u8FC7": "\u904E",
        "\u8FC8": "\u9081",
        "\u8FD0": "\u904B",
        "\u8FD8": "\u9084",
        "\u8FD9": "\u9019",
        "\u8FDB": "\u9032",
        "\u8FDC": "\u9060",
        "\u8FDD": "\u9055",
        "\u8FDE": "\u9023",
        "\u8FDF": "\u9072",
        "\u8FE9": "\u9087",
        "\u8FF3": "\u9015",
        "\u8FF9": "\u8DE1",
        "\u9002": "\u9069",
        "\u9009": "\u9078",
        "\u900A": "\u905C",
        "\u9012": "\u905E",
        "\u9026": "\u9090",
        "\u903B": "\u908F",
        "\u9057": "\u907A",
        "\u9065": "\u9059",
        "\u9093": "\u9127",
        "\u909D": "\u913A",
        "\u90AC": "\u9114",
        "\u90AE": "\u90F5",
        "\u90B9": "\u9112",
        "\u90BA": "\u9134",
        "\u90BB": "\u9130",
        "\u90C3": "\u5408",
        "\u90C4": "\u9699",
        "\u90CF": "\u90DF",
        "\u90D0": "\u9136",
        "\u90D1": "\u912D",
        "\u90D3": "\u9106",
        "\u90E6": "\u9148",
        "\u90E7": "\u9116",
        "\u90F8": "\u9132",
        "\u915D": "\u919E",
        "\u9171": "\u91AC",
        "\u917D": "\u91C5",
        "\u917E": "\u91C3",
        "\u917F": "\u91C0",
        "\u9196": "\u919E",
        "\u91CA": "\u91CB",
        "\u91CC": "\u88E1",
        "\u9208": "\u923D",
        "\u9221": "\u9418",
        "\u9246": "\u947D",
        "\u9274": "\u9451",
        "\u92AE": "\u947E",
        "\u92BC": "\u5249",
        "\u92FB": "\u9451",
        "\u9318": "\u939A",
        "\u9332": "\u9304",
        "\u933E": "\u93E8",
        "\u9452": "\u9451",
        "\u9486": "\u91D3",
        "\u9487": "\u91D4",
        "\u9488": "\u91DD",
        "\u9489": "\u91D8",
        "\u948A": "\u91D7",
        "\u948B": "\u91D9",
        "\u948C": "\u91D5",
        "\u948D": "\u91F7",
        "\u948E": "\u91FA",
        "\u948F": "\u91E7",
        "\u9490": "\u91E4",
        "\u9492": "\u91E9",
        "\u9493": "\u91E3",
        "\u9494": "\u9346",
        "\u9495": "\u91F9",
        "\u9496": "\u935A",
        "\u9497": "\u91F5",
        "\u9498": "\u9203",
        "\u9499": "\u9223",
        "\u949A": "\u9208",
        "\u949B": "\u9226",
        "\u949C": "\u9245",
        "\u949D": "\u920D",
        "\u949E": "\u9214",
        "\u949F": "\u9418",
        "\u94A0": "\u9209",
        "\u94A1": "\u92C7",
        "\u94A2": "\u92FC",
        "\u94A3": "\u9211",
        "\u94A4": "\u9210",
        "\u94A5": "\u9470",
        "\u94A6": "\u6B3D",
        "\u94A7": "\u921E",
        "\u94A8": "\u93A2",
        "\u94A9": "\u9264",
        "\u94AA": "\u9227",
        "\u94AB": "\u9201",
        "\u94AC": "\u9225",
        "\u94AD": "\u9204",
        "\u94AE": "\u9215",
        "\u94AF": "\u9200",
        "\u94B0": "\u923A",
        "\u94B1": "\u9322",
        "\u94B2": "\u9266",
        "\u94B3": "\u9257",
        "\u94B4": "\u9237",
        "\u94B5": "\u7F3D",
        "\u94B6": "\u9233",
        "\u94B7": "\u9255",
        "\u94B8": "\u923D",
        "\u94B9": "\u9238",
        "\u94BA": "\u925E",
        "\u94BB": "\u947D",
        "\u94BC": "\u926C",
        "\u94BD": "\u926D",
        "\u94BE": "\u9240",
        "\u94BF": "\u923F",
        "\u94C0": "\u923E",
        "\u94C1": "\u9435",
        "\u94C2": "\u9251",
        "\u94C3": "\u9234",
        "\u94C4": "\u9460",
        "\u94C5": "\u925B",
        "\u94C6": "\u925A",
        "\u94C8": "\u9230",
        "\u94C9": "\u9249",
        "\u94CA": "\u9248",
        "\u94CB": "\u924D",
        "\u94CC": "\u922E",
        "\u94CD": "\u9239",
        "\u94CE": "\u9438",
        "\u94CF": "\u9276",
        "\u94D0": "\u92AC",
        "\u94D1": "\u92A0",
        "\u94D2": "\u927A",
        "\u94D3": "\u92E9",
        "\u94D5": "\u92AA",
        "\u94D6": "\u92EE",
        "\u94D7": "\u92CF",
        "\u94D8": "\u92E3",
        "\u94D9": "\u9403",
        "\u94DB": "\u943A",
        "\u94DC": "\u9285",
        "\u94DD": "\u92C1",
        "\u94DE": "\u92B1",
        "\u94DF": "\u92A6",
        "\u94E0": "\u93A7",
        "\u94E1": "\u9358",
        "\u94E2": "\u9296",
        "\u94E3": "\u9291",
        "\u94E4": "\u92CC",
        "\u94E5": "\u92A9",
        "\u94E7": "\u93F5",
        "\u94E8": "\u9293",
        "\u94E9": "\u93A9",
        "\u94EA": "\u927F",
        "\u94EB": "\u929A",
        "\u94EC": "\u927B",
        "\u94ED": "\u9298",
        "\u94EE": "\u931A",
        "\u94EF": "\u92AB",
        "\u94F0": "\u9278",
        "\u94F1": "\u92A5",
        "\u94F2": "\u93DF",
        "\u94F3": "\u9283",
        "\u94F4": "\u940B",
        "\u94F5": "\u92A8",
        "\u94F6": "\u9280",
        "\u94F7": "\u92A3",
        "\u94F8": "\u9444",
        "\u94F9": "\u9412",
        "\u94FA": "\u92EA",
        "\u94FC": "\u9338",
        "\u94FD": "\u92F1",
        "\u94FE": "\u93C8",
        "\u94FF": "\u93D7",
        "\u9500": "\u92B7",
        "\u9501": "\u9396",
        "\u9502": "\u92F0",
        "\u9503": "\u92E5",
        "\u9504": "\u92E4",
        "\u9505": "\u934B",
        "\u9506": "\u92EF",
        "\u9507": "\u92E8",
        "\u9508": "\u93FD",
        "\u9509": "\u92BC",
        "\u950A": "\u92DD",
        "\u950B": "\u92D2",
        "\u950C": "\u92C5",
        "\u950D": "\u92F6",
        "\u950E": "\u9426",
        "\u950F": "\u9427",
        "\u9510": "\u92B3",
        "\u9511": "\u92BB",
        "\u9512": "\u92C3",
        "\u9513": "\u92DF",
        "\u9514": "\u92E6",
        "\u9515": "\u9312",
        "\u9516": "\u9306",
        "\u9517": "\u937A",
        "\u9518": "\u9369",
        "\u9519": "\u932F",
        "\u951A": "\u9328",
        "\u951B": "\u931B",
        "\u951C": "\u9321",
        "\u951D": "\u9340",
        "\u951E": "\u9301",
        "\u951F": "\u9315",
        "\u9521": "\u932B",
        "\u9522": "\u932E",
        "\u9523": "\u947C",
        "\u9524": "\u9318",
        "\u9525": "\u9310",
        "\u9526": "\u9326",
        "\u9527": "\u9455",
        "\u9528": "\u9341",
        "\u9529": "\u9308",
        "\u952A": "\u9343",
        "\u952B": "\u9307",
        "\u952C": "\u931F",
        "\u952D": "\u9320",
        "\u952E": "\u9375",
        "\u952F": "\u92F8",
        "\u9530": "\u9333",
        "\u9531": "\u9319",
        "\u9532": "\u9365",
        "\u9534": "\u9347",
        "\u9535": "\u93D8",
        "\u9536": "\u9376",
        "\u9537": "\u9354",
        "\u9538": "\u9364",
        "\u9539": "\u936C",
        "\u953A": "\u937E",
        "\u953B": "\u935B",
        "\u953C": "\u93AA",
        "\u953E": "\u9370",
        "\u953F": "\u9384",
        "\u9540": "\u934D",
        "\u9541": "\u9382",
        "\u9542": "\u93E4",
        "\u9543": "\u93A1",
        "\u9544": "\u9428",
        "\u9545": "\u9387",
        "\u9546": "\u93CC",
        "\u9547": "\u93AE",
        "\u9549": "\u9398",
        "\u954A": "\u9477",
        "\u954B": "\u9482",
        "\u954C": "\u942B",
        "\u954D": "\u93B3",
        "\u954E": "\u93BF",
        "\u954F": "\u93A6",
        "\u9550": "\u93AC",
        "\u9551": "\u938A",
        "\u9552": "\u93B0",
        "\u9553": "\u93B5",
        "\u9554": "\u944C",
        "\u9555": "\u9394",
        "\u9556": "\u93E2",
        "\u9557": "\u93DC",
        "\u9558": "\u93DD",
        "\u9559": "\u93CD",
        "\u955A": "\u93F0",
        "\u955B": "\u93DE",
        "\u955C": "\u93E1",
        "\u955D": "\u93D1",
        "\u955E": "\u93C3",
        "\u955F": "\u93C7",
        "\u9561": "\u9414",
        "\u9562": "\u941D",
        "\u9563": "\u9410",
        "\u9564": "\u93F7",
        "\u9565": "\u9465",
        "\u9566": "\u9413",
        "\u9567": "\u946D",
        "\u9568": "\u9420",
        "\u9569": "\u9479",
        "\u956A": "\u93F9",
        "\u956B": "\u9419",
        "\u956C": "\u944A",
        "\u956D": "\u9433",
        "\u956E": "\u9436",
        "\u956F": "\u9432",
        "\u9570": "\u942E",
        "\u9571": "\u943F",
        "\u9572": "\u9454",
        "\u9573": "\u9463",
        "\u9574": "\u945E",
        "\u9576": "\u9472",
        "\u957F": "\u9577",
        "\u9591": "\u9592",
        "\u95A7": "\u9B28",
        "\u95E8": "\u9580",
        "\u95E9": "\u9582",
        "\u95EA": "\u9583",
        "\u95EB": "\u9586",
        "\u95ED": "\u9589",
        "\u95EE": "\u554F",
        "\u95EF": "\u95D6",
        "\u95F0": "\u958F",
        "\u95F1": "\u95C8",
        "\u95F2": "\u9592",
        "\u95F3": "\u958E",
        "\u95F4": "\u9593",
        "\u95F5": "\u9594",
        "\u95F6": "\u958C",
        "\u95F7": "\u60B6",
        "\u95F8": "\u9598",
        "\u95F9": "\u9B27",
        "\u95FA": "\u95A8",
        "\u95FB": "\u805E",
        "\u95FC": "\u95E5",
        "\u95FD": "\u95A9",
        "\u95FE": "\u95AD",
        "\u95FF": "\u95D3",
        "\u9600": "\u95A5",
        "\u9601": "\u95A3",
        "\u9602": "\u95A1",
        "\u9603": "\u95AB",
        "\u9604": "\u9B2E",
        "\u9605": "\u95B1",
        "\u9606": "\u95AC",
        "\u9608": "\u95BE",
        "\u9609": "\u95B9",
        "\u960A": "\u95B6",
        "\u960B": "\u9B29",
        "\u960C": "\u95BF",
        "\u960D": "\u95BD",
        "\u960E": "\u95BB",
        "\u960F": "\u95BC",
        "\u9610": "\u95E1",
        "\u9611": "\u95CC",
        "\u9612": "\u95C3",
        "\u9614": "\u95CA",
        "\u9615": "\u95CB",
        "\u9616": "\u95D4",
        "\u9617": "\u95D0",
        "\u9619": "\u95D5",
        "\u961A": "\u95DE",
        "\u961F": "\u968A",
        "\u9633": "\u967D",
        "\u9634": "\u9670",
        "\u9635": "\u9663",
        "\u9636": "\u968E",
        "\u9645": "\u969B",
        "\u9646": "\u9678",
        "\u9647": "\u96B4",
        "\u9648": "\u9673",
        "\u9649": "\u9658",
        "\u9655": "\u965D",
        "\u9667": "\u9689",
        "\u9668": "\u9695",
        "\u9669": "\u96AA",
        "\u968F": "\u96A8",
        "\u9690": "\u96B1",
        "\u96B6": "\u96B8",
        "\u96BD": "\u96CB",
        "\u96BE": "\u96E3",
        "\u96CF": "\u96DB",
        "\u96E0": "\u8B8E",
        "\u96F3": "\u9742",
        "\u96FE": "\u9727",
        "\u9701": "\u973D",
        "\u9709": "\u9EF4",
        "\u972D": "\u9744",
        "\u9753": "\u975A",
        "\u9759": "\u975C",
        "\u9763": "\u9762",
        "\u9765": "\u9768",
        "\u9791": "\u97C3",
        "\u9792": "\u6A47",
        "\u97AF": "\u97C9",
        "\u97E6": "\u97CB",
        "\u97E7": "\u97CC",
        "\u97E8": "\u97CD",
        "\u97E9": "\u97D3",
        "\u97EA": "\u97D9",
        "\u97EB": "\u97DE",
        "\u97EC": "\u97DC",
        "\u97F5": "\u97FB",
        "\u9875": "\u9801",
        "\u9876": "\u9802",
        "\u9877": "\u9803",
        "\u9878": "\u9807",
        "\u9879": "\u9805",
        "\u987A": "\u9806",
        "\u987B": "\u9808",
        "\u987C": "\u980A",
        "\u987D": "\u9811",
        "\u987E": "\u9867",
        "\u987F": "\u9813",
        "\u9880": "\u980E",
        "\u9881": "\u9812",
        "\u9882": "\u980C",
        "\u9883": "\u980F",
        "\u9884": "\u9810",
        "\u9885": "\u9871",
        "\u9886": "\u9818",
        "\u9887": "\u9817",
        "\u9888": "\u9838",
        "\u9889": "\u9821",
        "\u988A": "\u9830",
        "\u988B": "\u9832",
        "\u988C": "\u981C",
        "\u988D": "\u6F41",
        "\u988F": "\u9826",
        "\u9890": "\u9824",
        "\u9891": "\u983B",
        "\u9893": "\u9839",
        "\u9894": "\u9837",
        "\u9896": "\u7A4E",
        "\u9897": "\u9846",
        "\u9898": "\u984C",
        "\u9899": "\u9852",
        "\u989A": "\u984E",
        "\u989B": "\u9853",
        "\u989C": "\u984F",
        "\u989D": "\u984D",
        "\u989E": "\u9873",
        "\u989F": "\u9862",
        "\u98A0": "\u985B",
        "\u98A1": "\u9859",
        "\u98A2": "\u9865",
        "\u98A4": "\u986B",
        "\u98A5": "\u986C",
        "\u98A6": "\u9870",
        "\u98A7": "\u9874",
        "\u98CE": "\u98A8",
        "\u98D1": "\u98AE",
        "\u98D2": "\u98AF",
        "\u98D3": "\u98B6",
        "\u98D4": "\u98B8",
        "\u98D5": "\u98BC",
        "\u98D7": "\u98C0",
        "\u98D8": "\u98C4",
        "\u98D9": "\u98C6",
        "\u98DA": "\u98C8",
        "\u98DE": "\u98DB",
        "\u98E8": "\u9957",
        "\u990D": "\u995C",
        "\u9965": "\u98E2",
        "\u9966": "\u98E5",
        "\u9967": "\u9933",
        "\u9968": "\u98E9",
        "\u9969": "\u993C",
        "\u996A": "\u98EA",
        "\u996B": "\u98EB",
        "\u996C": "\u98ED",
        "\u996D": "\u98EF",
        "\u996E": "\u98F2",
        "\u996F": "\u991E",
        "\u9970": "\u98FE",
        "\u9971": "\u98FD",
        "\u9972": "\u98FC",
        "\u9973": "\u98FF",
        "\u9974": "\u98F4",
        "\u9975": "\u990C",
        "\u9976": "\u9952",
        "\u9977": "\u9909",
        "\u9978": "\u9904",
        "\u9979": "\u990E",
        "\u997A": "\u9903",
        "\u997B": "\u990F",
        "\u997C": "\u9905",
        "\u997D": "\u9911",
        "\u997F": "\u9913",
        "\u9980": "\u9918",
        "\u9981": "\u9912",
        "\u9983": "\u991C",
        "\u9984": "\u991B",
        "\u9985": "\u9921",
        "\u9986": "\u9928",
        "\u9987": "\u9937",
        "\u9988": "\u994B",
        "\u9989": "\u9936",
        "\u998A": "\u993F",
        "\u998B": "\u995E",
        "\u998D": "\u9943",
        "\u998E": "\u993A",
        "\u998F": "\u993E",
        "\u9990": "\u9948",
        "\u9991": "\u9949",
        "\u9992": "\u9945",
        "\u9993": "\u994A",
        "\u9994": "\u994C",
        "\u9995": "\u995F",
        "\u9A03": "\u5446",
        "\u9A6C": "\u99AC",
        "\u9A6D": "\u99AD",
        "\u9A6E": "\u99B1",
        "\u9A6F": "\u99B4",
        "\u9A70": "\u99B3",
        "\u9A71": "\u9A45",
        "\u9A73": "\u99C1",
        "\u9A74": "\u9A62",
        "\u9A75": "\u99D4",
        "\u9A76": "\u99DB",
        "\u9A77": "\u99DF",
        "\u9A78": "\u99D9",
        "\u9A79": "\u99D2",
        "\u9A7A": "\u9A36",
        "\u9A7B": "\u99D0",
        "\u9A7C": "\u99DD",
        "\u9A7D": "\u99D1",
        "\u9A7E": "\u99D5",
        "\u9A7F": "\u9A5B",
        "\u9A80": "\u99D8",
        "\u9A81": "\u9A4D",
        "\u9A82": "\u7F75",
        "\u9A84": "\u9A55",
        "\u9A85": "\u9A4A",
        "\u9A86": "\u99F1",
        "\u9A87": "\u99ED",
        "\u9A88": "\u99E2",
        "\u9A8A": "\u9A6A",
        "\u9A8B": "\u9A01",
        "\u9A8C": "\u9A57",
        "\u9A8E": "\u99F8",
        "\u9A8F": "\u99FF",
        "\u9A90": "\u9A0F",
        "\u9A91": "\u9A0E",
        "\u9A92": "\u9A0D",
        "\u9A93": "\u9A05",
        "\u9A96": "\u9A42",
        "\u9A97": "\u9A19",
        "\u9A98": "\u9A2D",
        "\u9A9A": "\u9A37",
        "\u9A9B": "\u9A16",
        "\u9A9C": "\u9A41",
        "\u9A9D": "\u9A2E",
        "\u9A9E": "\u9A2B",
        "\u9A9F": "\u9A38",
        "\u9AA0": "\u9A43",
        "\u9AA1": "\u9A3E",
        "\u9AA2": "\u9A44",
        "\u9AA3": "\u9A4F",
        "\u9AA4": "\u9A5F",
        "\u9AA5": "\u9A65",
        "\u9AA7": "\u9A64",
        "\u9AC5": "\u9ACF",
        "\u9ACB": "\u9AD6",
        "\u9ACC": "\u9AD5",
        "\u9B13": "\u9B22",
        "\u9B47": "\u9B58",
        "\u9B49": "\u9B4E",
        "\u9C7C": "\u9B5A",
        "\u9C7D": "\u9B5B",
        "\u9C7F": "\u9B77",
        "\u9C81": "\u9B6F",
        "\u9C82": "\u9B74",
        "\u9C85": "\u9B81",
        "\u9C86": "\u9B83",
        "\u9C87": "\u9BF0",
        "\u9C88": "\u9C78",
        "\u9C8A": "\u9B93",
        "\u9C8B": "\u9B92",
        "\u9C8D": "\u9B91",
        "\u9C8E": "\u9C5F",
        "\u9C8F": "\u9B8D",
        "\u9C90": "\u9B90",
        "\u9C91": "\u9BAD",
        "\u9C92": "\u9B9A",
        "\u9C94": "\u9BAA",
        "\u9C95": "\u9B9E",
        "\u9C96": "\u9BA6",
        "\u9C97": "\u9C02",
        "\u9C99": "\u9C60",
        "\u9C9A": "\u9C6D",
        "\u9C9B": "\u9BAB",
        "\u9C9C": "\u9BAE",
        "\u9C9D": "\u9BBA",
        "\u9C9E": "\u9BD7",
        "\u9C9F": "\u9C58",
        "\u9CA0": "\u9BC1",
        "\u9CA1": "\u9C7A",
        "\u9CA2": "\u9C31",
        "\u9CA3": "\u9C39",
        "\u9CA4": "\u9BC9",
        "\u9CA5": "\u9C23",
        "\u9CA6": "\u9C37",
        "\u9CA7": "\u9BC0",
        "\u9CA8": "\u9BCA",
        "\u9CA9": "\u9BC7",
        "\u9CAB": "\u9BFD",
        "\u9CAD": "\u9BD6",
        "\u9CAE": "\u9BEA",
        "\u9CB0": "\u9BEB",
        "\u9CB1": "\u9BE1",
        "\u9CB2": "\u9BE4",
        "\u9CB3": "\u9BE7",
        "\u9CB4": "\u9BDD",
        "\u9CB5": "\u9BE2",
        "\u9CB6": "\u9BF0",
        "\u9CB7": "\u9BDB",
        "\u9CB8": "\u9BE8",
        "\u9CBA": "\u9BF4",
        "\u9CBB": "\u9BD4",
        "\u9CBC": "\u9C5D",
        "\u9CBD": "\u9C08",
        "\u9CBF": "\u9C68",
        "\u9CC1": "\u9C1B",
        "\u9CC3": "\u9C13",
        "\u9CC4": "\u9C77",
        "\u9CC5": "\u9C0D",
        "\u9CC6": "\u9C12",
        "\u9CC7": "\u9C09",
        "\u9CCA": "\u9BFF",
        "\u9CCB": "\u9C20",
        "\u9CCC": "\u9C32",
        "\u9CCD": "\u9C2D",
        "\u9CCE": "\u9C28",
        "\u9CCF": "\u9C25",
        "\u9CD0": "\u9C29",
        "\u9CD1": "\u9C1F",
        "\u9CD2": "\u9C1C",
        "\u9CD3": "\u9C33",
        "\u9CD4": "\u9C3E",
        "\u9CD5": "\u9C48",
        "\u9CD6": "\u9C49",
        "\u9CD7": "\u9C3B",
        "\u9CD8": "\u9C35",
        "\u9CD9": "\u9C45",
        "\u9CDB": "\u9C3C",
        "\u9CDC": "\u9C56",
        "\u9CDD": "\u9C54",
        "\u9CDE": "\u9C57",
        "\u9CDF": "\u9C52",
        "\u9CE2": "\u9C67",
        "\u9CE3": "\u9C63",
        "\u9D8F": "\u96DE",
        "\u9DC4": "\u96DE",
        "\u9E1F": "\u9CE5",
        "\u9E20": "\u9CE9",
        "\u9E21": "\u96DE",
        "\u9E22": "\u9CF6",
        "\u9E23": "\u9CF4",
        "\u9E25": "\u9DD7",
        "\u9E26": "\u9D09",
        "\u9E27": "\u9DAC",
        "\u9E28": "\u9D07",
        "\u9E29": "\u9D06",
        "\u9E2A": "\u9D23",
        "\u9E2B": "\u9D87",
        "\u9E2C": "\u9E15",
        "\u9E2D": "\u9D28",
        "\u9E2E": "\u9D1E",
        "\u9E2F": "\u9D26",
        "\u9E30": "\u9D12",
        "\u9E31": "\u9D1F",
        "\u9E32": "\u9D1D",
        "\u9E33": "\u9D1B",
        "\u9E35": "\u9D15",
        "\u9E36": "\u9DE5",
        "\u9E37": "\u9DD9",
        "\u9E38": "\u9D2F",
        "\u9E39": "\u9D30",
        "\u9E3A": "\u9D42",
        "\u9E3B": "\u9D34",
        "\u9E3C": "\u9D43",
        "\u9E3D": "\u9D3F",
        "\u9E3E": "\u9E1E",
        "\u9E3F": "\u9D3B",
        "\u9E41": "\u9D53",
        "\u9E42": "\u9E1D",
        "\u9E43": "\u9D51",
        "\u9E44": "\u9D60",
        "\u9E45": "\u9D5D",
        "\u9E46": "\u9D52",
        "\u9E47": "\u9DF4",
        "\u9E48": "\u9D5C",
        "\u9E49": "\u9D61",
        "\u9E4A": "\u9D72",
        "\u9E4B": "\u9D93",
        "\u9E4C": "\u9D6A",
        "\u9E4E": "\u9D6F",
        "\u9E4F": "\u9D6C",
        "\u9E50": "\u9D6E",
        "\u9E51": "\u9D89",
        "\u9E52": "\u9D8A",
        "\u9E55": "\u9D98",
        "\u9E56": "\u9DA1",
        "\u9E57": "\u9D9A",
        "\u9E58": "\u9DBB",
        "\u9E59": "\u9D96",
        "\u9E5A": "\u9DBF",
        "\u9E5B": "\u9DA5",
        "\u9E5C": "\u9DA9",
        "\u9E5E": "\u9DC2",
        "\u9E61": "\u9DBA",
        "\u9E63": "\u9DBC",
        "\u9E64": "\u9DB4",
        "\u9E65": "\u9DD6",
        "\u9E66": "\u9E1A",
        "\u9E67": "\u9DD3",
        "\u9E68": "\u9DDA",
        "\u9E69": "\u9DEF",
        "\u9E6A": "\u9DE6",
        "\u9E6B": "\u9DF2",
        "\u9E6C": "\u9DF8",
        "\u9E6D": "\u9DFA",
        "\u9E6F": "\u9E07",
        "\u9E70": "\u9DF9",
        "\u9E71": "\u9E0C",
        "\u9E73": "\u9E1B",
        "\u9E7E": "\u9E7A",
        "\u9EA6": "\u9EA5",
        "\u9EB8": "\u9EA9",
        "\u9EBD": "\u9EBC",
        "\u9EC4": "\u9EC3",
        "\u9EC9": "\u9ECC",
        "\u9EE1": "\u9EF6",
        "\u9EE9": "\u9EF7",
        "\u9EEA": "\u9EF2",
        "\u9EFE": "\u9EFD",
        "\u9F0B": "\u9EFF",
        "\u9F0D": "\u9F09",
        "\u9F39": "\u9F34",
        "\u9F50": "\u9F4A",
        "\u9F51": "\u9F4F",
        "\u9F76": "\u984E",
        "\u9F7F": "\u9F52",
        "\u9F80": "\u9F54",
        "\u9F83": "\u9F5F",
        "\u9F84": "\u9F61",
        "\u9F85": "\u9F59",
        "\u9F86": "\u9F60",
        "\u9F87": "\u9F5C",
        "\u9F88": "\u9F66",
        "\u9F89": "\u9F6C",
        "\u9F8A": "\u9F6A",
        "\u9F8B": "\u9F72",
        "\u9F8C": "\u9F77",
        "\u9F99": "\u9F8D",
        "\u9F9A": "\u9F94",
        "\u9F9B": "\u9F95",
        "\u9F9F": "\u9F9C",
        "\uE5F1": "\u3000"
      };
      function toTrad(itxt) {
        var zhmap = TongWen.s_2_t;
        itxt = itxt.replace(/[^\x00-\xFF]/g, replaceFn);
        return itxt;
        function replaceFn(s) {
          return s in zhmap ? zhmap[s] : s;
        }
      }
      module.exports = toTrad;
    }
  });

  // node_modules/chinese-conv/tongwen/tongwen-ts.js
  var require_tongwen_ts = __commonJS({
    "node_modules/chinese-conv/tongwen/tongwen-ts.js"(exports, module) {
      if (typeof TongWen == "undefined")
        var TongWen = new Object();
      TongWen.t_2_s = {
        "\xAF": "\u02C9",
        "\u2025": "\xA8",
        "\u2027": "\xB7",
        "\u2035": "\uFF40",
        "\u2252": "\u2248",
        "\u2266": "\u2264",
        "\u2267": "\u2265",
        "\u2571": "\uFF0F",
        "\u2572": "\uFF3C",
        "\u2574": "\uFF3F",
        "\u300C": "\u201C",
        "\u300D": "\u201D",
        "\u300E": "\u2018",
        "\u300F": "\u2019",
        "\u3473": "\u3447",
        "\u361A": "\u360E",
        "\u396E": "\u3918",
        "\u3A73": "\u39D0",
        "\u43B1": "\u43AC",
        "\u4661": "\u464C",
        "\u477C": "\u478D",
        "\u4947": "\u4982",
        "\u499B": "\u49B6",
        "\u499F": "\u49B7",
        "\u4C77": "\u4CA3",
        "\u4E1F": "\u4E22",
        "\u4E26": "\u5E76",
        "\u4E3C": "\u4E95",
        "\u4E7E": "\u5E72",
        "\u4E82": "\u4E71",
        "\u4E99": "\u4E98",
        "\u4E9E": "\u4E9A",
        "\u4F15": "\u592B",
        "\u4F47": "\u4F2B",
        "\u4F48": "\u5E03",
        "\u4F54": "\u5360",
        "\u4F6A": "\u5F8A",
        "\u4F75": "\u5E76",
        "\u4F86": "\u6765",
        "\u4F96": "\u4ED1",
        "\u4F9A": "\u5F87",
        "\u4FB6": "\u4FA3",
        "\u4FB7": "\u5C40",
        "\u4FC1": "\u4FE3",
        "\u4FC2": "\u7CFB",
        "\u4FE0": "\u4FA0",
        "\u5000": "\u4F25",
        "\u5006": "\u4FE9",
        "\u5009": "\u4ED3",
        "\u500B": "\u4E2A",
        "\u5011": "\u4EEC",
        "\u5016": "\u5E78",
        "\u5023": "\u4EFF",
        "\u502B": "\u4F26",
        "\u5049": "\u4F1F",
        "\u506A": "\u903C",
        "\u5074": "\u4FA7",
        "\u5075": "\u4FA6",
        "\u507A": "\u54B1",
        "\u507D": "\u4F2A",
        "\u5091": "\u6770",
        "\u5096": "\u4F27",
        "\u5098": "\u4F1E",
        "\u5099": "\u5907",
        "\u509A": "\u6548",
        "\u50A2": "\u5BB6",
        "\u50AD": "\u4F63",
        "\u50AF": "\u506C",
        "\u50B3": "\u4F20",
        "\u50B4": "\u4F1B",
        "\u50B5": "\u503A",
        "\u50B7": "\u4F24",
        "\u50BE": "\u503E",
        "\u50C2": "\u507B",
        "\u50C5": "\u4EC5",
        "\u50C9": "\u4F65",
        "\u50CA": "\u4ED9",
        "\u50D1": "\u4FA8",
        "\u50D5": "\u4EC6",
        "\u50DE": "\u4F2A",
        "\u50E3": "\u50ED",
        "\u50E5": "\u4FA5",
        "\u50E8": "\u507E",
        "\u50F1": "\u96C7",
        "\u50F9": "\u4EF7",
        "\u5100": "\u4EEA",
        "\u5102": "\u4FAC",
        "\u5104": "\u4EBF",
        "\u5105": "\u5F53",
        "\u5108": "\u4FA9",
        "\u5109": "\u4FED",
        "\u5110": "\u50A7",
        "\u5114": "\u4FE6",
        "\u5115": "\u4FAA",
        "\u5118": "\u5C3D",
        "\u511F": "\u507F",
        "\u512A": "\u4F18",
        "\u5132": "\u50A8",
        "\u5137": "\u4FEA",
        "\u5138": "\u7F57",
        "\u513A": "\u50A9",
        "\u513B": "\u50A5",
        "\u513C": "\u4FE8",
        "\u5147": "\u51F6",
        "\u514C": "\u5151",
        "\u5152": "\u513F",
        "\u5157": "\u5156",
        "\u5167": "\u5185",
        "\u5169": "\u4E24",
        "\u518A": "\u518C",
        "\u5191": "\u80C4",
        "\u51AA": "\u5E42",
        "\u51C5": "\u6DB8",
        "\u51C8": "\u51C0",
        "\u51CD": "\u51BB",
        "\u51DC": "\u51DB",
        "\u51F1": "\u51EF",
        "\u5225": "\u522B",
        "\u522A": "\u5220",
        "\u5244": "\u522D",
        "\u5247": "\u5219",
        "\u5249": "\u9509",
        "\u524B": "\u514B",
        "\u524E": "\u5239",
        "\u5257": "\u522C",
        "\u525B": "\u521A",
        "\u525D": "\u5265",
        "\u526E": "\u5250",
        "\u5274": "\u5240",
        "\u5275": "\u521B",
        "\u5277": "\u94F2",
        "\u5283": "\u5212",
        "\u5284": "\u672D",
        "\u5287": "\u5267",
        "\u5289": "\u5218",
        "\u528A": "\u523D",
        "\u528C": "\u523F",
        "\u528D": "\u5251",
        "\u5291": "\u5242",
        "\u52BB": "\u5321",
        "\u52C1": "\u52B2",
        "\u52D5": "\u52A8",
        "\u52D7": "\u52D6",
        "\u52D9": "\u52A1",
        "\u52DB": "\u52CB",
        "\u52DD": "\u80DC",
        "\u52DE": "\u52B3",
        "\u52E2": "\u52BF",
        "\u52E3": "\u7EE9",
        "\u52E6": "\u527F",
        "\u52E9": "\u52DA",
        "\u52F1": "\u52A2",
        "\u52F3": "\u52CB",
        "\u52F5": "\u52B1",
        "\u52F8": "\u529D",
        "\u52FB": "\u5300",
        "\u530B": "\u9676",
        "\u532D": "\u5326",
        "\u532F": "\u6C47",
        "\u5331": "\u532E",
        "\u5340": "\u533A",
        "\u5344": "\u5EFF",
        "\u5354": "\u534F",
        "\u536C": "\u6602",
        "\u5379": "\u6064",
        "\u537B": "\u5374",
        "\u5399": "\u538D",
        "\u53AD": "\u538C",
        "\u53B2": "\u5389",
        "\u53B4": "\u53A3",
        "\u53C3": "\u53C2",
        "\u53E1": "\u777F",
        "\u53E2": "\u4E1B",
        "\u540B": "\u5BF8",
        "\u540E": "\u540E",
        "\u5433": "\u5434",
        "\u5436": "\u5450",
        "\u5442": "\u5415",
        "\u544E": "\u5C3A",
        "\u54B7": "\u5555",
        "\u54BC": "\u5459",
        "\u54E1": "\u5458",
        "\u5504": "\u5457",
        "\u551D": "\u55CA",
        "\u5538": "\u5FF5",
        "\u554F": "\u95EE",
        "\u5553": "\u542F",
        "\u5557": "\u5556",
        "\u555E": "\u54D1",
        "\u555F": "\u542F",
        "\u5562": "\u5521",
        "\u5563": "\u8854",
        "\u558E": "\u359E",
        "\u559A": "\u5524",
        "\u55AA": "\u4E27",
        "\u55AB": "\u5403",
        "\u55AC": "\u4E54",
        "\u55AE": "\u5355",
        "\u55B2": "\u54DF",
        "\u55C6": "\u545B",
        "\u55C7": "\u556C",
        "\u55CE": "\u5417",
        "\u55DA": "\u545C",
        "\u55E9": "\u5522",
        "\u55F6": "\u54D4",
        "\u5606": "\u53F9",
        "\u560D": "\u55BD",
        "\u5614": "\u5455",
        "\u5616": "\u5567",
        "\u5617": "\u5C1D",
        "\u561C": "\u551B",
        "\u5629": "\u54D7",
        "\u562E": "\u5520",
        "\u562F": "\u5578",
        "\u5630": "\u53FD",
        "\u5635": "\u54D3",
        "\u5638": "\u5452",
        "\u5641": "\u6076",
        "\u5653": "\u5618",
        "\u565D": "\u549D",
        "\u5660": "\u54D2",
        "\u5665": "\u54DD",
        "\u5666": "\u54D5",
        "\u566F": "\u55F3",
        "\u5672": "\u54D9",
        "\u5674": "\u55B7",
        "\u5678": "\u5428",
        "\u5679": "\u5F53",
        "\u5680": "\u549B",
        "\u5687": "\u5413",
        "\u568C": "\u54DC",
        "\u5690": "\u5C1D",
        "\u5695": "\u565C",
        "\u5699": "\u556E",
        "\u56A5": "\u54BD",
        "\u56A6": "\u5456",
        "\u56A8": "\u5499",
        "\u56AE": "\u5411",
        "\u56B3": "\u55BE",
        "\u56B4": "\u4E25",
        "\u56B6": "\u5624",
        "\u56C0": "\u556D",
        "\u56C1": "\u55EB",
        "\u56C2": "\u56A3",
        "\u56C5": "\u5181",
        "\u56C8": "\u5453",
        "\u56C9": "\u5570",
        "\u56CC": "\u82CF",
        "\u56D1": "\u5631",
        "\u56D3": "\u556E",
        "\u56EA": "\u56F1",
        "\u5707": "\u56F5",
        "\u570B": "\u56FD",
        "\u570D": "\u56F4",
        "\u570F": "\u5708",
        "\u5712": "\u56ED",
        "\u5713": "\u5706",
        "\u5716": "\u56FE",
        "\u5718": "\u56E2",
        "\u5775": "\u4E18",
        "\u57DC": "\u91CE",
        "\u57E1": "\u57AD",
        "\u57F7": "\u6267",
        "\u57FC": "\u5D0E",
        "\u5805": "\u575A",
        "\u580A": "\u57A9",
        "\u5816": "\u57B4",
        "\u581D": "\u57DA",
        "\u582F": "\u5C27",
        "\u5831": "\u62A5",
        "\u5834": "\u573A",
        "\u584A": "\u5757",
        "\u584B": "\u8314",
        "\u584F": "\u57B2",
        "\u5852": "\u57D8",
        "\u5857": "\u6D82",
        "\u585A": "\u51A2",
        "\u5862": "\u575E",
        "\u5864": "\u57D9",
        "\u5875": "\u5C18",
        "\u5879": "\u5811",
        "\u588A": "\u57AB",
        "\u5891": "\u5892",
        "\u589C": "\u5760",
        "\u58AB": "\u6A3D",
        "\u58AE": "\u5815",
        "\u58B3": "\u575F",
        "\u58BB": "\u5899",
        "\u58BE": "\u57A6",
        "\u58C7": "\u575B",
        "\u58CE": "\u57D9",
        "\u58D3": "\u538B",
        "\u58D8": "\u5792",
        "\u58D9": "\u5739",
        "\u58DA": "\u5786",
        "\u58DE": "\u574F",
        "\u58DF": "\u5784",
        "\u58E2": "\u575C",
        "\u58E9": "\u575D",
        "\u58EF": "\u58EE",
        "\u58FA": "\u58F6",
        "\u58FD": "\u5BFF",
        "\u5920": "\u591F",
        "\u5922": "\u68A6",
        "\u593E": "\u5939",
        "\u5950": "\u5942",
        "\u5967": "\u5965",
        "\u5969": "\u5941",
        "\u596A": "\u593A",
        "\u596E": "\u594B",
        "\u599D": "\u5986",
        "\u59CD": "\u59D7",
        "\u59E6": "\u5978",
        "\u59EA": "\u4F84",
        "\u5A1B": "\u5A31",
        "\u5A41": "\u5A04",
        "\u5A66": "\u5987",
        "\u5A6C": "\u6DEB",
        "\u5A6D": "\u5A05",
        "\u5AA7": "\u5A32",
        "\u5AAE": "\u5077",
        "\u5AAF": "\u59AB",
        "\u5ABC": "\u5AAA",
        "\u5ABD": "\u5988",
        "\u5ABF": "\u6127",
        "\u5ACB": "\u8885",
        "\u5AD7": "\u59AA",
        "\u5AF5": "\u59A9",
        "\u5AFB": "\u5A34",
        "\u5AFF": "\u5A73",
        "\u5B08": "\u5A06",
        "\u5B0B": "\u5A75",
        "\u5B0C": "\u5A07",
        "\u5B19": "\u5AF1",
        "\u5B1D": "\u8885",
        "\u5B21": "\u5AD2",
        "\u5B24": "\u5B37",
        "\u5B2A": "\u5AD4",
        "\u5B2D": "\u5976",
        "\u5B30": "\u5A74",
        "\u5B38": "\u5A76",
        "\u5B43": "\u5A18",
        "\u5B4C": "\u5A08",
        "\u5B6B": "\u5B59",
        "\u5B78": "\u5B66",
        "\u5B7F": "\u5B6A",
        "\u5BAE": "\u5BAB",
        "\u5BD8": "\u7F6E",
        "\u5BE2": "\u5BDD",
        "\u5BE6": "\u5B9E",
        "\u5BE7": "\u5B81",
        "\u5BE9": "\u5BA1",
        "\u5BEB": "\u5199",
        "\u5BEC": "\u5BBD",
        "\u5BF5": "\u5BA0",
        "\u5BF6": "\u5B9D",
        "\u5C07": "\u5C06",
        "\u5C08": "\u4E13",
        "\u5C0B": "\u5BFB",
        "\u5C0D": "\u5BF9",
        "\u5C0E": "\u5BFC",
        "\u5C37": "\u5C34",
        "\u5C46": "\u5C4A",
        "\u5C4D": "\u5C38",
        "\u5C5C": "\u5C49",
        "\u5C5D": "\u6249",
        "\u5C62": "\u5C61",
        "\u5C64": "\u5C42",
        "\u5C68": "\u5C66",
        "\u5C6C": "\u5C5E",
        "\u5CA1": "\u5188",
        "\u5CF4": "\u5C98",
        "\u5CF6": "\u5C9B",
        "\u5CFD": "\u5CE1",
        "\u5D0D": "\u5D03",
        "\u5D11": "\u6606",
        "\u5D17": "\u5C97",
        "\u5D19": "\u4ED1",
        "\u5D20": "\u5CBD",
        "\u5D22": "\u5CE5",
        "\u5D33": "\u5D5B",
        "\u5D50": "\u5C9A",
        "\u5D52": "\u5CA9",
        "\u5D81": "\u5D5D",
        "\u5D84": "\u5D2D",
        "\u5D87": "\u5C96",
        "\u5D94": "\u5D5A",
        "\u5D97": "\u5D02",
        "\u5DA0": "\u5CE4",
        "\u5DA2": "\u5CE3",
        "\u5DA7": "\u5CC4",
        "\u5DA8": "\u5CC3",
        "\u5DB8": "\u5D58",
        "\u5DBA": "\u5CAD",
        "\u5DBC": "\u5C7F",
        "\u5DBD": "\u5CB3",
        "\u5DCB": "\u5CBF",
        "\u5DD2": "\u5CE6",
        "\u5DD4": "\u5DC5",
        "\u5DD6": "\u5CA9",
        "\u5DF0": "\u5DEF",
        "\u5DF9": "\u537A",
        "\u5E25": "\u5E05",
        "\u5E2B": "\u5E08",
        "\u5E33": "\u5E10",
        "\u5E36": "\u5E26",
        "\u5E40": "\u5E27",
        "\u5E43": "\u5E0F",
        "\u5E57": "\u5E3C",
        "\u5E58": "\u5E3B",
        "\u5E5F": "\u5E1C",
        "\u5E63": "\u5E01",
        "\u5E6B": "\u5E2E",
        "\u5E6C": "\u5E31",
        "\u5E75": "\u5F00",
        "\u5E77": "\u5E76",
        "\u5E79": "\u5E72",
        "\u5E7E": "\u51E0",
        "\u5E82": "\u4EC4",
        "\u5EAB": "\u5E93",
        "\u5EC1": "\u5395",
        "\u5EC2": "\u53A2",
        "\u5EC4": "\u53A9",
        "\u5EC8": "\u53A6",
        "\u5ECE": "\u5EBC",
        "\u5EDA": "\u53A8",
        "\u5EDD": "\u53AE",
        "\u5EDF": "\u5E99",
        "\u5EE0": "\u5382",
        "\u5EE1": "\u5E91",
        "\u5EE2": "\u5E9F",
        "\u5EE3": "\u5E7F",
        "\u5EE9": "\u5EEA",
        "\u5EEC": "\u5E90",
        "\u5EF1": "\u75C8",
        "\u5EF3": "\u5385",
        "\u5F12": "\u5F11",
        "\u5F14": "\u540A",
        "\u5F33": "\u5F2A",
        "\u5F35": "\u5F20",
        "\u5F37": "\u5F3A",
        "\u5F46": "\u522B",
        "\u5F48": "\u5F39",
        "\u5F4C": "\u5F25",
        "\u5F4E": "\u5F2F",
        "\u5F59": "\u6C47",
        "\u5F5A": "\u6C47",
        "\u5F65": "\u5F66",
        "\u5F6B": "\u96D5",
        "\u5F7F": "\u4F5B",
        "\u5F8C": "\u540E",
        "\u5F91": "\u5F84",
        "\u5F9E": "\u4ECE",
        "\u5FA0": "\u5F95",
        "\u5FA9": "\u590D",
        "\u5FAC": "\u65C1",
        "\u5FB5": "\u5F81",
        "\u5FB9": "\u5F7B",
        "\u6046": "\u6052",
        "\u6065": "\u803B",
        "\u6085": "\u60A6",
        "\u60B5": "\u6005",
        "\u60B6": "\u95F7",
        "\u60BD": "\u51C4",
        "\u60C7": "\u6566",
        "\u60E1": "\u6076",
        "\u60F1": "\u607C",
        "\u60F2": "\u607D",
        "\u60F7": "\u8822",
        "\u60FB": "\u607B",
        "\u611B": "\u7231",
        "\u611C": "\u60EC",
        "\u6128": "\u60AB",
        "\u6134": "\u6006",
        "\u6137": "\u607A",
        "\u613E": "\u5FFE",
        "\u6144": "\u6817",
        "\u6147": "\u6BB7",
        "\u614B": "\u6001",
        "\u614D": "\u6120",
        "\u6158": "\u60E8",
        "\u615A": "\u60ED",
        "\u615F": "\u6078",
        "\u6163": "\u60EF",
        "\u616A": "\u6004",
        "\u616B": "\u6002",
        "\u616E": "\u8651",
        "\u6173": "\u60AD",
        "\u6176": "\u5E86",
        "\u617C": "\u621A",
        "\u617E": "\u6B32",
        "\u6182": "\u5FE7",
        "\u618A": "\u60EB",
        "\u6190": "\u601C",
        "\u6191": "\u51ED",
        "\u6192": "\u6126",
        "\u619A": "\u60EE",
        "\u61A4": "\u6124",
        "\u61AB": "\u60AF",
        "\u61AE": "\u6003",
        "\u61B2": "\u5BAA",
        "\u61B6": "\u5FC6",
        "\u61C3": "\u52E4",
        "\u61C7": "\u6073",
        "\u61C9": "\u5E94",
        "\u61CC": "\u603F",
        "\u61CD": "\u61D4",
        "\u61DE": "\u8499",
        "\u61DF": "\u603C",
        "\u61E3": "\u61D1",
        "\u61E8": "\u6079",
        "\u61F2": "\u60E9",
        "\u61F6": "\u61D2",
        "\u61F7": "\u6000",
        "\u61F8": "\u60AC",
        "\u61FA": "\u5FCF",
        "\u61FC": "\u60E7",
        "\u61FE": "\u6151",
        "\u6200": "\u604B",
        "\u6207": "\u6206",
        "\u6209": "\u94BA",
        "\u6214": "\u620B",
        "\u6227": "\u6217",
        "\u6229": "\u622C",
        "\u6230": "\u6218",
        "\u6232": "\u620F",
        "\u6236": "\u6237",
        "\u6250": "\u4EC2",
        "\u625E": "\u634D",
        "\u6271": "\u63D2",
        "\u627A": "\u62B5",
        "\u6283": "\u62DA",
        "\u6294": "\u62B1",
        "\u62B4": "\u66F3",
        "\u62CB": "\u629B",
        "\u62D1": "\u94B3",
        "\u630C": "\u683C",
        "\u6336": "\u5C40",
        "\u633E": "\u631F",
        "\u6368": "\u820D",
        "\u636B": "\u626A",
        "\u6372": "\u5377",
        "\u6383": "\u626B",
        "\u6384": "\u62A1",
        "\u6386": "\u39CF",
        "\u6397": "\u631C",
        "\u6399": "\u6323",
        "\u639B": "\u6302",
        "\u63A1": "\u91C7",
        "\u63C0": "\u62E3",
        "\u63DA": "\u626C",
        "\u63DB": "\u6362",
        "\u63EE": "\u6325",
        "\u63F9": "\u80CC",
        "\u6406": "\u6784",
        "\u640D": "\u635F",
        "\u6416": "\u6447",
        "\u6417": "\u6363",
        "\u641F": "\u64C0",
        "\u6425": "\u6376",
        "\u6428": "\u6253",
        "\u642F": "\u638F",
        "\u6436": "\u62A2",
        "\u643E": "\u69A8",
        "\u6440": "\u6342",
        "\u6443": "\u625B",
        "\u6451": "\u63B4",
        "\u645C": "\u63BC",
        "\u645F": "\u6402",
        "\u646F": "\u631A",
        "\u6473": "\u62A0",
        "\u6476": "\u629F",
        "\u647B": "\u63BA",
        "\u6488": "\u635E",
        "\u648F": "\u6326",
        "\u6490": "\u6491",
        "\u6493": "\u6320",
        "\u649A": "\u62C8",
        "\u649F": "\u6322",
        "\u64A2": "\u63B8",
        "\u64A3": "\u63B8",
        "\u64A5": "\u62E8",
        "\u64A6": "\u626F",
        "\u64AB": "\u629A",
        "\u64B2": "\u6251",
        "\u64B3": "\u63FF",
        "\u64BB": "\u631E",
        "\u64BE": "\u631D",
        "\u64BF": "\u6361",
        "\u64C1": "\u62E5",
        "\u64C4": "\u63B3",
        "\u64C7": "\u62E9",
        "\u64CA": "\u51FB",
        "\u64CB": "\u6321",
        "\u64D3": "\u39DF",
        "\u64D4": "\u62C5",
        "\u64DA": "\u636E",
        "\u64E0": "\u6324",
        "\u64E1": "\u62AC",
        "\u64E3": "\u6363",
        "\u64EC": "\u62DF",
        "\u64EF": "\u6448",
        "\u64F0": "\u62E7",
        "\u64F1": "\u6401",
        "\u64F2": "\u63B7",
        "\u64F4": "\u6269",
        "\u64F7": "\u64B7",
        "\u64FA": "\u6446",
        "\u64FB": "\u64DE",
        "\u64FC": "\u64B8",
        "\u64FE": "\u6270",
        "\u6504": "\u6445",
        "\u6506": "\u64B5",
        "\u650F": "\u62E2",
        "\u6514": "\u62E6",
        "\u6516": "\u6484",
        "\u6519": "\u6400",
        "\u651B": "\u64BA",
        "\u651C": "\u643A",
        "\u651D": "\u6444",
        "\u6522": "\u6512",
        "\u6523": "\u631B",
        "\u6524": "\u644A",
        "\u652A": "\u6405",
        "\u652C": "\u63FD",
        "\u6537": "\u8003",
        "\u6557": "\u8D25",
        "\u6558": "\u53D9",
        "\u6575": "\u654C",
        "\u6578": "\u6570",
        "\u6582": "\u655B",
        "\u6583": "\u6BD9",
        "\u6595": "\u6593",
        "\u65AC": "\u65A9",
        "\u65B7": "\u65AD",
        "\u65BC": "\u4E8E",
        "\u65C2": "\u65D7",
        "\u65DB": "\u5E61",
        "\u6607": "\u5347",
        "\u6642": "\u65F6",
        "\u6649": "\u664B",
        "\u665D": "\u663C",
        "\u665E": "\u66E6",
        "\u6662": "\u6670",
        "\u6673": "\u6670",
        "\u667B": "\u6697",
        "\u6688": "\u6655",
        "\u6689": "\u6656",
        "\u6698": "\u9633",
        "\u66A2": "\u7545",
        "\u66AB": "\u6682",
        "\u66B1": "\u6635",
        "\u66B8": "\u4E86",
        "\u66C4": "\u6654",
        "\u66C6": "\u5386",
        "\u66C7": "\u6619",
        "\u66C9": "\u6653",
        "\u66CF": "\u5411",
        "\u66D6": "\u66A7",
        "\u66E0": "\u65F7",
        "\u66E8": "\u663D",
        "\u66EC": "\u6652",
        "\u66F8": "\u4E66",
        "\u6703": "\u4F1A",
        "\u6722": "\u671B",
        "\u6727": "\u80E7",
        "\u672E": "\u672F",
        "\u6747": "\u572C",
        "\u6771": "\u4E1C",
        "\u67B4": "\u62D0",
        "\u67F5": "\u6805",
        "\u67FA": "\u62D0",
        "\u6812": "\u65EC",
        "\u686E": "\u676F",
        "\u687F": "\u6746",
        "\u6894": "\u6800",
        "\u6898": "\u67A7",
        "\u689D": "\u6761",
        "\u689F": "\u67AD",
        "\u68B1": "\u6346",
        "\u68C4": "\u5F03",
        "\u68D6": "\u67A8",
        "\u68D7": "\u67A3",
        "\u68DF": "\u680B",
        "\u68E1": "\u3B4E",
        "\u68E7": "\u6808",
        "\u68F2": "\u6816",
        "\u690F": "\u6860",
        "\u6944": "\u533E",
        "\u694A": "\u6768",
        "\u6953": "\u67AB",
        "\u6959": "\u8302",
        "\u695C": "\u80E1",
        "\u6968": "\u6862",
        "\u696D": "\u4E1A",
        "\u6975": "\u6781",
        "\u69A6": "\u5E72",
        "\u69AA": "\u6769",
        "\u69AE": "\u8363",
        "\u69BF": "\u6864",
        "\u69C3": "\u76D8",
        "\u69CB": "\u6784",
        "\u69CD": "\u67AA",
        "\u69D3": "\u6760",
        "\u69E7": "\u6920",
        "\u69E8": "\u6901",
        "\u69F3": "\u6868",
        "\u6A01": "\u6869",
        "\u6A02": "\u4E50",
        "\u6A05": "\u679E",
        "\u6A11": "\u6881",
        "\u6A13": "\u697C",
        "\u6A19": "\u6807",
        "\u6A1E": "\u67A2",
        "\u6A23": "\u6837",
        "\u6A38": "\u6734",
        "\u6A39": "\u6811",
        "\u6A3A": "\u6866",
        "\u6A48": "\u6861",
        "\u6A4B": "\u6865",
        "\u6A5F": "\u673A",
        "\u6A62": "\u692D",
        "\u6A66": "\u5E62",
        "\u6A6B": "\u6A2A",
        "\u6A81": "\u6AA9",
        "\u6A89": "\u67FD",
        "\u6A94": "\u6863",
        "\u6A9C": "\u6867",
        "\u6A9F": "\u69DA",
        "\u6AA2": "\u68C0",
        "\u6AA3": "\u6A2F",
        "\u6AAF": "\u53F0",
        "\u6AB3": "\u69DF",
        "\u6AB8": "\u67E0",
        "\u6ABB": "\u69DB",
        "\u6AC2": "\u68F9",
        "\u6AC3": "\u67DC",
        "\u6AD0": "\u7D2F",
        "\u6AD3": "\u6A79",
        "\u6ADA": "\u6988",
        "\u6ADB": "\u6809",
        "\u6ADD": "\u691F",
        "\u6ADE": "\u6A7C",
        "\u6ADF": "\u680E",
        "\u6AE5": "\u6A71",
        "\u6AE7": "\u69E0",
        "\u6AE8": "\u680C",
        "\u6AEA": "\u67A5",
        "\u6AEB": "\u6A65",
        "\u6AEC": "\u6987",
        "\u6AF3": "\u680A",
        "\u6AF8": "\u6989",
        "\u6AFA": "\u68C2",
        "\u6AFB": "\u6A31",
        "\u6B04": "\u680F",
        "\u6B0A": "\u6743",
        "\u6B0F": "\u6924",
        "\u6B12": "\u683E",
        "\u6B16": "\u6984",
        "\u6B1E": "\u68C2",
        "\u6B38": "\u5509",
        "\u6B3D": "\u94A6",
        "\u6B4E": "\u53F9",
        "\u6B50": "\u6B27",
        "\u6B5F": "\u6B24",
        "\u6B61": "\u6B22",
        "\u6B72": "\u5C81",
        "\u6B77": "\u5386",
        "\u6B78": "\u5F52",
        "\u6B7F": "\u6B81",
        "\u6B80": "\u592D",
        "\u6B98": "\u6B8B",
        "\u6B9E": "\u6B92",
        "\u6BA4": "\u6B87",
        "\u6BAB": "\u6B9A",
        "\u6BAD": "\u50F5",
        "\u6BAE": "\u6B93",
        "\u6BAF": "\u6BA1",
        "\u6BB2": "\u6B7C",
        "\u6BBA": "\u6740",
        "\u6BBC": "\u58F3",
        "\u6BBD": "\u80B4",
        "\u6BC0": "\u6BC1",
        "\u6BC6": "\u6BB4",
        "\u6BCC": "\u6BCB",
        "\u6BD8": "\u6BD7",
        "\u6BEC": "\u7403",
        "\u6BFF": "\u6BF5",
        "\u6C08": "\u6BE1",
        "\u6C0C": "\u6C07",
        "\u6C23": "\u6C14",
        "\u6C2B": "\u6C22",
        "\u6C2C": "\u6C29",
        "\u6C33": "\u6C32",
        "\u6C3E": "\u6CDB",
        "\u6C4D": "\u4E38",
        "\u6C4E": "\u6CDB",
        "\u6C59": "\u6C61",
        "\u6C7A": "\u51B3",
        "\u6C8D": "\u51B1",
        "\u6C92": "\u6CA1",
        "\u6C96": "\u51B2",
        "\u6CC1": "\u51B5",
        "\u6CDD": "\u6EAF",
        "\u6D1F": "\u6D95",
        "\u6D29": "\u6CC4",
        "\u6D36": "\u6C79",
        "\u6D6C": "\u91CC",
        "\u6D79": "\u6D43",
        "\u6D87": "\u6CFE",
        "\u6DBC": "\u51C9",
        "\u6DD2": "\u51C4",
        "\u6DDA": "\u6CEA",
        "\u6DE5": "\u6E0C",
        "\u6DE8": "\u51C0",
        "\u6DEA": "\u6CA6",
        "\u6DF5": "\u6E0A",
        "\u6DF6": "\u6D9E",
        "\u6DFA": "\u6D45",
        "\u6E19": "\u6DA3",
        "\u6E1B": "\u51CF",
        "\u6E22": "\u6CA8",
        "\u6E26": "\u6DA1",
        "\u6E2C": "\u6D4B",
        "\u6E3E": "\u6D51",
        "\u6E4A": "\u51D1",
        "\u6E5E": "\u6D48",
        "\u6E63": "\u95F5",
        "\u6E67": "\u6D8C",
        "\u6E6F": "\u6C64",
        "\u6E88": "\u6CA9",
        "\u6E96": "\u51C6",
        "\u6E9D": "\u6C9F",
        "\u6EAB": "\u6E29",
        "\u6EAE": "\u6D49",
        "\u6EB3": "\u6DA2",
        "\u6EBC": "\u6E7F",
        "\u6EC4": "\u6CA7",
        "\u6EC5": "\u706D",
        "\u6ECC": "\u6DA4",
        "\u6ECE": "\u8365",
        "\u6EEC": "\u6CAA",
        "\u6EEF": "\u6EDE",
        "\u6EF2": "\u6E17",
        "\u6EF7": "\u5364",
        "\u6EF8": "\u6D52",
        "\u6EFB": "\u6D50",
        "\u6EFE": "\u6EDA",
        "\u6EFF": "\u6EE1",
        "\u6F01": "\u6E14",
        "\u6F0A": "\u6E87",
        "\u6F1A": "\u6CA4",
        "\u6F22": "\u6C49",
        "\u6F23": "\u6D9F",
        "\u6F2C": "\u6E0D",
        "\u6F32": "\u6DA8",
        "\u6F35": "\u6E86",
        "\u6F38": "\u6E10",
        "\u6F3F": "\u6D46",
        "\u6F41": "\u988D",
        "\u6F51": "\u6CFC",
        "\u6F54": "\u6D01",
        "\u6F5B": "\u6F5C",
        "\u6F5F": "\u8204",
        "\u6F64": "\u6DA6",
        "\u6F6F": "\u6D54",
        "\u6F70": "\u6E83",
        "\u6F77": "\u6ED7",
        "\u6F7F": "\u6DA0",
        "\u6F80": "\u6DA9",
        "\u6F82": "\u6F84",
        "\u6F86": "\u6D47",
        "\u6F87": "\u6D9D",
        "\u6F94": "\u6D69",
        "\u6F97": "\u6DA7",
        "\u6FA0": "\u6E11",
        "\u6FA4": "\u6CFD",
        "\u6FA6": "\u6EEA",
        "\u6FA9": "\u6CF6",
        "\u6FAE": "\u6D4D",
        "\u6FB1": "\u6DC0",
        "\u6FBE": "\u3CE0",
        "\u6FC1": "\u6D4A",
        "\u6FC3": "\u6D53",
        "\u6FD5": "\u6E7F",
        "\u6FD8": "\u6CDE",
        "\u6FDB": "\u8499",
        "\u6FDC": "\u6D55",
        "\u6FDF": "\u6D4E",
        "\u6FE4": "\u6D9B",
        "\u6FEB": "\u6EE5",
        "\u6FEC": "\u6D5A",
        "\u6FF0": "\u6F4D",
        "\u6FF1": "\u6EE8",
        "\u6FFA": "\u6E85",
        "\u6FFC": "\u6CFA",
        "\u6FFE": "\u6EE4",
        "\u7001": "\u6F3E",
        "\u7005": "\u6EE2",
        "\u7006": "\u6E0E",
        "\u7009": "\u6CFB",
        "\u700B": "\u6C88",
        "\u700F": "\u6D4F",
        "\u7015": "\u6FD2",
        "\u7018": "\u6CF8",
        "\u701D": "\u6CA5",
        "\u701F": "\u6F47",
        "\u7020": "\u6F46",
        "\u7026": "\u6F74",
        "\u7027": "\u6CF7",
        "\u7028": "\u6FD1",
        "\u7030": "\u5F25",
        "\u7032": "\u6F4B",
        "\u703E": "\u6F9C",
        "\u7043": "\u6CA3",
        "\u7044": "\u6EE0",
        "\u7051": "\u6D12",
        "\u7055": "\u6F13",
        "\u7058": "\u6EE9",
        "\u705D": "\u704F",
        "\u7063": "\u6E7E",
        "\u7064": "\u6EE6",
        "\u7069": "\u6EDF",
        "\u707D": "\u707E",
        "\u70A4": "\u7167",
        "\u70B0": "\u70AE",
        "\u70BA": "\u4E3A",
        "\u70CF": "\u4E4C",
        "\u70F4": "\u70C3",
        "\u7121": "\u65E0",
        "\u7149": "\u70BC",
        "\u7152": "\u709C",
        "\u7156": "\u6696",
        "\u7159": "\u70DF",
        "\u7162": "\u8315",
        "\u7165": "\u7115",
        "\u7169": "\u70E6",
        "\u716C": "\u7080",
        "\u7192": "\u8367",
        "\u7197": "\u709D",
        "\u71B1": "\u70ED",
        "\u71BE": "\u70BD",
        "\u71C1": "\u70E8",
        "\u71C4": "\u7130",
        "\u71C8": "\u706F",
        "\u71C9": "\u7096",
        "\u71D0": "\u78F7",
        "\u71D2": "\u70E7",
        "\u71D9": "\u70EB",
        "\u71DC": "\u7116",
        "\u71DF": "\u8425",
        "\u71E6": "\u707F",
        "\u71EC": "\u6BC1",
        "\u71ED": "\u70DB",
        "\u71F4": "\u70E9",
        "\u71FB": "\u718F",
        "\u71FC": "\u70EC",
        "\u71FE": "\u7118",
        "\u71FF": "\u8000",
        "\u720D": "\u70C1",
        "\u7210": "\u7089",
        "\u721B": "\u70C2",
        "\u722D": "\u4E89",
        "\u7232": "\u4E3A",
        "\u723A": "\u7237",
        "\u723E": "\u5C14",
        "\u7246": "\u5899",
        "\u7258": "\u724D",
        "\u7260": "\u5B83",
        "\u7274": "\u62B5",
        "\u727D": "\u7275",
        "\u7296": "\u8366",
        "\u729B": "\u7266",
        "\u72A2": "\u728A",
        "\u72A7": "\u727A",
        "\u72C0": "\u72B6",
        "\u72DA": "\u65E6",
        "\u72F9": "\u72ED",
        "\u72FD": "\u72C8",
        "\u7319": "\u72F0",
        "\u7336": "\u72B9",
        "\u733B": "\u72F2",
        "\u7341": "\u72B8",
        "\u7343": "\u5446",
        "\u7344": "\u72F1",
        "\u7345": "\u72EE",
        "\u734E": "\u5956",
        "\u7368": "\u72EC",
        "\u736A": "\u72EF",
        "\u736B": "\u7303",
        "\u736E": "\u72DD",
        "\u7370": "\u72DE",
        "\u7372": "\u83B7",
        "\u7375": "\u730E",
        "\u7377": "\u72B7",
        "\u7378": "\u517D",
        "\u737A": "\u736D",
        "\u737B": "\u732E",
        "\u737C": "\u7315",
        "\u7380": "\u7321",
        "\u7385": "\u5999",
        "\u7386": "\u5179",
        "\u73A8": "\u73CF",
        "\u73EA": "\u572D",
        "\u73EE": "\u4F69",
        "\u73FE": "\u73B0",
        "\u7431": "\u96D5",
        "\u743A": "\u73D0",
        "\u743F": "\u73F2",
        "\u744B": "\u73AE",
        "\u7463": "\u7410",
        "\u7464": "\u7476",
        "\u7469": "\u83B9",
        "\u746A": "\u739B",
        "\u746F": "\u7405",
        "\u7472": "\u73B1",
        "\u7489": "\u740F",
        "\u74A1": "\u740E",
        "\u74A3": "\u7391",
        "\u74A6": "\u7477",
        "\u74B0": "\u73AF",
        "\u74BD": "\u73BA",
        "\u74BF": "\u7487",
        "\u74CA": "\u743C",
        "\u74CF": "\u73D1",
        "\u74D4": "\u748E",
        "\u74D6": "\u9576",
        "\u74DA": "\u74D2",
        "\u750C": "\u74EF",
        "\u7515": "\u74EE",
        "\u7522": "\u4EA7",
        "\u7523": "\u4EA7",
        "\u7526": "\u82CF",
        "\u752A": "\u89D2",
        "\u755D": "\u4EA9",
        "\u7562": "\u6BD5",
        "\u756B": "\u753B",
        "\u756C": "\u7572",
        "\u7570": "\u5F02",
        "\u7576": "\u5F53",
        "\u7587": "\u7574",
        "\u758A": "\u53E0",
        "\u75BF": "\u75F1",
        "\u75D9": "\u75C9",
        "\u75E0": "\u9178",
        "\u75F2": "\u9EBB",
        "\u75F3": "\u9EBB",
        "\u75FA": "\u75F9",
        "\u75FE": "\u75B4",
        "\u7602": "\u75D6",
        "\u7609": "\u6108",
        "\u760B": "\u75AF",
        "\u760D": "\u75A1",
        "\u7613": "\u75EA",
        "\u761E": "\u7617",
        "\u7621": "\u75AE",
        "\u7627": "\u759F",
        "\u763A": "\u7618",
        "\u763B": "\u7618",
        "\u7642": "\u7597",
        "\u7646": "\u75E8",
        "\u7647": "\u75EB",
        "\u7649": "\u7605",
        "\u7652": "\u6108",
        "\u7658": "\u75A0",
        "\u765F": "\u762A",
        "\u7661": "\u75F4",
        "\u7662": "\u75D2",
        "\u7664": "\u7596",
        "\u7665": "\u75C7",
        "\u7667": "\u75AC",
        "\u7669": "\u765E",
        "\u766C": "\u7663",
        "\u766D": "\u763F",
        "\u766E": "\u763E",
        "\u7670": "\u75C8",
        "\u7671": "\u762B",
        "\u7672": "\u766B",
        "\u767C": "\u53D1",
        "\u7681": "\u7682",
        "\u769A": "\u7691",
        "\u76B0": "\u75B1",
        "\u76B8": "\u76B2",
        "\u76BA": "\u76B1",
        "\u76C3": "\u676F",
        "\u76DC": "\u76D7",
        "\u76DE": "\u76CF",
        "\u76E1": "\u5C3D",
        "\u76E3": "\u76D1",
        "\u76E4": "\u76D8",
        "\u76E7": "\u5362",
        "\u76EA": "\u8361",
        "\u7725": "\u7726",
        "\u773E": "\u4F17",
        "\u774F": "\u56F0",
        "\u775C": "\u7741",
        "\u775E": "\u7750",
        "\u776A": "\u777E",
        "\u7787": "\u772F",
        "\u7798": "\u770D",
        "\u779C": "\u4056",
        "\u779E": "\u7792",
        "\u77BC": "\u7751",
        "\u77C7": "\u8499",
        "\u77D3": "\u772C",
        "\u77DA": "\u77A9",
        "\u77EF": "\u77EB",
        "\u7832": "\u70AE",
        "\u7843": "\u6731",
        "\u7864": "\u7856",
        "\u7868": "\u7817",
        "\u786F": "\u781A",
        "\u7895": "\u5D0E",
        "\u78A9": "\u7855",
        "\u78AA": "\u7827",
        "\u78AD": "\u7800",
        "\u78B8": "\u781C",
        "\u78BA": "\u786E",
        "\u78BC": "\u7801",
        "\u78D1": "\u7859",
        "\u78DA": "\u7816",
        "\u78E3": "\u789C",
        "\u78E7": "\u789B",
        "\u78EF": "\u77F6",
        "\u78FD": "\u7857",
        "\u7904": "\u785A",
        "\u790E": "\u7840",
        "\u7919": "\u788D",
        "\u7926": "\u77FF",
        "\u792A": "\u783A",
        "\u792B": "\u783E",
        "\u792C": "\u77FE",
        "\u7931": "\u783B",
        "\u7942": "\u4ED6",
        "\u7945": "\u7946",
        "\u7947": "\u53EA",
        "\u7950": "\u4F51",
        "\u797C": "\u88F8",
        "\u797F": "\u7984",
        "\u798D": "\u7978",
        "\u798E": "\u796F",
        "\u7995": "\u794E",
        "\u79A6": "\u5FA1",
        "\u79AA": "\u7985",
        "\u79AE": "\u793C",
        "\u79B1": "\u7977",
        "\u79BF": "\u79C3",
        "\u79C8": "\u7C7C",
        "\u79CF": "\u8017",
        "\u7A05": "\u7A0E",
        "\u7A08": "\u79C6",
        "\u7A1C": "\u68F1",
        "\u7A1F": "\u7980",
        "\u7A28": "\u6241",
        "\u7A2E": "\u79CD",
        "\u7A31": "\u79F0",
        "\u7A40": "\u8C37",
        "\u7A47": "\u415F",
        "\u7A4C": "\u7A23",
        "\u7A4D": "\u79EF",
        "\u7A4E": "\u9896",
        "\u7A61": "\u7A51",
        "\u7A62": "\u79FD",
        "\u7A68": "\u9893",
        "\u7A69": "\u7A33",
        "\u7A6B": "\u83B7",
        "\u7AA9": "\u7A9D",
        "\u7AAA": "\u6D3C",
        "\u7AAE": "\u7A77",
        "\u7AAF": "\u7A91",
        "\u7AB5": "\u7A8E",
        "\u7AB6": "\u7AAD",
        "\u7ABA": "\u7AA5",
        "\u7AC4": "\u7A9C",
        "\u7AC5": "\u7A8D",
        "\u7AC7": "\u7AA6",
        "\u7ACA": "\u7A83",
        "\u7AF6": "\u7ADE",
        "\u7B3B": "\u7B47",
        "\u7B46": "\u7B14",
        "\u7B4D": "\u7B0B",
        "\u7B67": "\u7B15",
        "\u7B74": "\u7B56",
        "\u7B84": "\u7B85",
        "\u7B87": "\u4E2A",
        "\u7B8B": "\u7B3A",
        "\u7B8F": "\u7B5D",
        "\u7BA0": "\u68F0",
        "\u7BC0": "\u8282",
        "\u7BC4": "\u8303",
        "\u7BC9": "\u7B51",
        "\u7BCB": "\u7BA7",
        "\u7BDB": "\u7BAC",
        "\u7BE0": "\u7B71",
        "\u7BE4": "\u7B03",
        "\u7BE9": "\u7B5B",
        "\u7BF2": "\u5F57",
        "\u7BF3": "\u7B5A",
        "\u7C00": "\u7BA6",
        "\u7C0D": "\u7BD3",
        "\u7C11": "\u84D1",
        "\u7C1E": "\u7BAA",
        "\u7C21": "\u7B80",
        "\u7C23": "\u7BD1",
        "\u7C2B": "\u7BAB",
        "\u7C37": "\u6A90",
        "\u7C3D": "\u7B7E",
        "\u7C3E": "\u5E18",
        "\u7C43": "\u7BEE",
        "\u7C4C": "\u7B79",
        "\u7C50": "\u85E4",
        "\u7C59": "\u7B93",
        "\u7C5C": "\u7BA8",
        "\u7C5F": "\u7C41",
        "\u7C60": "\u7B3C",
        "\u7C64": "\u7B7E",
        "\u7C65": "\u9FA0",
        "\u7C69": "\u7B3E",
        "\u7C6A": "\u7C16",
        "\u7C6C": "\u7BF1",
        "\u7C6E": "\u7BA9",
        "\u7C72": "\u5401",
        "\u7CA7": "\u5986",
        "\u7CB5": "\u7CA4",
        "\u7CDD": "\u7CC1",
        "\u7CDE": "\u7CAA",
        "\u7CE7": "\u7CAE",
        "\u7CF0": "\u56E2",
        "\u7CF2": "\u7C9D",
        "\u7CF4": "\u7C74",
        "\u7CF6": "\u7C9C",
        "\u7CFE": "\u7EA0",
        "\u7D00": "\u7EAA",
        "\u7D02": "\u7EA3",
        "\u7D04": "\u7EA6",
        "\u7D05": "\u7EA2",
        "\u7D06": "\u7EA1",
        "\u7D07": "\u7EA5",
        "\u7D08": "\u7EA8",
        "\u7D09": "\u7EAB",
        "\u7D0B": "\u7EB9",
        "\u7D0D": "\u7EB3",
        "\u7D10": "\u7EBD",
        "\u7D13": "\u7EBE",
        "\u7D14": "\u7EAF",
        "\u7D15": "\u7EB0",
        "\u7D16": "\u7EBC",
        "\u7D17": "\u7EB1",
        "\u7D18": "\u7EAE",
        "\u7D19": "\u7EB8",
        "\u7D1A": "\u7EA7",
        "\u7D1B": "\u7EB7",
        "\u7D1C": "\u7EAD",
        "\u7D1D": "\u7EB4",
        "\u7D21": "\u7EBA",
        "\u7D2C": "\u4337",
        "\u7D2E": "\u624E",
        "\u7D30": "\u7EC6",
        "\u7D31": "\u7EC2",
        "\u7D32": "\u7EC1",
        "\u7D33": "\u7EC5",
        "\u7D39": "\u7ECD",
        "\u7D3A": "\u7EC0",
        "\u7D3C": "\u7ECB",
        "\u7D3F": "\u7ED0",
        "\u7D40": "\u7ECC",
        "\u7D42": "\u7EC8",
        "\u7D43": "\u5F26",
        "\u7D44": "\u7EC4",
        "\u7D46": "\u7ECA",
        "\u7D4E": "\u7ED7",
        "\u7D50": "\u7ED3",
        "\u7D55": "\u7EDD",
        "\u7D5B": "\u7EE6",
        "\u7D5D": "\u7ED4",
        "\u7D5E": "\u7EDE",
        "\u7D61": "\u7EDC",
        "\u7D62": "\u7EDA",
        "\u7D66": "\u7ED9",
        "\u7D68": "\u7ED2",
        "\u7D70": "\u7ED6",
        "\u7D71": "\u7EDF",
        "\u7D72": "\u4E1D",
        "\u7D73": "\u7EDB",
        "\u7D79": "\u7EE2",
        "\u7D81": "\u7ED1",
        "\u7D83": "\u7EE1",
        "\u7D86": "\u7EE0",
        "\u7D88": "\u7EE8",
        "\u7D8F": "\u7EE5",
        "\u7D91": "\u6346",
        "\u7D93": "\u7ECF",
        "\u7D9C": "\u7EFC",
        "\u7D9E": "\u7F0D",
        "\u7DA0": "\u7EFF",
        "\u7DA2": "\u7EF8",
        "\u7DA3": "\u7EFB",
        "\u7DAB": "\u7EBF",
        "\u7DAC": "\u7EF6",
        "\u7DAD": "\u7EF4",
        "\u7DB0": "\u7EFE",
        "\u7DB1": "\u7EB2",
        "\u7DB2": "\u7F51",
        "\u7DB4": "\u7F00",
        "\u7DB5": "\u5F69",
        "\u7DB8": "\u7EB6",
        "\u7DB9": "\u7EFA",
        "\u7DBA": "\u7EEE",
        "\u7DBB": "\u7EFD",
        "\u7DBD": "\u7EF0",
        "\u7DBE": "\u7EEB",
        "\u7DBF": "\u7EF5",
        "\u7DC4": "\u7EF2",
        "\u7DC7": "\u7F01",
        "\u7DCA": "\u7D27",
        "\u7DCB": "\u7EEF",
        "\u7DD2": "\u7EEA",
        "\u7DD4": "\u7EF1",
        "\u7DD7": "\u7F03",
        "\u7DD8": "\u7F04",
        "\u7DD9": "\u7F02",
        "\u7DDA": "\u7EBF",
        "\u7DDD": "\u7F09",
        "\u7DDE": "\u7F0E",
        "\u7DE0": "\u7F14",
        "\u7DE1": "\u7F17",
        "\u7DE3": "\u7F18",
        "\u7DE6": "\u7F0C",
        "\u7DE8": "\u7F16",
        "\u7DE9": "\u7F13",
        "\u7DEC": "\u7F05",
        "\u7DEF": "\u7EAC",
        "\u7DF1": "\u7F11",
        "\u7DF2": "\u7F08",
        "\u7DF4": "\u7EC3",
        "\u7DF6": "\u7F0F",
        "\u7DF9": "\u7F07",
        "\u7DFB": "\u81F4",
        "\u7E08": "\u8426",
        "\u7E09": "\u7F19",
        "\u7E0A": "\u7F22",
        "\u7E0B": "\u7F12",
        "\u7E10": "\u7EC9",
        "\u7E11": "\u7F23",
        "\u7E15": "\u7F0A",
        "\u7E17": "\u7F1E",
        "\u7E1A": "\u7EE6",
        "\u7E1B": "\u7F1A",
        "\u7E1D": "\u7F1C",
        "\u7E1E": "\u7F1F",
        "\u7E1F": "\u7F1B",
        "\u7E23": "\u53BF",
        "\u7E2B": "\u7F1D",
        "\u7E2D": "\u7F21",
        "\u7E2E": "\u7F29",
        "\u7E2F": "\u6F14",
        "\u7E31": "\u7EB5",
        "\u7E32": "\u7F27",
        "\u7E33": "\u7F1A",
        "\u7E34": "\u7EA4",
        "\u7E35": "\u7F26",
        "\u7E36": "\u7D77",
        "\u7E37": "\u7F15",
        "\u7E39": "\u7F25",
        "\u7E3D": "\u603B",
        "\u7E3E": "\u7EE9",
        "\u7E43": "\u7EF7",
        "\u7E45": "\u7F2B",
        "\u7E46": "\u7F2A",
        "\u7E48": "\u8941",
        "\u7E52": "\u7F2F",
        "\u7E54": "\u7EC7",
        "\u7E55": "\u7F2E",
        "\u7E59": "\u7FFB",
        "\u7E5A": "\u7F2D",
        "\u7E5E": "\u7ED5",
        "\u7E61": "\u7EE3",
        "\u7E62": "\u7F0B",
        "\u7E69": "\u7EF3",
        "\u7E6A": "\u7ED8",
        "\u7E6B": "\u7CFB",
        "\u7E6D": "\u8327",
        "\u7E6F": "\u7F33",
        "\u7E70": "\u7F32",
        "\u7E73": "\u7F34",
        "\u7E79": "\u7ECE",
        "\u7E7C": "\u7EE7",
        "\u7E7D": "\u7F24",
        "\u7E7E": "\u7F31",
        "\u7E88": "\u7F2C",
        "\u7E8A": "\u7EA9",
        "\u7E8C": "\u7EED",
        "\u7E8D": "\u7D2F",
        "\u7E8F": "\u7F20",
        "\u7E93": "\u7F28",
        "\u7E94": "\u624D",
        "\u7E96": "\u7EA4",
        "\u7E98": "\u7F35",
        "\u7E9C": "\u7F06",
        "\u7F3D": "\u94B5",
        "\u7F3E": "\u74F6",
        "\u7F48": "\u575B",
        "\u7F4C": "\u7F42",
        "\u7F66": "\u7F58",
        "\u7F70": "\u7F5A",
        "\u7F75": "\u9A82",
        "\u7F77": "\u7F62",
        "\u7F85": "\u7F57",
        "\u7F86": "\u7F74",
        "\u7F88": "\u7F81",
        "\u7F8B": "\u8288",
        "\u7FA5": "\u7F9F",
        "\u7FA8": "\u7FA1",
        "\u7FA9": "\u4E49",
        "\u7FB6": "\u81BB",
        "\u7FD2": "\u4E60",
        "\u7FEC": "\u7FDA",
        "\u7FF9": "\u7FD8",
        "\u8011": "\u7AEF",
        "\u8021": "\u52A9",
        "\u8024": "\u85C9",
        "\u802C": "\u8027",
        "\u802E": "\u8022",
        "\u8056": "\u5723",
        "\u805E": "\u95FB",
        "\u806F": "\u8054",
        "\u8070": "\u806A",
        "\u8072": "\u58F0",
        "\u8073": "\u8038",
        "\u8075": "\u8069",
        "\u8076": "\u8042",
        "\u8077": "\u804C",
        "\u8079": "\u804D",
        "\u807D": "\u542C",
        "\u807E": "\u804B",
        "\u8085": "\u8083",
        "\u808F": "\u64CD",
        "\u8090": "\u80F3",
        "\u80C7": "\u80BA",
        "\u80CA": "\u6710",
        "\u8105": "\u80C1",
        "\u8108": "\u8109",
        "\u811B": "\u80EB",
        "\u8123": "\u5507",
        "\u8129": "\u4FEE",
        "\u812B": "\u8131",
        "\u8139": "\u80C0",
        "\u814E": "\u80BE",
        "\u8156": "\u80E8",
        "\u8161": "\u8136",
        "\u8166": "\u8111",
        "\u816B": "\u80BF",
        "\u8173": "\u811A",
        "\u8178": "\u80A0",
        "\u8183": "\u817D",
        "\u8186": "\u55C9",
        "\u8195": "\u8158",
        "\u819A": "\u80A4",
        "\u819E": "\u43DD",
        "\u81A0": "\u80F6",
        "\u81A9": "\u817B",
        "\u81BD": "\u80C6",
        "\u81BE": "\u810D",
        "\u81BF": "\u8113",
        "\u81C9": "\u8138",
        "\u81CD": "\u8110",
        "\u81CF": "\u8191",
        "\u81D5": "\u8198",
        "\u81D8": "\u814A",
        "\u81D9": "\u80ED",
        "\u81DA": "\u80EA",
        "\u81DF": "\u810F",
        "\u81E0": "\u8114",
        "\u81E2": "\u81DC",
        "\u81E5": "\u5367",
        "\u81E8": "\u4E34",
        "\u81FA": "\u53F0",
        "\u8207": "\u4E0E",
        "\u8208": "\u5174",
        "\u8209": "\u4E3E",
        "\u820A": "\u65E7",
        "\u820B": "\u8845",
        "\u8216": "\u94FA",
        "\u8259": "\u8231",
        "\u8263": "\u6A79",
        "\u8264": "\u8223",
        "\u8266": "\u8230",
        "\u826B": "\u823B",
        "\u8271": "\u8270",
        "\u8277": "\u8273",
        "\u8278": "\u8279",
        "\u82BB": "\u520D",
        "\u82E7": "\u82CE",
        "\u82FA": "\u8393",
        "\u830D": "\u82DF",
        "\u8332": "\u5179",
        "\u8345": "\u7B54",
        "\u834A": "\u8346",
        "\u8373": "\u8C46",
        "\u838A": "\u5E84",
        "\u8396": "\u830E",
        "\u83A2": "\u835A",
        "\u83A7": "\u82CB",
        "\u83EB": "\u5807",
        "\u83EF": "\u534E",
        "\u83F4": "\u5EB5",
        "\u8407": "\u82CC",
        "\u840A": "\u83B1",
        "\u842C": "\u4E07",
        "\u8435": "\u83B4",
        "\u8449": "\u53F6",
        "\u8452": "\u836D",
        "\u8457": "\u7740",
        "\u8464": "\u836E",
        "\u8466": "\u82C7",
        "\u846F": "\u836F",
        "\u8477": "\u8364",
        "\u8490": "\u641C",
        "\u8494": "\u83B3",
        "\u849E": "\u8385",
        "\u84BC": "\u82CD",
        "\u84C0": "\u836A",
        "\u84C6": "\u5E2D",
        "\u84CB": "\u76D6",
        "\u84EE": "\u83B2",
        "\u84EF": "\u82C1",
        "\u84F4": "\u83BC",
        "\u84FD": "\u835C",
        "\u8506": "\u83F1",
        "\u8514": "\u535C",
        "\u851E": "\u848C",
        "\u8523": "\u848B",
        "\u8525": "\u8471",
        "\u8526": "\u8311",
        "\u852D": "\u836B",
        "\u8541": "\u8368",
        "\u8546": "\u8487",
        "\u854E": "\u835E",
        "\u8552": "\u836C",
        "\u8555": "\u83B8",
        "\u8558": "\u835B",
        "\u8562": "\u8489",
        "\u8569": "\u8361",
        "\u856A": "\u829C",
        "\u856D": "\u8427",
        "\u8577": "\u84E3",
        "\u8588": "\u835F",
        "\u858A": "\u84DF",
        "\u858C": "\u8297",
        "\u8591": "\u59DC",
        "\u8594": "\u8537",
        "\u8599": "\u5243",
        "\u859F": "\u83B6",
        "\u85A6": "\u8350",
        "\u85A9": "\u8428",
        "\u85BA": "\u8360",
        "\u85CD": "\u84DD",
        "\u85CE": "\u8369",
        "\u85DD": "\u827A",
        "\u85E5": "\u836F",
        "\u85EA": "\u85AE",
        "\u85ED": "\u44D6",
        "\u85F6": "\u82C8",
        "\u85F7": "\u85AF",
        "\u85F9": "\u853C",
        "\u85FA": "\u853A",
        "\u8600": "\u841A",
        "\u8604": "\u8572",
        "\u8606": "\u82A6",
        "\u8607": "\u82CF",
        "\u860A": "\u8574",
        "\u860B": "\u82F9",
        "\u8617": "\u8616",
        "\u861A": "\u85D3",
        "\u861E": "\u8539",
        "\u8622": "\u830F",
        "\u862D": "\u5170",
        "\u863A": "\u84E0",
        "\u863F": "\u841D",
        "\u8655": "\u5904",
        "\u8656": "\u547C",
        "\u865B": "\u865A",
        "\u865C": "\u864F",
        "\u865F": "\u53F7",
        "\u8667": "\u4E8F",
        "\u866F": "\u866C",
        "\u86FA": "\u86F1",
        "\u86FB": "\u8715",
        "\u8706": "\u86AC",
        "\u873A": "\u9713",
        "\u8755": "\u8680",
        "\u875F": "\u732C",
        "\u8766": "\u867E",
        "\u8768": "\u8671",
        "\u8778": "\u8717",
        "\u8784": "\u86F3",
        "\u879E": "\u8682",
        "\u87A2": "\u8424",
        "\u87BB": "\u877C",
        "\u87C4": "\u86F0",
        "\u87C8": "\u8748",
        "\u87CE": "\u87A8",
        "\u87E3": "\u866E",
        "\u87EC": "\u8749",
        "\u87EF": "\u86F2",
        "\u87F2": "\u866B",
        "\u87F6": "\u86CF",
        "\u87FA": "\u87EE",
        "\u87FB": "\u8681",
        "\u8805": "\u8747",
        "\u8806": "\u867F",
        "\u880D": "\u874E",
        "\u8810": "\u86F4",
        "\u8811": "\u877E",
        "\u8814": "\u869D",
        "\u881F": "\u8721",
        "\u8823": "\u86CE",
        "\u8828": "\u87CF",
        "\u8831": "\u86CA",
        "\u8836": "\u8695",
        "\u8837": "\u883C",
        "\u883B": "\u86EE",
        "\u8846": "\u4F17",
        "\u884A": "\u8511",
        "\u8852": "\u70AB",
        "\u8853": "\u672F",
        "\u885A": "\u80E1",
        "\u885B": "\u536B",
        "\u885D": "\u51B2",
        "\u8879": "\u53EA",
        "\u889E": "\u886E",
        "\u88AA": "\u795B",
        "\u88CA": "\u8885",
        "\u88CF": "\u91CC",
        "\u88DC": "\u8865",
        "\u88DD": "\u88C5",
        "\u88E1": "\u91CC",
        "\u88FD": "\u5236",
        "\u8907": "\u590D",
        "\u890E": "\u8896",
        "\u8932": "\u88E4",
        "\u8933": "\u88E2",
        "\u8938": "\u891B",
        "\u893B": "\u4EB5",
        "\u8949": "\u88E5",
        "\u8956": "\u8884",
        "\u895D": "\u88E3",
        "\u8960": "\u88C6",
        "\u8964": "\u8934",
        "\u896A": "\u889C",
        "\u896C": "\u6446",
        "\u896F": "\u886C",
        "\u8972": "\u88AD",
        "\u897E": "\u897F",
        "\u8988": "\u6838",
        "\u898B": "\u89C1",
        "\u898E": "\u89C3",
        "\u898F": "\u89C4",
        "\u8993": "\u89C5",
        "\u8996": "\u89C6",
        "\u8998": "\u89C7",
        "\u899C": "\u773A",
        "\u89A1": "\u89CB",
        "\u89A6": "\u89CE",
        "\u89AA": "\u4EB2",
        "\u89AC": "\u89CA",
        "\u89AF": "\u89CF",
        "\u89B2": "\u89D0",
        "\u89B7": "\u89D1",
        "\u89BA": "\u89C9",
        "\u89BD": "\u89C8",
        "\u89BF": "\u89CC",
        "\u89C0": "\u89C2",
        "\u89D4": "\u7B4B",
        "\u89DD": "\u62B5",
        "\u89F4": "\u89DE",
        "\u89F6": "\u89EF",
        "\u89F8": "\u89E6",
        "\u8A02": "\u8BA2",
        "\u8A03": "\u8BA3",
        "\u8A08": "\u8BA1",
        "\u8A0A": "\u8BAF",
        "\u8A0C": "\u8BA7",
        "\u8A0E": "\u8BA8",
        "\u8A10": "\u8BA6",
        "\u8A13": "\u8BAD",
        "\u8A15": "\u8BAA",
        "\u8A16": "\u8BAB",
        "\u8A17": "\u6258",
        "\u8A18": "\u8BB0",
        "\u8A1B": "\u8BB9",
        "\u8A1D": "\u8BB6",
        "\u8A1F": "\u8BBC",
        "\u8A22": "\u6B23",
        "\u8A23": "\u8BC0",
        "\u8A25": "\u8BB7",
        "\u8A29": "\u8BBB",
        "\u8A2A": "\u8BBF",
        "\u8A2D": "\u8BBE",
        "\u8A31": "\u8BB8",
        "\u8A34": "\u8BC9",
        "\u8A36": "\u8BC3",
        "\u8A3A": "\u8BCA",
        "\u8A3B": "\u6CE8",
        "\u8A3C": "\u8BC1",
        "\u8A41": "\u8BC2",
        "\u8A46": "\u8BCB",
        "\u8A4E": "\u8BB5",
        "\u8A50": "\u8BC8",
        "\u8A52": "\u8BD2",
        "\u8A54": "\u8BCF",
        "\u8A55": "\u8BC4",
        "\u8A57": "\u8BC7",
        "\u8A58": "\u8BCE",
        "\u8A5B": "\u8BC5",
        "\u8A5E": "\u8BCD",
        "\u8A60": "\u548F",
        "\u8A61": "\u8BE9",
        "\u8A62": "\u8BE2",
        "\u8A63": "\u8BE3",
        "\u8A66": "\u8BD5",
        "\u8A69": "\u8BD7",
        "\u8A6B": "\u8BE7",
        "\u8A6C": "\u8BDF",
        "\u8A6D": "\u8BE1",
        "\u8A6E": "\u8BE0",
        "\u8A70": "\u8BD8",
        "\u8A71": "\u8BDD",
        "\u8A72": "\u8BE5",
        "\u8A73": "\u8BE6",
        "\u8A75": "\u8BDC",
        "\u8A76": "\u916C",
        "\u8A7B": "\u54AF",
        "\u8A7C": "\u8BD9",
        "\u8A7F": "\u8BD6",
        "\u8A84": "\u8BD4",
        "\u8A85": "\u8BDB",
        "\u8A86": "\u8BD3",
        "\u8A87": "\u5938",
        "\u8A8C": "\u5FD7",
        "\u8A8D": "\u8BA4",
        "\u8A91": "\u8BF3",
        "\u8A92": "\u8BF6",
        "\u8A95": "\u8BDE",
        "\u8A98": "\u8BF1",
        "\u8A9A": "\u8BEE",
        "\u8A9E": "\u8BED",
        "\u8AA0": "\u8BDA",
        "\u8AA1": "\u8BEB",
        "\u8AA3": "\u8BEC",
        "\u8AA4": "\u8BEF",
        "\u8AA5": "\u8BF0",
        "\u8AA6": "\u8BF5",
        "\u8AA8": "\u8BF2",
        "\u8AAA": "\u8BF4",
        "\u8AAC": "\u8BF4",
        "\u8AB0": "\u8C01",
        "\u8AB2": "\u8BFE",
        "\u8AB6": "\u8C07",
        "\u8AB9": "\u8BFD",
        "\u8ABC": "\u8C0A",
        "\u8ABF": "\u8C03",
        "\u8AC2": "\u8C04",
        "\u8AC4": "\u8C06",
        "\u8AC7": "\u8C08",
        "\u8AC9": "\u8BFF",
        "\u8ACB": "\u8BF7",
        "\u8ACD": "\u8BE4",
        "\u8ACF": "\u8BF9",
        "\u8AD1": "\u8BFC",
        "\u8AD2": "\u8C05",
        "\u8AD6": "\u8BBA",
        "\u8AD7": "\u8C02",
        "\u8ADB": "\u8C00",
        "\u8ADC": "\u8C0D",
        "\u8ADD": "\u8C1E",
        "\u8ADE": "\u8C1D",
        "\u8AE0": "\u55A7",
        "\u8AE2": "\u8BE8",
        "\u8AE4": "\u8C14",
        "\u8AE6": "\u8C1B",
        "\u8AE7": "\u8C10",
        "\u8AEB": "\u8C0F",
        "\u8AED": "\u8C15",
        "\u8AEE": "\u8C18",
        "\u8AF1": "\u8BB3",
        "\u8AF3": "\u8C19",
        "\u8AF6": "\u8C0C",
        "\u8AF7": "\u8BBD",
        "\u8AF8": "\u8BF8",
        "\u8AFA": "\u8C1A",
        "\u8AFC": "\u8C16",
        "\u8AFE": "\u8BFA",
        "\u8B00": "\u8C0B",
        "\u8B01": "\u8C12",
        "\u8B02": "\u8C13",
        "\u8B04": "\u8A8A",
        "\u8B05": "\u8BCC",
        "\u8B0A": "\u8C0E",
        "\u8B0E": "\u8C1C",
        "\u8B10": "\u8C27",
        "\u8B14": "\u8C11",
        "\u8B16": "\u8C21",
        "\u8B17": "\u8C24",
        "\u8B19": "\u8C26",
        "\u8B1A": "\u8C25",
        "\u8B1B": "\u8BB2",
        "\u8B1D": "\u8C22",
        "\u8B20": "\u8C23",
        "\u8B28": "\u8C1F",
        "\u8B2B": "\u8C2A",
        "\u8B2C": "\u8C2C",
        "\u8B33": "\u8BB4",
        "\u8B39": "\u8C28",
        "\u8B3C": "\u547C",
        "\u8B3E": "\u8C29",
        "\u8B41": "\u54D7",
        "\u8B46": "\u563B",
        "\u8B49": "\u8BC1",
        "\u8B4E": "\u8C32",
        "\u8B4F": "\u8BA5",
        "\u8B54": "\u64B0",
        "\u8B56": "\u8C2E",
        "\u8B58": "\u8BC6",
        "\u8B59": "\u8C2F",
        "\u8B5A": "\u8C2D",
        "\u8B5C": "\u8C31",
        "\u8B5F": "\u566A",
        "\u8B6B": "\u8C35",
        "\u8B6D": "\u6BC1",
        "\u8B6F": "\u8BD1",
        "\u8B70": "\u8BAE",
        "\u8B74": "\u8C34",
        "\u8B77": "\u62A4",
        "\u8B7D": "\u8A89",
        "\u8B7E": "\u8C2B",
        "\u8B80": "\u8BFB",
        "\u8B85": "\u8C09",
        "\u8B8A": "\u53D8",
        "\u8B8C": "\u5BB4",
        "\u8B8E": "\u96E0",
        "\u8B92": "\u8C17",
        "\u8B93": "\u8BA9",
        "\u8B95": "\u8C30",
        "\u8B96": "\u8C36",
        "\u8B9A": "\u8D5E",
        "\u8B9C": "\u8C20",
        "\u8B9E": "\u8C33",
        "\u8C3F": "\u6EAA",
        "\u8C48": "\u5C82",
        "\u8C4E": "\u7AD6",
        "\u8C50": "\u4E30",
        "\u8C54": "\u8273",
        "\u8C56": "\u4E8D",
        "\u8C6C": "\u732A",
        "\u8C76": "\u8C6E",
        "\u8C8D": "\u72F8",
        "\u8C93": "\u732B",
        "\u8C9D": "\u8D1D",
        "\u8C9E": "\u8D1E",
        "\u8CA0": "\u8D1F",
        "\u8CA1": "\u8D22",
        "\u8CA2": "\u8D21",
        "\u8CA7": "\u8D2B",
        "\u8CA8": "\u8D27",
        "\u8CA9": "\u8D29",
        "\u8CAA": "\u8D2A",
        "\u8CAB": "\u8D2F",
        "\u8CAC": "\u8D23",
        "\u8CAF": "\u8D2E",
        "\u8CB0": "\u8D33",
        "\u8CB2": "\u8D40",
        "\u8CB3": "\u8D30",
        "\u8CB4": "\u8D35",
        "\u8CB6": "\u8D2C",
        "\u8CB7": "\u4E70",
        "\u8CB8": "\u8D37",
        "\u8CBA": "\u8D36",
        "\u8CBB": "\u8D39",
        "\u8CBC": "\u8D34",
        "\u8CBD": "\u8D3B",
        "\u8CBF": "\u8D38",
        "\u8CC0": "\u8D3A",
        "\u8CC1": "\u8D32",
        "\u8CC2": "\u8D42",
        "\u8CC3": "\u8D41",
        "\u8CC4": "\u8D3F",
        "\u8CC5": "\u8D45",
        "\u8CC7": "\u8D44",
        "\u8CC8": "\u8D3E",
        "\u8CCA": "\u8D3C",
        "\u8CD1": "\u8D48",
        "\u8CD2": "\u8D4A",
        "\u8CD3": "\u5BBE",
        "\u8CD5": "\u8D47",
        "\u8CD9": "\u8D52",
        "\u8CDA": "\u8D49",
        "\u8CDC": "\u8D50",
        "\u8CDE": "\u8D4F",
        "\u8CE0": "\u8D54",
        "\u8CE1": "\u8D53",
        "\u8CE2": "\u8D24",
        "\u8CE3": "\u5356",
        "\u8CE4": "\u8D31",
        "\u8CE6": "\u8D4B",
        "\u8CE7": "\u8D55",
        "\u8CEA": "\u8D28",
        "\u8CEC": "\u8D26",
        "\u8CED": "\u8D4C",
        "\u8CF4": "\u8D56",
        "\u8CF5": "\u8D57",
        "\u8CF8": "\u5269",
        "\u8CFA": "\u8D5A",
        "\u8CFB": "\u8D59",
        "\u8CFC": "\u8D2D",
        "\u8CFD": "\u8D5B",
        "\u8CFE": "\u8D5C",
        "\u8D04": "\u8D3D",
        "\u8D05": "\u8D58",
        "\u8D08": "\u8D60",
        "\u8D0A": "\u8D5E",
        "\u8D0B": "\u8D5D",
        "\u8D0D": "\u8D61",
        "\u8D0F": "\u8D62",
        "\u8D10": "\u8D46",
        "\u8D13": "\u8D43",
        "\u8D16": "\u8D4E",
        "\u8D1B": "\u8D63",
        "\u8D95": "\u8D76",
        "\u8D99": "\u8D75",
        "\u8DA8": "\u8D8B",
        "\u8DB2": "\u8DB1",
        "\u8DE1": "\u8FF9",
        "\u8DFC": "\u5C40",
        "\u8E10": "\u8DF5",
        "\u8E21": "\u8737",
        "\u8E2B": "\u78B0",
        "\u8E30": "\u903E",
        "\u8E34": "\u8E0A",
        "\u8E4C": "\u8DC4",
        "\u8E55": "\u8DF8",
        "\u8E5F": "\u8FF9",
        "\u8E60": "\u8DD6",
        "\u8E63": "\u8E52",
        "\u8E64": "\u8E2A",
        "\u8E67": "\u7CDF",
        "\u8E7A": "\u8DF7",
        "\u8E89": "\u8DB8",
        "\u8E8A": "\u8E0C",
        "\u8E8B": "\u8DFB",
        "\u8E8D": "\u8DC3",
        "\u8E91": "\u8E2F",
        "\u8E92": "\u8DDE",
        "\u8E93": "\u8E2C",
        "\u8E95": "\u8E70",
        "\u8E9A": "\u8DF9",
        "\u8EA1": "\u8E51",
        "\u8EA5": "\u8E7F",
        "\u8EA6": "\u8E9C",
        "\u8EAA": "\u8E8F",
        "\u8EC0": "\u8EAF",
        "\u8ECA": "\u8F66",
        "\u8ECB": "\u8F67",
        "\u8ECC": "\u8F68",
        "\u8ECD": "\u519B",
        "\u8ED2": "\u8F69",
        "\u8ED4": "\u8F6B",
        "\u8EDB": "\u8F6D",
        "\u8EDF": "\u8F6F",
        "\u8EE4": "\u8F77",
        "\u8EEB": "\u8F78",
        "\u8EF2": "\u8F71",
        "\u8EF8": "\u8F74",
        "\u8EF9": "\u8F75",
        "\u8EFA": "\u8F7A",
        "\u8EFB": "\u8F72",
        "\u8EFC": "\u8F76",
        "\u8EFE": "\u8F7C",
        "\u8F03": "\u8F83",
        "\u8F05": "\u8F82",
        "\u8F07": "\u8F81",
        "\u8F09": "\u8F7D",
        "\u8F0A": "\u8F7E",
        "\u8F12": "\u8F84",
        "\u8F13": "\u633D",
        "\u8F14": "\u8F85",
        "\u8F15": "\u8F7B",
        "\u8F1B": "\u8F86",
        "\u8F1C": "\u8F8E",
        "\u8F1D": "\u8F89",
        "\u8F1E": "\u8F8B",
        "\u8F1F": "\u8F8D",
        "\u8F25": "\u8F8A",
        "\u8F26": "\u8F87",
        "\u8F29": "\u8F88",
        "\u8F2A": "\u8F6E",
        "\u8F2F": "\u8F91",
        "\u8F33": "\u8F8F",
        "\u8F38": "\u8F93",
        "\u8F3B": "\u8F90",
        "\u8F3E": "\u8F97",
        "\u8F3F": "\u8206",
        "\u8F42": "\u6BC2",
        "\u8F44": "\u8F96",
        "\u8F45": "\u8F95",
        "\u8F46": "\u8F98",
        "\u8F49": "\u8F6C",
        "\u8F4D": "\u8F99",
        "\u8F4E": "\u8F7F",
        "\u8F54": "\u8F9A",
        "\u8F5F": "\u8F70",
        "\u8F61": "\u8F94",
        "\u8F62": "\u8F79",
        "\u8F64": "\u8F73",
        "\u8FA6": "\u529E",
        "\u8FAD": "\u8F9E",
        "\u8FAE": "\u8FAB",
        "\u8FAF": "\u8FA9",
        "\u8FB2": "\u519C",
        "\u8FC6": "\u8FE4",
        "\u8FF4": "\u56DE",
        "\u8FFA": "\u4E43",
        "\u9015": "\u8FF3",
        "\u9019": "\u8FD9",
        "\u9023": "\u8FDE",
        "\u9031": "\u5468",
        "\u9032": "\u8FDB",
        "\u904A": "\u6E38",
        "\u904B": "\u8FD0",
        "\u904E": "\u8FC7",
        "\u9054": "\u8FBE",
        "\u9055": "\u8FDD",
        "\u9059": "\u9065",
        "\u905C": "\u900A",
        "\u905E": "\u9012",
        "\u9060": "\u8FDC",
        "\u9069": "\u9002",
        "\u9072": "\u8FDF",
        "\u9077": "\u8FC1",
        "\u9078": "\u9009",
        "\u907A": "\u9057",
        "\u907C": "\u8FBD",
        "\u9081": "\u8FC8",
        "\u9084": "\u8FD8",
        "\u9087": "\u8FE9",
        "\u908A": "\u8FB9",
        "\u908F": "\u903B",
        "\u9090": "\u9026",
        "\u90DF": "\u90CF",
        "\u90F5": "\u90AE",
        "\u9106": "\u90D3",
        "\u9109": "\u4E61",
        "\u9112": "\u90B9",
        "\u9114": "\u90AC",
        "\u9116": "\u90E7",
        "\u9127": "\u9093",
        "\u912D": "\u90D1",
        "\u9130": "\u90BB",
        "\u9132": "\u90F8",
        "\u9134": "\u90BA",
        "\u9136": "\u90D0",
        "\u913A": "\u909D",
        "\u9148": "\u90E6",
        "\u9156": "\u9E29",
        "\u9183": "\u814C",
        "\u9186": "\u76CF",
        "\u919C": "\u4E11",
        "\u919E": "\u915D",
        "\u91AB": "\u533B",
        "\u91AC": "\u9171",
        "\u91B1": "\u53D1",
        "\u91BC": "\u5BB4",
        "\u91C0": "\u917F",
        "\u91C1": "\u8845",
        "\u91C3": "\u917E",
        "\u91C5": "\u917D",
        "\u91C6": "\u91C7",
        "\u91CB": "\u91CA",
        "\u91D0": "\u5398",
        "\u91D3": "\u9486",
        "\u91D4": "\u9487",
        "\u91D5": "\u948C",
        "\u91D7": "\u948A",
        "\u91D8": "\u9489",
        "\u91D9": "\u948B",
        "\u91DD": "\u9488",
        "\u91E3": "\u9493",
        "\u91E4": "\u9490",
        "\u91E6": "\u6263",
        "\u91E7": "\u948F",
        "\u91E9": "\u9492",
        "\u91F5": "\u9497",
        "\u91F7": "\u948D",
        "\u91F9": "\u9495",
        "\u91FA": "\u948E",
        "\u91FE": "\u497A",
        "\u9200": "\u94AF",
        "\u9201": "\u94AB",
        "\u9203": "\u9498",
        "\u9204": "\u94AD",
        "\u9208": "\u949A",
        "\u9209": "\u94A0",
        "\u920D": "\u949D",
        "\u9210": "\u94A4",
        "\u9211": "\u94A3",
        "\u9214": "\u949E",
        "\u9215": "\u94AE",
        "\u921E": "\u94A7",
        "\u9223": "\u9499",
        "\u9225": "\u94AC",
        "\u9226": "\u949B",
        "\u9227": "\u94AA",
        "\u922E": "\u94CC",
        "\u9230": "\u94C8",
        "\u9233": "\u94B6",
        "\u9234": "\u94C3",
        "\u9237": "\u94B4",
        "\u9238": "\u94B9",
        "\u9239": "\u94CD",
        "\u923A": "\u94B0",
        "\u923D": "\u94B8",
        "\u923E": "\u94C0",
        "\u923F": "\u94BF",
        "\u9240": "\u94BE",
        "\u9245": "\u949C",
        "\u9246": "\u94BB",
        "\u9248": "\u94CA",
        "\u9249": "\u94C9",
        "\u924B": "\u5228",
        "\u924D": "\u94CB",
        "\u9251": "\u94C2",
        "\u9255": "\u94B7",
        "\u9257": "\u94B3",
        "\u925A": "\u94C6",
        "\u925B": "\u94C5",
        "\u925E": "\u94BA",
        "\u9262": "\u94B5",
        "\u9264": "\u94A9",
        "\u9266": "\u94B2",
        "\u926C": "\u94BC",
        "\u926D": "\u94BD",
        "\u9276": "\u94CF",
        "\u9278": "\u94F0",
        "\u927A": "\u94D2",
        "\u927B": "\u94EC",
        "\u927F": "\u94EA",
        "\u9280": "\u94F6",
        "\u9283": "\u94F3",
        "\u9285": "\u94DC",
        "\u9291": "\u94E3",
        "\u9293": "\u94E8",
        "\u9296": "\u94E2",
        "\u9298": "\u94ED",
        "\u929A": "\u94EB",
        "\u929C": "\u8854",
        "\u92A0": "\u94D1",
        "\u92A3": "\u94F7",
        "\u92A5": "\u94F1",
        "\u92A6": "\u94DF",
        "\u92A8": "\u94F5",
        "\u92A9": "\u94E5",
        "\u92AA": "\u94D5",
        "\u92AB": "\u94EF",
        "\u92AC": "\u94D0",
        "\u92B1": "\u94DE",
        "\u92B2": "\u710A",
        "\u92B3": "\u9510",
        "\u92B7": "\u9500",
        "\u92B9": "\u9508",
        "\u92BB": "\u9511",
        "\u92BC": "\u9509",
        "\u92C1": "\u94DD",
        "\u92C3": "\u9512",
        "\u92C5": "\u950C",
        "\u92C7": "\u94A1",
        "\u92CC": "\u94E4",
        "\u92CF": "\u94D7",
        "\u92D2": "\u950B",
        "\u92DD": "\u950A",
        "\u92DF": "\u9513",
        "\u92E3": "\u94D8",
        "\u92E4": "\u9504",
        "\u92E5": "\u9503",
        "\u92E6": "\u9514",
        "\u92E8": "\u9507",
        "\u92E9": "\u94D3",
        "\u92EA": "\u94FA",
        "\u92EE": "\u94D6",
        "\u92EF": "\u9506",
        "\u92F0": "\u9502",
        "\u92F1": "\u94FD",
        "\u92F6": "\u950D",
        "\u92F8": "\u952F",
        "\u92FB": "\u9274",
        "\u92FC": "\u94A2",
        "\u9301": "\u951E",
        "\u9304": "\u5F55",
        "\u9306": "\u9516",
        "\u9307": "\u952B",
        "\u9308": "\u9529",
        "\u9310": "\u9525",
        "\u9312": "\u9515",
        "\u9315": "\u951F",
        "\u9318": "\u9524",
        "\u9319": "\u9531",
        "\u931A": "\u94EE",
        "\u931B": "\u951B",
        "\u931F": "\u952C",
        "\u9320": "\u952D",
        "\u9322": "\u94B1",
        "\u9326": "\u9526",
        "\u9328": "\u951A",
        "\u932B": "\u9521",
        "\u932E": "\u9522",
        "\u932F": "\u9519",
        "\u9333": "\u9530",
        "\u9336": "\u8868",
        "\u9338": "\u94FC",
        "\u9340": "\u951D",
        "\u9341": "\u9528",
        "\u9343": "\u952A",
        "\u9346": "\u9494",
        "\u9347": "\u9534",
        "\u934A": "\u70BC",
        "\u934B": "\u9505",
        "\u934D": "\u9540",
        "\u9354": "\u9537",
        "\u9358": "\u94E1",
        "\u935A": "\u9496",
        "\u935B": "\u953B",
        "\u9364": "\u9538",
        "\u9365": "\u9532",
        "\u9369": "\u9518",
        "\u936C": "\u9539",
        "\u9370": "\u953E",
        "\u9375": "\u952E",
        "\u9376": "\u9536",
        "\u937A": "\u9517",
        "\u937C": "\u9488",
        "\u937E": "\u949F",
        "\u9382": "\u9541",
        "\u9384": "\u953F",
        "\u9387": "\u9545",
        "\u938A": "\u9551",
        "\u938C": "\u9570",
        "\u9394": "\u9555",
        "\u9396": "\u9501",
        "\u9397": "\u67AA",
        "\u9398": "\u9549",
        "\u939A": "\u9524",
        "\u93A1": "\u9543",
        "\u93A2": "\u94A8",
        "\u93A3": "\u84E5",
        "\u93A6": "\u954F",
        "\u93A7": "\u94E0",
        "\u93A9": "\u94E9",
        "\u93AA": "\u953C",
        "\u93AC": "\u9550",
        "\u93AE": "\u9547",
        "\u93B0": "\u9552",
        "\u93B3": "\u954D",
        "\u93B5": "\u9553",
        "\u93BF": "\u954E",
        "\u93C3": "\u955E",
        "\u93C7": "\u955F",
        "\u93C8": "\u94FE",
        "\u93CC": "\u9546",
        "\u93CD": "\u9559",
        "\u93D1": "\u955D",
        "\u93D7": "\u94FF",
        "\u93D8": "\u9535",
        "\u93DC": "\u9557",
        "\u93DD": "\u9558",
        "\u93DE": "\u955B",
        "\u93DF": "\u94F2",
        "\u93E1": "\u955C",
        "\u93E2": "\u9556",
        "\u93E4": "\u9542",
        "\u93E8": "\u933E",
        "\u93F0": "\u955A",
        "\u93F5": "\u94E7",
        "\u93F7": "\u9564",
        "\u93F9": "\u956A",
        "\u93FA": "\u497D",
        "\u93FD": "\u9508",
        "\u9403": "\u94D9",
        "\u9409": "\u94E3",
        "\u940B": "\u94F4",
        "\u9410": "\u9563",
        "\u9412": "\u94F9",
        "\u9413": "\u9566",
        "\u9414": "\u9561",
        "\u9418": "\u949F",
        "\u9419": "\u956B",
        "\u941D": "\u9562",
        "\u9420": "\u9568",
        "\u9425": "\u4985",
        "\u9426": "\u950E",
        "\u9427": "\u950F",
        "\u9428": "\u9544",
        "\u942B": "\u954C",
        "\u942E": "\u9570",
        "\u942F": "\u4983",
        "\u9432": "\u956F",
        "\u9433": "\u956D",
        "\u9435": "\u94C1",
        "\u9436": "\u956E",
        "\u9438": "\u94CE",
        "\u943A": "\u94DB",
        "\u943F": "\u9571",
        "\u9444": "\u94F8",
        "\u944A": "\u956C",
        "\u944C": "\u9554",
        "\u9451": "\u9274",
        "\u9452": "\u9274",
        "\u9454": "\u9572",
        "\u9455": "\u9527",
        "\u945E": "\u9574",
        "\u9460": "\u94C4",
        "\u9463": "\u9573",
        "\u9464": "\u5228",
        "\u9465": "\u9565",
        "\u946A": "\u7089",
        "\u946D": "\u9567",
        "\u9470": "\u94A5",
        "\u9472": "\u9576",
        "\u9475": "\u7F50",
        "\u9477": "\u954A",
        "\u9479": "\u9569",
        "\u947C": "\u9523",
        "\u947D": "\u94BB",
        "\u947E": "\u92AE",
        "\u947F": "\u51FF",
        "\u9481": "\u4986",
        "\u9482": "\u954B",
        "\u9577": "\u957F",
        "\u9580": "\u95E8",
        "\u9582": "\u95E9",
        "\u9583": "\u95EA",
        "\u9586": "\u95EB",
        "\u9589": "\u95ED",
        "\u958B": "\u5F00",
        "\u958C": "\u95F6",
        "\u958E": "\u95F3",
        "\u958F": "\u95F0",
        "\u9591": "\u95F2",
        "\u9592": "\u95F2",
        "\u9593": "\u95F4",
        "\u9594": "\u95F5",
        "\u9598": "\u95F8",
        "\u95A1": "\u9602",
        "\u95A3": "\u9601",
        "\u95A4": "\u5408",
        "\u95A5": "\u9600",
        "\u95A8": "\u95FA",
        "\u95A9": "\u95FD",
        "\u95AB": "\u9603",
        "\u95AC": "\u9606",
        "\u95AD": "\u95FE",
        "\u95B1": "\u9605",
        "\u95B6": "\u960A",
        "\u95B9": "\u9609",
        "\u95BB": "\u960E",
        "\u95BC": "\u960F",
        "\u95BD": "\u960D",
        "\u95BE": "\u9608",
        "\u95BF": "\u960C",
        "\u95C3": "\u9612",
        "\u95C6": "\u677F",
        "\u95C7": "\u6697",
        "\u95C8": "\u95F1",
        "\u95CA": "\u9614",
        "\u95CB": "\u9615",
        "\u95CC": "\u9611",
        "\u95D0": "\u9617",
        "\u95D3": "\u95FF",
        "\u95D4": "\u9616",
        "\u95D5": "\u9619",
        "\u95D6": "\u95EF",
        "\u95DC": "\u5173",
        "\u95DE": "\u961A",
        "\u95E1": "\u9610",
        "\u95E2": "\u8F9F",
        "\u95E5": "\u95FC",
        "\u9628": "\u5384",
        "\u962C": "\u5751",
        "\u962F": "\u5740",
        "\u964F": "\u968B",
        "\u9658": "\u9649",
        "\u965D": "\u9655",
        "\u965E": "\u5347",
        "\u9663": "\u9635",
        "\u9670": "\u9634",
        "\u9673": "\u9648",
        "\u9678": "\u9646",
        "\u967D": "\u9633",
        "\u9684": "\u5824",
        "\u9689": "\u9667",
        "\u968A": "\u961F",
        "\u968E": "\u9636",
        "\u9695": "\u9668",
        "\u969B": "\u9645",
        "\u96A4": "\u9893",
        "\u96A8": "\u968F",
        "\u96AA": "\u9669",
        "\u96B1": "\u9690",
        "\u96B4": "\u9647",
        "\u96B8": "\u96B6",
        "\u96BB": "\u53EA",
        "\u96CB": "\u96BD",
        "\u96D6": "\u867D",
        "\u96D9": "\u53CC",
        "\u96DB": "\u96CF",
        "\u96DC": "\u6742",
        "\u96DE": "\u9E21",
        "\u96E2": "\u79BB",
        "\u96E3": "\u96BE",
        "\u96F2": "\u4E91",
        "\u96FB": "\u7535",
        "\u9724": "\u6E9C",
        "\u9727": "\u96FE",
        "\u973D": "\u9701",
        "\u9742": "\u96F3",
        "\u9744": "\u972D",
        "\u9746": "\u53C7",
        "\u9748": "\u7075",
        "\u9749": "\u53C6",
        "\u975A": "\u9753",
        "\u975C": "\u9759",
        "\u9766": "\u817C",
        "\u9768": "\u9765",
        "\u978F": "\u5DE9",
        "\u97A6": "\u79CB",
        "\u97C1": "\u7F30",
        "\u97C3": "\u9791",
        "\u97C6": "\u5343",
        "\u97C9": "\u97AF",
        "\u97CB": "\u97E6",
        "\u97CC": "\u97E7",
        "\u97CD": "\u97E8",
        "\u97D3": "\u97E9",
        "\u97D9": "\u97EA",
        "\u97DC": "\u97EC",
        "\u97DE": "\u97EB",
        "\u97FB": "\u97F5",
        "\u97FF": "\u54CD",
        "\u9801": "\u9875",
        "\u9802": "\u9876",
        "\u9803": "\u9877",
        "\u9805": "\u9879",
        "\u9806": "\u987A",
        "\u9807": "\u9878",
        "\u9808": "\u987B",
        "\u980A": "\u987C",
        "\u980C": "\u9882",
        "\u980E": "\u9880",
        "\u980F": "\u9883",
        "\u9810": "\u9884",
        "\u9811": "\u987D",
        "\u9812": "\u9881",
        "\u9813": "\u987F",
        "\u9817": "\u9887",
        "\u9818": "\u9886",
        "\u981C": "\u988C",
        "\u9821": "\u9889",
        "\u9824": "\u9890",
        "\u9826": "\u988F",
        "\u982B": "\u4FEF",
        "\u982D": "\u5934",
        "\u9830": "\u988A",
        "\u9832": "\u988B",
        "\u9837": "\u9894",
        "\u9838": "\u9888",
        "\u9839": "\u9893",
        "\u983B": "\u9891",
        "\u9846": "\u9897",
        "\u984C": "\u9898",
        "\u984D": "\u989D",
        "\u984E": "\u816D",
        "\u984F": "\u989C",
        "\u9852": "\u9899",
        "\u9853": "\u989B",
        "\u9854": "\u989C",
        "\u9858": "\u613F",
        "\u9859": "\u98A1",
        "\u985B": "\u98A0",
        "\u985E": "\u7C7B",
        "\u9862": "\u989F",
        "\u9865": "\u98A2",
        "\u9867": "\u987E",
        "\u986B": "\u98A4",
        "\u986C": "\u98A5",
        "\u986F": "\u663E",
        "\u9870": "\u98A6",
        "\u9871": "\u9885",
        "\u9873": "\u989E",
        "\u9874": "\u98A7",
        "\u98A8": "\u98CE",
        "\u98AE": "\u98D1",
        "\u98AF": "\u98D2",
        "\u98B1": "\u53F0",
        "\u98B3": "\u522E",
        "\u98B6": "\u98D3",
        "\u98B8": "\u98D4",
        "\u98BA": "\u626C",
        "\u98BC": "\u98D5",
        "\u98C0": "\u98D7",
        "\u98C4": "\u98D8",
        "\u98C6": "\u98D9",
        "\u98C8": "\u98DA",
        "\u98DB": "\u98DE",
        "\u98E2": "\u9965",
        "\u98E5": "\u9966",
        "\u98E9": "\u9968",
        "\u98EA": "\u996A",
        "\u98EB": "\u996B",
        "\u98ED": "\u996C",
        "\u98EF": "\u996D",
        "\u98F2": "\u996E",
        "\u98F4": "\u9974",
        "\u98FC": "\u9972",
        "\u98FD": "\u9971",
        "\u98FE": "\u9970",
        "\u98FF": "\u9973",
        "\u9903": "\u997A",
        "\u9904": "\u9978",
        "\u9905": "\u997C",
        "\u9908": "\u7CCD",
        "\u9909": "\u9977",
        "\u990A": "\u517B",
        "\u990C": "\u9975",
        "\u990E": "\u9979",
        "\u990F": "\u997B",
        "\u9911": "\u997D",
        "\u9912": "\u9981",
        "\u9913": "\u997F",
        "\u9914": "\u54FA",
        "\u9918": "\u4F59",
        "\u991A": "\u80B4",
        "\u991B": "\u9984",
        "\u991C": "\u9983",
        "\u991E": "\u996F",
        "\u9921": "\u9985",
        "\u9928": "\u9986",
        "\u992C": "\u7CCA",
        "\u9931": "\u7CC7",
        "\u9933": "\u9967",
        "\u9935": "\u5582",
        "\u9936": "\u9989",
        "\u9937": "\u9987",
        "\u993A": "\u998E",
        "\u993C": "\u9969",
        "\u993D": "\u9988",
        "\u993E": "\u998F",
        "\u993F": "\u998A",
        "\u9943": "\u998D",
        "\u9945": "\u9992",
        "\u9948": "\u9990",
        "\u9949": "\u9991",
        "\u994A": "\u9993",
        "\u994B": "\u9988",
        "\u994C": "\u9994",
        "\u9951": "\u9965",
        "\u9952": "\u9976",
        "\u9957": "\u98E8",
        "\u995C": "\u990D",
        "\u995E": "\u998B",
        "\u995F": "\u9995",
        "\u99AC": "\u9A6C",
        "\u99AD": "\u9A6D",
        "\u99AE": "\u51AF",
        "\u99B1": "\u9A6E",
        "\u99B3": "\u9A70",
        "\u99B4": "\u9A6F",
        "\u99C1": "\u9A73",
        "\u99D0": "\u9A7B",
        "\u99D1": "\u9A7D",
        "\u99D2": "\u9A79",
        "\u99D4": "\u9A75",
        "\u99D5": "\u9A7E",
        "\u99D8": "\u9A80",
        "\u99D9": "\u9A78",
        "\u99DB": "\u9A76",
        "\u99DD": "\u9A7C",
        "\u99DF": "\u9A77",
        "\u99E2": "\u9A88",
        "\u99ED": "\u9A87",
        "\u99EE": "\u9A73",
        "\u99F1": "\u9A86",
        "\u99F8": "\u9A8E",
        "\u99FF": "\u9A8F",
        "\u9A01": "\u9A8B",
        "\u9A03": "\u5446",
        "\u9A05": "\u9A93",
        "\u9A0D": "\u9A92",
        "\u9A0E": "\u9A91",
        "\u9A0F": "\u9A90",
        "\u9A16": "\u9A9B",
        "\u9A19": "\u9A97",
        "\u9A23": "\u9B03",
        "\u9A2B": "\u9A9E",
        "\u9A2D": "\u9A98",
        "\u9A2E": "\u9A9D",
        "\u9A30": "\u817E",
        "\u9A36": "\u9A7A",
        "\u9A37": "\u9A9A",
        "\u9A38": "\u9A9F",
        "\u9A3E": "\u9AA1",
        "\u9A40": "\u84E6",
        "\u9A41": "\u9A9C",
        "\u9A42": "\u9A96",
        "\u9A43": "\u9AA0",
        "\u9A44": "\u9AA2",
        "\u9A45": "\u9A71",
        "\u9A4A": "\u9A85",
        "\u9A4D": "\u9A81",
        "\u9A4F": "\u9AA3",
        "\u9A55": "\u9A84",
        "\u9A57": "\u9A8C",
        "\u9A5A": "\u60CA",
        "\u9A5B": "\u9A7F",
        "\u9A5F": "\u9AA4",
        "\u9A62": "\u9A74",
        "\u9A64": "\u9AA7",
        "\u9A65": "\u9AA5",
        "\u9A6A": "\u9A8A",
        "\u9AAF": "\u80AE",
        "\u9ACF": "\u9AC5",
        "\u9AD2": "\u810F",
        "\u9AD4": "\u4F53",
        "\u9AD5": "\u9ACC",
        "\u9AD6": "\u9ACB",
        "\u9AE3": "\u4EFF",
        "\u9AEE": "\u53D1",
        "\u9B06": "\u677E",
        "\u9B0D": "\u80E1",
        "\u9B1A": "\u987B",
        "\u9B22": "\u9B13",
        "\u9B25": "\u6597",
        "\u9B27": "\u95F9",
        "\u9B28": "\u54C4",
        "\u9B29": "\u960B",
        "\u9B2E": "\u9604",
        "\u9B31": "\u90C1",
        "\u9B4E": "\u9B49",
        "\u9B58": "\u9B47",
        "\u9B5A": "\u9C7C",
        "\u9B5B": "\u9C7D",
        "\u9B68": "\u8C5A",
        "\u9B6F": "\u9C81",
        "\u9B74": "\u9C82",
        "\u9B77": "\u9C7F",
        "\u9B81": "\u9C85",
        "\u9B83": "\u9C86",
        "\u9B8D": "\u9C8F",
        "\u9B90": "\u9C90",
        "\u9B91": "\u9C8D",
        "\u9B92": "\u9C8B",
        "\u9B93": "\u9C8A",
        "\u9B9A": "\u9C92",
        "\u9B9E": "\u9C95",
        "\u9BA3": "\u4C9F",
        "\u9BA6": "\u9C96",
        "\u9BAA": "\u9C94",
        "\u9BAB": "\u9C9B",
        "\u9BAD": "\u9C91",
        "\u9BAE": "\u9C9C",
        "\u9BBA": "\u9C9D",
        "\u9BC0": "\u9CA7",
        "\u9BC1": "\u9CA0",
        "\u9BC7": "\u9CA9",
        "\u9BC9": "\u9CA4",
        "\u9BCA": "\u9CA8",
        "\u9BD4": "\u9CBB",
        "\u9BD6": "\u9CAD",
        "\u9BD7": "\u9C9E",
        "\u9BDB": "\u9CB7",
        "\u9BDD": "\u9CB4",
        "\u9BE1": "\u9CB1",
        "\u9BE2": "\u9CB5",
        "\u9BE4": "\u9CB2",
        "\u9BE7": "\u9CB3",
        "\u9BE8": "\u9CB8",
        "\u9BEA": "\u9CAE",
        "\u9BEB": "\u9CB0",
        "\u9BF0": "\u9C87",
        "\u9BF4": "\u9CBA",
        "\u9BFD": "\u9CAB",
        "\u9BFF": "\u9CCA",
        "\u9C02": "\u9C97",
        "\u9C08": "\u9CBD",
        "\u9C09": "\u9CC7",
        "\u9C0C": "\u4CA1",
        "\u9C0D": "\u9CC5",
        "\u9C12": "\u9CC6",
        "\u9C13": "\u9CC3",
        "\u9C1B": "\u9CC1",
        "\u9C1C": "\u9CD2",
        "\u9C1F": "\u9CD1",
        "\u9C20": "\u9CCB",
        "\u9C23": "\u9CA5",
        "\u9C25": "\u9CCF",
        "\u9C27": "\u4CA2",
        "\u9C28": "\u9CCE",
        "\u9C29": "\u9CD0",
        "\u9C2D": "\u9CCD",
        "\u9C31": "\u9CA2",
        "\u9C32": "\u9CCC",
        "\u9C33": "\u9CD3",
        "\u9C35": "\u9CD8",
        "\u9C37": "\u9CA6",
        "\u9C39": "\u9CA3",
        "\u9C3B": "\u9CD7",
        "\u9C3C": "\u9CDB",
        "\u9C3E": "\u9CD4",
        "\u9C45": "\u9CD9",
        "\u9C48": "\u9CD5",
        "\u9C49": "\u9CD6",
        "\u9C52": "\u9CDF",
        "\u9C54": "\u9CDD",
        "\u9C56": "\u9CDC",
        "\u9C57": "\u9CDE",
        "\u9C58": "\u9C9F",
        "\u9C5D": "\u9CBC",
        "\u9C5F": "\u9C8E",
        "\u9C60": "\u9C99",
        "\u9C63": "\u9CE3",
        "\u9C67": "\u9CE2",
        "\u9C68": "\u9CBF",
        "\u9C6D": "\u9C9A",
        "\u9C77": "\u9CC4",
        "\u9C78": "\u9C88",
        "\u9C7A": "\u9CA1",
        "\u9CE5": "\u9E1F",
        "\u9CE7": "\u51EB",
        "\u9CE9": "\u9E20",
        "\u9CF3": "\u51E4",
        "\u9CF4": "\u9E23",
        "\u9CF6": "\u9E22",
        "\u9CFE": "\u4D13",
        "\u9D06": "\u9E29",
        "\u9D07": "\u9E28",
        "\u9D08": "\u96C1",
        "\u9D09": "\u9E26",
        "\u9D12": "\u9E30",
        "\u9D15": "\u9E35",
        "\u9D1B": "\u9E33",
        "\u9D1D": "\u9E32",
        "\u9D1E": "\u9E2E",
        "\u9D1F": "\u9E31",
        "\u9D23": "\u9E2A",
        "\u9D26": "\u9E2F",
        "\u9D28": "\u9E2D",
        "\u9D2F": "\u9E38",
        "\u9D30": "\u9E39",
        "\u9D34": "\u9E3B",
        "\u9D37": "\u4D15",
        "\u9D3B": "\u9E3F",
        "\u9D3F": "\u9E3D",
        "\u9D41": "\u4D14",
        "\u9D42": "\u9E3A",
        "\u9D43": "\u9E3C",
        "\u9D51": "\u9E43",
        "\u9D52": "\u9E46",
        "\u9D53": "\u9E41",
        "\u9D5C": "\u9E48",
        "\u9D5D": "\u9E45",
        "\u9D60": "\u9E44",
        "\u9D61": "\u9E49",
        "\u9D6A": "\u9E4C",
        "\u9D6C": "\u9E4F",
        "\u9D6E": "\u9E50",
        "\u9D6F": "\u9E4E",
        "\u9D70": "\u96D5",
        "\u9D72": "\u9E4A",
        "\u9D84": "\u4D16",
        "\u9D87": "\u9E2B",
        "\u9D89": "\u9E51",
        "\u9D8A": "\u9E52",
        "\u9D8F": "\u9E21",
        "\u9D93": "\u9E4B",
        "\u9D96": "\u9E59",
        "\u9D98": "\u9E55",
        "\u9D9A": "\u9E57",
        "\u9DA1": "\u9E56",
        "\u9DA5": "\u9E5B",
        "\u9DA9": "\u9E5C",
        "\u9DAA": "\u4D17",
        "\u9DAC": "\u9E27",
        "\u9DAF": "\u83BA",
        "\u9DB1": "\u9A9E",
        "\u9DB4": "\u9E64",
        "\u9DBA": "\u9E61",
        "\u9DBB": "\u9E58",
        "\u9DBC": "\u9E63",
        "\u9DBF": "\u9E5A",
        "\u9DC2": "\u9E5E",
        "\u9DC9": "\u4D18",
        "\u9DD3": "\u9E67",
        "\u9DD6": "\u9E65",
        "\u9DD7": "\u9E25",
        "\u9DD9": "\u9E37",
        "\u9DDA": "\u9E68",
        "\u9DE5": "\u9E36",
        "\u9DE6": "\u9E6A",
        "\u9DEF": "\u9E69",
        "\u9DF0": "\u71D5",
        "\u9DF2": "\u9E6B",
        "\u9DF3": "\u9E47",
        "\u9DF4": "\u9E47",
        "\u9DF8": "\u9E6C",
        "\u9DF9": "\u9E70",
        "\u9DFA": "\u9E6D",
        "\u9E07": "\u9E6F",
        "\u9E0A": "\u4D19",
        "\u9E0C": "\u9E71",
        "\u9E15": "\u9E2C",
        "\u9E1A": "\u9E66",
        "\u9E1B": "\u9E73",
        "\u9E1D": "\u9E42",
        "\u9E1E": "\u9E3E",
        "\u9E75": "\u5364",
        "\u9E79": "\u54B8",
        "\u9E7A": "\u9E7E",
        "\u9E7C": "\u7877",
        "\u9E7D": "\u76D0",
        "\u9E97": "\u4E3D",
        "\u9EA5": "\u9EA6",
        "\u9EA9": "\u9EB8",
        "\u9EB5": "\u9762",
        "\u9EBC": "\u4E48",
        "\u9EC3": "\u9EC4",
        "\u9ECC": "\u9EC9",
        "\u9EDE": "\u70B9",
        "\u9EE8": "\u515A",
        "\u9EF2": "\u9EEA",
        "\u9EF4": "\u9709",
        "\u9EF6": "\u9EE1",
        "\u9EF7": "\u9EE9",
        "\u9EFD": "\u9EFE",
        "\u9EFF": "\u9F0B",
        "\u9F07": "\u9CCC",
        "\u9F09": "\u9F0D",
        "\u9F15": "\u51AC",
        "\u9F34": "\u9F39",
        "\u9F4A": "\u9F50",
        "\u9F4B": "\u658B",
        "\u9F4E": "\u8D4D",
        "\u9F4F": "\u9F51",
        "\u9F52": "\u9F7F",
        "\u9F54": "\u9F80",
        "\u9F59": "\u9F85",
        "\u9F5C": "\u9F87",
        "\u9F5F": "\u9F83",
        "\u9F60": "\u9F86",
        "\u9F61": "\u9F84",
        "\u9F63": "\u51FA",
        "\u9F66": "\u9F88",
        "\u9F67": "\u556E",
        "\u9F6A": "\u9F8A",
        "\u9F6C": "\u9F89",
        "\u9F72": "\u9F8B",
        "\u9F76": "\u816D",
        "\u9F77": "\u9F8C",
        "\u9F8D": "\u9F99",
        "\u9F90": "\u5E9E",
        "\u9F91": "\u4DAE",
        "\u9F94": "\u9F9A",
        "\u9F95": "\u9F9B",
        "\u9F9C": "\u9F9F",
        "\uFA0C": "\u5140",
        "\uFE30": "\u2236",
        "\uFE31": "\uFF5C",
        "\uFE33": "\uFF5C",
        "\uFE3F": "\u2227",
        "\uFE40": "\u2228",
        "\uFE50": "\uFF0C",
        "\uFE51": "\u3001",
        "\uFE52": "\uFF0E",
        "\uFE54": "\uFF1B",
        "\uFE55": "\uFF1A",
        "\uFE56": "\uFF1F",
        "\uFE57": "\uFF01",
        "\uFE59": "\uFF08",
        "\uFE5A": "\uFF09",
        "\uFE5B": "\uFF5B",
        "\uFE5C": "\uFF5D",
        "\uFE5D": "\uFF3B",
        "\uFE5E": "\uFF3D",
        "\uFE5F": "\uFF03",
        "\uFE60": "\uFF06",
        "\uFE61": "\uFF0A",
        "\uFE62": "\uFF0B",
        "\uFE63": "\uFF0D",
        "\uFE64": "\uFF1C",
        "\uFE65": "\uFF1E",
        "\uFE66": "\uFF1D",
        "\uFE69": "\uFF04",
        "\uFE6A": "\uFF05",
        "\uFE6B": "\uFF20",
        "\u300C": "\u300C",
        "\u300D": "\u300D"
      };
      function toSimp(itxt) {
        var zhmap = TongWen.t_2_s;
        itxt = itxt.replace(/[^\x00-\xFF]/g, replaceFn);
        return itxt;
        function replaceFn(s) {
          return s in zhmap ? zhmap[s] : s;
        }
      }
      module.exports = toSimp;
    }
  });

  // node_modules/chinese-conv/dist/index.js
  var require_dist = __commonJS({
    "node_modules/chinese-conv/dist/index.js"(exports, module) {
      (function(global, factory) {
        if (typeof define === "function" && define.amd) {
          define(["exports", "module", "../tongwen/tongwen-st.js", "../tongwen/tongwen-ts.js"], factory);
        } else if (typeof exports !== "undefined" && typeof module !== "undefined") {
          factory(exports, module, require_tongwen_st(), require_tongwen_ts());
        } else {
          var mod = {
            exports: {}
          };
          factory(mod.exports, mod, global.tongwenSt, global.tongwenTs);
          global.index = mod.exports;
        }
      })(exports, function(exports2, module2, _tongwenTongwenStJs, _tongwenTongwenTsJs) {
        "use strict";
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { "default": obj };
        }
        var _tongwenSt = _interopRequireDefault(_tongwenTongwenStJs);
        var _tongwenTs = _interopRequireDefault(_tongwenTongwenTsJs);
        module2.exports = {
          sify: _tongwenTs["default"],
          tify: _tongwenSt["default"]
        };
      });
    }
  });

  // src/common/constants.ts
  var VERSION = "1.6.10";
  var isProd = false;
  var isWebApp = location.protocol.startsWith("http");
  var isFirefox = navigator.userAgent.includes("Firefox");

  // src/page/canvas-renderer.ts
  function getWords(str) {
    const result = [];
    const words = str.split(
      /(\p{sc=Han}|\p{sc=Katakana}|\p{sc=Hiragana}|\p{sc=Hang}|\p{gc=Punctuation})|\s+/gu
    );
    let tempWord = "";
    words.forEach((word = " ") => {
      if (word) {
        if (tempWord && /(“|')$/.test(tempWord) && word !== " ") {
          tempWord += word;
        } else if (/(,|\.|\?|:|;|'|，|。|？|：|；|”)/.test(word) && tempWord !== " ") {
          tempWord += word;
        } else {
          if (tempWord)
            result.push(tempWord);
          tempWord = word;
        }
      }
    });
    if (tempWord)
      result.push(tempWord);
    return result;
  }
  function drawParagraph(ctx, str = "", options2) {
    let actualWidth = 0;
    const maxWidth = ctx.canvas.width - options2.left - options2.right;
    const words = getWords(str);
    const lines = [];
    const measures = [];
    let tempLine = "";
    let textMeasures = ctx.measureText("");
    for (let i = 0; i < words.length; i++) {
      const word = words[i];
      const nextWord = words[i + 1];
      const nextIsLast = i === words.length - 2;
      const lastWordIsShort = nextIsLast && nextWord.length === 1;
      const line = tempLine + word;
      const mea = ctx.measureText(line);
      const isSpace = /\s/.test(word);
      if ((mea.width > maxWidth || // https://github.com/mantou132/Spotify-Lyrics/issues/148
      lastWordIsShort && ctx.measureText(line + nextWord).width > maxWidth) && tempLine && !isSpace) {
        actualWidth = Math.max(actualWidth, textMeasures.width);
        lines.push(tempLine);
        measures.push(textMeasures);
        tempLine = word;
      } else {
        tempLine = line;
        if (!isSpace) {
          textMeasures = mea;
        }
      }
    }
    if (tempLine !== "") {
      actualWidth = Math.max(actualWidth, textMeasures.width);
      lines.push(tempLine);
      measures.push(ctx.measureText(tempLine));
    }
    const ascent = measures.length ? measures[0].actualBoundingBoxAscent : 0;
    const body = measures.length ? options2.lineHeight * (measures.length - 1) : 0;
    const descent = measures.length ? measures[measures.length - 1].actualBoundingBoxDescent : 0;
    const actualHeight = ascent + body + descent;
    let startX = 0;
    let startY = 0;
    let translateX = 0;
    let translateY = 0;
    if (options2.hCenter) {
      startX = (ctx.canvas.width - actualWidth) / 2;
    } else {
      startX = options2.left + translateX;
    }
    if (options2.vCenter) {
      startY = (ctx.canvas.height - actualHeight) / 2 + ascent;
    } else if (options2.top) {
      startY = options2.top + ascent;
    } else if (options2.bottom) {
      startY = options2.bottom - descent - body;
    }
    if (typeof options2.translateX === "function") {
      translateX = options2.translateX(actualWidth);
    }
    if (typeof options2.translateX === "number") {
      translateX = options2.translateX;
    }
    if (typeof options2.translateY === "function") {
      translateY = options2.translateY(actualHeight);
    }
    if (typeof options2.translateY === "number") {
      translateY = options2.translateY;
    }
    if (!options2.measure) {
      lines.forEach((str2, index) => {
        const x = options2.hCenter ? (ctx.canvas.width - measures[index].width) / 2 : startX;
        ctx.fillText(str2, x, startY + index * options2.lineHeight + translateY);
      });
    }
    return {
      width: actualWidth,
      height: actualHeight,
      left: startX + translateX,
      right: ctx.canvas.width - options2.left - actualWidth + translateX,
      top: startY - ascent + translateY,
      bottom: startY + body + descent + translateY
    };
  }
  function drawMask(ctx) {
    ctx.save();
    ctx.fillStyle = "#000000b0";
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    ctx.restore();
  }
  function drawBackground(ctx, image) {
    ctx.canvas.width = ctx.canvas.width;
    ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);
  }
  function drawText(ctx, text, options2) {
    const { color = "white", backgroundImage } = options2;
    drawBackground(ctx, backgroundImage);
    drawMask(ctx);
    ctx.save();
    const fontSize = 32;
    ctx.fillStyle = color;
    ctx.font = `bold ${fontSize}px ${options2.fontFamily}, sans-serif`;
    drawParagraph(ctx, text, {
      vCenter: true,
      hCenter: true,
      left: 0,
      right: 0,
      lineHeight: fontSize
    });
    ctx.restore();
  }
  var offscreenCanvas;
  var offscreenCtx;
  var gradient1;
  var gradient2;
  function initOffscreenCtx(ctx) {
    if (!offscreenCtx) {
      offscreenCanvas = document.createElement("canvas");
      offscreenCtx = offscreenCanvas.getContext("2d");
      gradient1 = offscreenCtx.createLinearGradient(0, 0, 0, ctx.canvas.height);
      gradient1.addColorStop(0.08, "transparent");
      gradient1.addColorStop(0.15, "white");
      gradient1.addColorStop(0.85, "white");
      gradient1.addColorStop(0.92, "transparent");
      gradient2 = offscreenCtx.createLinearGradient(0, 0, 0, ctx.canvas.height);
      gradient2.addColorStop(0, "white");
      gradient2.addColorStop(0.7, "white");
      gradient2.addColorStop(0.925, "transparent");
    }
    offscreenCtx.canvas.width = ctx.canvas.width;
    offscreenCtx.canvas.height = ctx.canvas.height;
    return { offscreenCtx, gradient1, gradient2 };
  }
  var renderState;
  function isEqualState(state1, state2) {
    if (!state1 || !state2)
      return false;
    return Object.keys(state1).reduce((p, c) => {
      return p && state1[c] === state2[c];
    }, true);
  }
  function renderLyrics(ctx, lyrics, currentTime, options2) {
    const focusLineFontSize = options2.focusLineFontSize;
    const focusLineHeight = focusLineFontSize * 1.2;
    const focusLineMargin = focusLineFontSize * 1;
    const otherLineFontSize = focusLineFontSize * 1;
    const otherLineHeight = otherLineFontSize * 1.2;
    const otherLineMargin = otherLineFontSize * 1;
    const otherLineOpacity = 0.35;
    const marginWidth = ctx.canvas.width * 0.075;
    const animateDuration = options2.smooth ? 0.3 : 0;
    const hCenter = options2.align === "center" ? true : false;
    const fontFamily = `${options2.fontFamily}, sans-serif`;
    let currentIndex = -1;
    let progress = 1;
    lyrics.forEach(({ startTime }, index) => {
      if (startTime && currentTime > startTime - animateDuration) {
        currentIndex = index;
        if (currentTime < startTime) {
          progress = (currentTime - startTime + animateDuration) / animateDuration;
        }
      }
    });
    const nextState = { ...options2, currentIndex, lyrics, progress };
    if (isEqualState(nextState, renderState))
      return;
    renderState = nextState;
    drawBackground(ctx, options2.backgroundImage);
    drawMask(ctx);
    ctx.save();
    const { offscreenCtx: offscreenCtx2, gradient1: gradient12 } = initOffscreenCtx(ctx);
    offscreenCtx2.save();
    const fFontSize = otherLineFontSize + progress * (focusLineFontSize - otherLineFontSize);
    const fLineHeight = otherLineHeight + progress * (focusLineHeight - otherLineHeight);
    const fLineOpacity = otherLineOpacity + progress * (1 - otherLineOpacity);
    const otherRight = ctx.canvas.width - marginWidth - otherLineFontSize / focusLineFontSize * (ctx.canvas.width - 2 * marginWidth);
    const progressRight = marginWidth + (1 - progress) * (otherRight - marginWidth);
    offscreenCtx2.fillStyle = `rgba(255, 255, 255, ${fLineOpacity})`;
    offscreenCtx2.font = `bold ${fFontSize}px ${fontFamily}`;
    const prevLineFocusHeight = drawParagraph(offscreenCtx2, lyrics[currentIndex - 1]?.text, {
      vCenter: true,
      hCenter,
      left: marginWidth,
      right: marginWidth,
      lineHeight: focusLineFontSize,
      measure: true
    }).height;
    const pos = drawParagraph(offscreenCtx2, lyrics[currentIndex]?.text, {
      vCenter: true,
      hCenter,
      left: marginWidth,
      right: progressRight,
      lineHeight: fLineHeight,
      translateY: (selfHeight) => ((prevLineFocusHeight + selfHeight) / 2 + focusLineMargin) * (1 - progress)
    });
    let lastBeforePos = pos;
    for (let i = 0; i < currentIndex; i++) {
      if (i === 0) {
        const prevProgressLineFontSize = otherLineFontSize + (1 - progress) * (focusLineFontSize - otherLineFontSize);
        const prevProgressLineOpacity = otherLineOpacity + (1 - progress) * (1 - otherLineOpacity);
        offscreenCtx2.fillStyle = `rgba(255, 255, 255, ${prevProgressLineOpacity})`;
        offscreenCtx2.font = `bold ${prevProgressLineFontSize}px ${fontFamily}`;
      } else {
        offscreenCtx2.fillStyle = `rgba(255, 255, 255, ${otherLineOpacity})`;
        offscreenCtx2.font = `bold ${otherLineFontSize}px ${fontFamily}`;
      }
      lastBeforePos = drawParagraph(offscreenCtx2, lyrics[currentIndex - 1 - i].text, {
        hCenter,
        bottom: i === 0 ? lastBeforePos.top - focusLineMargin : lastBeforePos.top - otherLineMargin,
        left: marginWidth,
        right: i === 0 ? marginWidth + progress * (otherRight - marginWidth) : otherRight,
        lineHeight: i === 0 ? otherLineHeight + (1 - progress) * (focusLineHeight - otherLineHeight) : otherLineHeight
      });
      if (lastBeforePos.top < 0)
        break;
    }
    offscreenCtx2.fillStyle = `rgba(255, 255, 255, ${otherLineOpacity})`;
    offscreenCtx2.font = `bold ${otherLineFontSize}px ${fontFamily}`;
    let lastAfterPos = pos;
    for (let i = currentIndex + 1; i < lyrics.length; i++) {
      lastAfterPos = drawParagraph(offscreenCtx2, lyrics[i].text, {
        hCenter,
        top: i === currentIndex + 1 ? lastAfterPos.bottom + focusLineMargin : lastAfterPos.bottom + otherLineMargin,
        left: marginWidth,
        right: otherRight,
        lineHeight: otherLineHeight
      });
      if (lastAfterPos.bottom > ctx.canvas.height)
        break;
    }
    offscreenCtx2.globalCompositeOperation = "source-in";
    offscreenCtx2.fillStyle = gradient12;
    offscreenCtx2.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    offscreenCtx2.restore();
    ctx.drawImage(offscreenCtx2.canvas, 0, 0);
    ctx.restore();
  }
  var weakLyricsTime = /* @__PURE__ */ new WeakMap();
  function renderHighlight(ctx, lyrics, options2) {
    const DURATION = 2e4;
    const animateDuration = options2.smooth ? 500 : 0;
    const marginWidth = ctx.canvas.width * 0.075;
    const fontFamily = `${options2.fontFamily}, sans-serif`;
    if (!weakLyricsTime.has(lyrics)) {
      weakLyricsTime.set(lyrics, performance.now());
    }
    const time2 = performance.now() - weakLyricsTime.get(lyrics);
    const currentIndex = Math.floor(time2 / DURATION) % lyrics.length;
    const diff = time2 % DURATION;
    const progress = Math.min((diff < DURATION / 2 ? diff : DURATION - diff) / animateDuration, 1);
    const opacity = progress;
    const nextState = { ...options2, currentIndex, lyrics, progress };
    if (isEqualState(nextState, renderState))
      return;
    renderState = nextState;
    drawBackground(ctx, options2.backgroundImage);
    drawMask(ctx);
    ctx.save();
    const { offscreenCtx: offscreenCtx2, gradient2: gradient22 } = initOffscreenCtx(ctx);
    offscreenCtx2.save();
    offscreenCtx2.fillStyle = `rgba(255, 255, 255, ${opacity})`;
    offscreenCtx2.font = `bold ${options2.focusLineFontSize}px ${fontFamily}`;
    drawParagraph(offscreenCtx2, lyrics[currentIndex], {
      hCenter: options2.align === "center" ? true : false,
      lineHeight: options2.focusLineFontSize * 1.3,
      top: marginWidth,
      left: marginWidth,
      right: marginWidth
    });
    offscreenCtx2.globalCompositeOperation = "source-in";
    offscreenCtx2.fillStyle = gradient22;
    offscreenCtx2.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
    offscreenCtx2.restore();
    ctx.drawImage(offscreenCtx2.canvas, 0, 0);
    const fontSize = ctx.canvas.width * 0.05;
    ctx.fillStyle = "yellow";
    ctx.font = `bold ${fontSize}px sans-serif`;
    const text = "HIGHLIGHT";
    const pos = drawParagraph(ctx, text, {
      hCenter: true,
      left: marginWidth,
      right: marginWidth,
      bottom: ctx.canvas.height - marginWidth,
      lineHeight: fontSize
    });
    ctx.strokeStyle = "white";
    ctx.lineWidth = 3;
    const y = ctx.canvas.height - pos.height / 2 - marginWidth;
    ctx.beginPath();
    ctx.moveTo(marginWidth, y);
    ctx.lineTo((ctx.canvas.width - pos.width) / 2 - fontSize / 2, y);
    ctx.moveTo((ctx.canvas.width + pos.width) / 2 + fontSize / 2, y);
    ctx.lineTo(ctx.canvas.width - marginWidth, y);
    ctx.stroke();
    ctx.restore();
  }

  // src/page/utils.ts
  function raw(arr, ...args) {
    return arr.reduce((prev, current, index) => prev + (args[index - 1] || "") + current);
  }
  var svg = raw;
  var css = raw;
  function getSVGDataUrl(s) {
    return `data:image/svg+xml,${encodeURIComponent(s)}`;
  }
  function documentQueryHasSelector(s) {
    if (s.includes(">>"))
      return querySelector(s);
    if (!s.includes(":has"))
      return document.querySelector(s);
    const parentSelector = s.replace(/:has\(.*\)/, "");
    const childSelector = s.replace(/:has\((.*)\)/, " $1");
    const child = document.querySelector(childSelector);
    return child?.closest(parentSelector);
  }
  function querySelectorAll(selector) {
    const parts2 = selector.split(">>");
    if (parts2.length > 1) {
      const sub = parts2.pop();
      const root = querySelector(parts2.join(">>"));
      return root?.shadowRoot?.querySelectorAll(sub);
    }
    return document.querySelectorAll(selector);
  }
  function isValidSelector(selector) {
    return !!selector && selector !== "NONE";
  }
  function querySelector(selector) {
    if (!isValidSelector(selector))
      return null;
    return selector.split(">>").reduce((p, c) => (p?.shadowRoot || p)?.querySelector(c), document);
  }
  var headReady = new Promise((res) => {
    if (document.head)
      res();
    document.addEventListener("readystatechange", () => {
      if (document.head)
        res();
    });
  });
  var styledMap = /* @__PURE__ */ new Map();
  async function appendStyle(s) {
    const oldStyle = styledMap.get(s);
    if (oldStyle)
      return oldStyle;
    await headReady;
    const style = document.createElement("style");
    style.textContent = s;
    document.head.append(style);
    styledMap.set(s, style);
    return style;
  }
  function captureException(err, extra) {
    if (!isProd)
      console.error(err, extra);
    const msg = {
      type: 100008 /* CAPTURE_EXCEPTION */,
      data: {
        name: err.name,
        message: err.message,
        stack: err.stack,
        extra: { href: location.href, ...extra }
      }
    };
    window.postMessage(msg, "*");
  }

  // src/common/ga.ts
  var postReq = (params) => {
    const uri = "https://www.google-analytics.com/collect";
    const options2 = {
      method: "post",
      body: new URLSearchParams(params).toString(),
      headers: {
        "content-type": "application/x-www-form-urlencoded"
      }
    };
    if (isWebApp) {
      const data = { reqId: -1, uri, options: options2 };
      window.postMessage({ type: 100009 /* SEND_REQUEST */, data }, "*");
    } else {
      fetch(uri, options2);
    }
  };
  var gaRequiredPayload = {
    v: "1",
    // protocol version
    tid: isProd ? "UA-163443161-1" : "UA-88601817-2"
    // measurement id
  };
  var events = {
    loadLyrics: {
      ec: "Load",
      ea: "LoadLyrics",
      el: "LoadLyricsTime"
    },
    notMatch: {
      ec: "Load",
      ea: "NotMatchLyrics"
    },
    useRemoteMatch: {
      ec: "Load",
      ea: "UseRemoteMatch"
    },
    noLyrics: {
      ec: "Load",
      ea: "NoLyrics"
    },
    useRemoteLyrics: {
      ec: "Load",
      ea: "UseRemoteLyrics"
    },
    selectTrack: {
      ec: "Click",
      ea: "ManuallySelectTrack"
    },
    autoSelectTrack: {
      ec: "Click",
      ea: "AutoSelectTrack"
    },
    clickToggleLyrics: {
      ec: "Click",
      ea: "ClickToggleLyrics"
    },
    keypressToggleLyrics: {
      ec: "Click",
      ea: "KeypressToggleLyrics"
    },
    openEditor: {
      ec: "Window",
      ea: "OpenEditor"
    },
    openOptionsPage: {
      ec: "Window",
      ea: "OpenOptionsPage"
    },
    openPopupPage: {
      ec: "Window",
      ea: "OpenPopupPage"
    }
  };
  function sendEvent(cid, payload, customOptions = {}) {
    postReq({
      cid,
      // client id
      t: "event",
      // hit type
      cn: VERSION,
      // campaign name
      ul: navigator.language.toLowerCase(),
      // user language
      sr: `${screen.width}x${screen.height}`,
      // screen resolution
      ...gaRequiredPayload,
      ...payload,
      ...customOptions,
      ...isWebApp ? {
        vp: `${innerWidth}x${innerHeight}`,
        // viewport size
        cs: matchMedia("(display-mode: standalone), (display-mode: minimal-ui)").matches ? "pwa" : "webpage",
        // campaign source
        cm: location.host
        // campaign medium
      } : {}
    });
  }

  // src/page/request.ts
  var cspError = false;
  var reqId = 0;
  async function bgFetch(uri, options2 = {}) {
    const { body, headers, method } = options2;
    reqId++;
    const data = { reqId, uri, options: { body, headers, method } };
    window.postMessage({ type: 100009 /* SEND_REQUEST */, data }, "*");
    return new Promise((res, rej) => {
      const getRes = ({ data: response }) => {
        const { type, data: data2 } = response || {};
        if (type === 100010 /* SEND_RESPONSE */ && data2?.reqId === reqId) {
          if (data2.ok) {
            res(data2.data);
          } else {
            rej(new Error(data2.data));
          }
          window.removeEventListener("message", getRes);
        }
      };
      window.addEventListener("message", getRes);
    });
  }
  async function request(uri, options2 = {}) {
    if (cspError) {
      return bgFetch(uri, options2);
    } else {
      try {
        const res = await fetch(uri, {
          mode: "cors",
          ...options2
        });
        if (res.status === 0)
          throw new Error("Request fail");
        if (res.status >= 400)
          throw new Error(res.statusText);
        const res2 = res.clone();
        try {
          return await res.json();
        } catch {
          return await res2.text();
        }
      } catch (err) {
        document.addEventListener(
          "securitypolicyviolation",
          ({ blockedURI }) => {
            if (blockedURI === uri)
              cspError = true;
          },
          { once: true }
        );
        await new Promise((res) => setTimeout(res));
        if (cspError) {
          return bgFetch(uri, options2);
        } else {
          throw err;
        }
      }
    }
  }

  // src/page/config.json
  var config_default = {
    API_HOST: "https://files.xianqiao.wang/https://neteasecloudmusic.api.soraharu.com",
    LOGGED_MARK_SELECTOR: "#global-nav-bar [data-testid=user-widget-link]",
    LYRICS_CONTAINER_SELECTOR: "nav[aria-label] > div:last-of-type",
    PAGE_PIP_STYLE: "position: relative; width: 100%; height: auto; border-radius: inherit;",
    ALBUM_COVER_SELECTOR: "[data-testid=now-playing-widget] > div:nth-child(1) img",
    ALBUM_COVER_LARGE_REGEXP_REPLACE: ["00004851(?=\\w{24}$)", "0000b273"],
    TRACK_INFO_SELECTOR: "[data-testid=now-playing-widget] > div:nth-child(2)",
    TRACK_NAME_SELECTOR: "[data-testid=now-playing-widget] > div:nth-child(2) > div:nth-child(1)",
    TRACK_ARTIST_SELECTOR: "[data-testid=now-playing-widget] > div:nth-child(2) > div:last-of-type",
    BTN_WRAPPER_SELECTOR: "[data-testid=now-playing-widget]",
    BTN_LIKE_SELECTOR: "[data-testid=now-playing-widget] > div:last-of-type",
    PIP_BTN_SELECTOR: "[data-testid=now-playing-widget] button[data-testid*=pip], [data-testid=now-playing-bar] > div > div:last-of-type > div > :where(button[data-testid=lyrics-button], button[data-testid=pip-toggle-button]), main section + div[class*=footer]",
    AUDIO_SELECTOR: "NONE",
    OTHER_DEVICE: "[data-testid=now-playing-bar] > div + div",
    OTHER_DEVICE_TOTAL: "[data-testid=playback-duration]",
    OTHER_DEVICE_CURRENT: "[data-testid=playback-position]",
    YOUTUBE: {
      LOGGED_MARK_SELECTOR: "ytmusic-settings-button",
      LYRICS_CONTAINER_SELECTOR: "ytmusic-player",
      PAGE_PIP_STYLE: "position: absolute; width: 100%; height: 100%; top: 0; object-fit: cover;",
      ALBUM_COVER_SELECTOR: "ytmusic-player-bar .ytmusic-player-bar.image",
      ALBUM_COVER_LARGE_REGEXP_REPLACE: ["w(\\d.*)-h\\1(?=-l90-rj$)", "w640-h640"],
      TRACK_INFO_SELECTOR: "ytmusic-player-bar .content-info-wrapper",
      TRACK_NAME_SELECTOR: "ytmusic-player-bar .content-info-wrapper .title",
      TRACK_ARTIST_SELECTOR: "ytmusic-player-bar .content-info-wrapper .subtitle yt-formatted-string > :first-child",
      BTN_WRAPPER_SELECTOR: "ytmusic-player-bar ytmusic-like-button-renderer",
      BTN_LIKE_SELECTOR: "ytmusic-player-bar ytmusic-like-button-renderer yt-button-shape.like button",
      PIP_BTN_SELECTOR: "NONE",
      AUDIO_SELECTOR: "video.html5-main-video"
    },
    APPLE: {
      LOGGED_MARK_SELECTOR: ".auth-content .user",
      LYRICS_CONTAINER_SELECTOR: "#navigation",
      PAGE_PIP_STYLE: "position: sticky; top: 100vh; width: 100%; height: auto;",
      ALBUM_COVER_SELECTOR: "amp-lcd >> .lcd__artwork img",
      ALBUM_COVER_LARGE_REGEXP_REPLACE: ["(\\d.*)x\\1(?=bb\\.(jpg|webp)$)", "640x640"],
      TRACK_INFO_SELECTOR: "amp-lcd",
      TRACK_NAME_SELECTOR: "amp-lcd >> .lcd-meta__primary .lcd-meta-line__text-content",
      TRACK_ARTIST_SELECTOR: "amp-lcd >>.lcd-meta__secondary .lcd-meta-line__text-content .lcd-meta-line__fragment",
      BTN_WRAPPER_SELECTOR: "amp-chrome-player >> apple-music-playback-controls >> .music-controls .music-controls__main + div",
      BTN_LIKE_SELECTOR: "amp-chrome-player >> apple-music-playback-controls >> amp-playback-controls-repeat >> button",
      PIP_BTN_SELECTOR: "NONE",
      AUDIO_SELECTOR: "#apple-music-player"
    },
    DEEZER: {
      LOGGED_MARK_SELECTOR: ".topbar-action .chakra-avatar",
      LYRICS_CONTAINER_SELECTOR: ".page-topbar + div",
      PAGE_PIP_STYLE: "position: relative; width: 100%; height: auto;",
      ALBUM_COVER_SELECTOR: ".page-player .chakra-image",
      ALBUM_COVER_LARGE_REGEXP_REPLACE: ["(\\d.*)x\\1(?=-000000-80-0-0\\.jpg$)", "640x640"],
      TRACK_INFO_SELECTOR: ".page-player > div > div:first-of-type",
      TRACK_NAME_SELECTOR: ".page-player .chakra-link:not(.track-link)",
      TRACK_ARTIST_SELECTOR: ".page-player .chakra-link.track-link",
      BTN_WRAPPER_SELECTOR: ".page-player > div > div:first-of-type .chakra-button__group",
      BTN_LIKE_SELECTOR: ".page-player > div > div:first-of-type .chakra-button__group > button:first-of-type",
      PIP_BTN_SELECTOR: "NONE",
      AUDIO_SELECTOR: "NONE"
    },
    TIDAL: {
      LOGGED_MARK_SELECTOR: "#sidebar [data-test=profile-image-button]",
      LYRICS_CONTAINER_SELECTOR: "#sidebar",
      PAGE_PIP_STYLE: "position: sticky; top: 100vh; width: 100%; height: auto;",
      ALBUM_COVER_SELECTOR: "[data-test='footer-player'] figure img",
      ALBUM_COVER_LARGE_REGEXP_REPLACE: ["(\\d.*)x\\1(?=\\.jpg(\\?.*)?$)", "640x640"],
      TRACK_INFO_SELECTOR: "[data-test='footer-player'] [class*=mediaInformation]",
      TRACK_NAME_SELECTOR: "[data-test='footer-player'] [class*=mediaInformation] [class*=mediaItemTitle]",
      TRACK_ARTIST_SELECTOR: "[data-test='footer-player'] [class*=mediaInformation] [class*=mediaArtists]",
      BTN_WRAPPER_SELECTOR: "[data-test='footer-player'] [class*=mediaActions]",
      BTN_LIKE_SELECTOR: "[data-test='footer-player'] [class*=mediaActions] [data-test='footer-context-menu']",
      PIP_BTN_SELECTOR: "NONE",
      AUDIO_SELECTOR: "NONE"
    },
    SINGER: {
      "elva hsiao": "\u8427\u4E9A\u8F69",
      "prudence liew": "\u5218\u7F8E\u541B",
      gong: "\u5BAB\u9601",
      "butterfly chien": "\u607A\u4E50",
      "gary yang": "\u6768\u745E\u4EE3",
      "ronald cheng": "\u90D1\u4E2D\u57FA",
      "janice vidal": "\u536B\u5170",
      "mavis hee": "\u8BB8\u7F8E\u9759",
      "charmaine fong": "\u65B9\u7693\u739F",
      "stephanie cheng": "\u90D1\u878D",
      "angela hui": "\u8BB8\u9756\u97F5",
      "shiga lin": "\u8FDE\u8BD7\u96C5",
      "leo ku": "\u53E4\u5DE8\u57FA",
      "hacken lee": "\u674E\u514B\u52E4",
      "jia jia": "\u5BB6\u5BB6",
      sue: "\u82CF\u8FD0\u83B9",
      "shirley chen": "\u9648\u96EA\u51DD",
      "ada zhuang": "\u5E84\u5FC3\u598D",
      "dicky cheung": "\u5F20\u536B\u5065",
      "show luo": "\u7F57\u5FD7\u7965",
      "show lo": "\u7F57\u5FD7\u7965",
      "a-mei chang": "\u5F20\u60E0\u59B9",
      "g.e.m.": "g.e.m.\u9093\u7D2B\u68CB",
      "will pan": "\u6F58\u73AE\u67CF",
      "yida huang": "\u9EC4\u4E49\u8FBE",
      "rachel liang": "\u6881\u6587\u97F3",
      "chung ha": "\u91D1\u8BF7\u590F",
      "hwa sa": "\u534E\u838E",
      "bibi zhou": "\u5468\u7B14\u7545",
      "steve chou": "\u5468\u4F20\u96C4",
      chinoyang: "\u6768\u6653\u5DDD",
      "koala liu": "\u5218\u601D\u6DB5",
      "e.so": "\u7626\u5B50e.so",
      "hebe tien": "\u7530\u99A5\u7504",
      "lala hsu": "\u5F90\u4F73\u83B9",
      "grady guan": "\u5173\u5586",
      "wu bai": "\u4F0D\u4F70",
      "kris wu": "\u5434\u4EA6\u51E1",
      "juno mak": "\u9EA6\u6D5A\u9F99",
      "ren ran": "\u4EFB\u7136",
      "yamashita tomohisa": "\u5C71\u4E0B\u667A\u4E45",
      "mirei toyama": "\u5F53\u5C71\u7F8E\u73B2",
      utada: "\u5B87\u591A\u7530\u30D2\u30AB\u30EB",
      "lee hyori": "\u674E\u5B5D\u5229",
      "lee jung-hyun": "\u674E\u8D1E\u8D24",
      "<comment>": "The following content is generated using script",
      "guo ding": "\u90ED\u9876",
      "jin wenqi": "\u91D1\u739F\u5C90",
      "zhang bichen": "\u5F20\u78A7\u6668",
      "cj fly": "CMJ",
      "mao buyi": "\u6BDB\u4E0D\u6613",
      "joker xue": "\u859B\u4E4B\u8C26",
      "hua chen yu": "\u534E\u6668\u5B87",
      "ronghao li": "\u674E\u8363\u6D69",
      kun: "\u8521\u5F90\u5764",
      "jake owen": "O.WEN",
      "xu wei": "\u8BB8\u5DCD",
      air: "\u827E\u70ED AIR",
      "hu xia": "\u80E1\u590F",
      "pu shu": "\u6734\u6811",
      "pakho chau": "\u5468\u67CF\u8C6A",
      yuan: "\u5F90\u68A6\u5706",
      "phil chang": "\u5F20\u5B87",
      "yeyts.": "YKEY",
      "ice cube": "ICE",
      "niko sun": "\u5B59\u5B50\u6DB5",
      "li jian": "\u674E\u5065",
      "hester shawty": "HEST",
      "hao yun": "\u90DD\u4E91",
      "lil yololimipu": "Lil Yo",
      "unknown mortal orchestra": "UN1K",
      "piggy and the stones": "PIggy",
      "see siang wong": "\u9EC4\u65ED",
      "gary chaw": "\u66F9\u683C",
      "vk mac": "Vk",
      "cody johnson": "Copy",
      "kenji wu": "\u5434\u514B\u7FA4",
      "seven qi": "\u9F50\u4E00",
      "sam hui": "\u8BB8\u51A0\u6770",
      "danny chan": "\u9648\u767E\u5F3A",
      "capper cartman": "Capper",
      "6ix9ine": "69",
      "my hat, it has three corners": "HAS AThree",
      "chaguma gakuen seito ichido to gakucho": "\u718A\u540C\u5B66",
      "di ma": "\u9A6C\u9814",
      "fei yu-ching": "\u8D39\u7389\u6E05",
      ilements: "ilem",
      "ricky martin": "R7CKY",
      "andy hui": "\u8BB8\u5FD7\u5B89",
      "justin lo": "\u4FA7\u7530",
      "rauw alejandro": "RA",
      meija: "Mei",
      "lil chase": "Lil Chaos",
      "roman tam": "\u7F57\u6587",
      "victor wong": "\u54C1\u51A0",
      "slim ferdy": "Slim Fey",
      "the snivelling shits": "Snigellin",
      "post malone": "PO8",
      yakuro: "Yakuri",
      "hangyu shi": "SHI HANG",
      "c.a.r.t.i": "C.A.R.L",
      zutomayo: "\u305A\u3063\u3068\u771F\u591C\u4E2D\u3067\u3044\u3044\u306E\u306B\u3002",
      "sheena ringo": "\u690E\u540D\u6797\u6A8E",
      soraru: "\u305D\u3089\u308B",
      "ramske wire": "RAM WIRE",
      "yugo kanno": "\u83C5\u91CE\u7950\u609F",
      "masaki suda": "\u83C5\u7530\u5C06\u6689",
      isubokuro: "\u3044\u3059\u307C\u304F\u308D",
      "amamiya sora": "\u96E8\u5BAE\u5929",
      "kana hanazawa": "\u82B1\u6FA4\u9999\u83DC",
      rammstein: "\u30E9\u30E0\u30B8",
      "masaru yokoyama": "\u6A2A\u5C71\u514B",
      "toshifumi hinata": "\u65E5\u5411\u6587",
      "hideaki tokunaga": "\u5FB3\u6C38\u82F1\u660E",
      "haruka tomatsu": "\u6238\u677E\u9065",
      "sawanohiroyuki[nzk]:mizuki": "SawanoHiroyuki[nZk]",
      ikimonogakari: "\u3044\u304D\u3082\u306E\u304C\u304B\u308A",
      "boku no lyric no boyomi": "\u307C\u304F\u306E\u308A\u308A\u3063\u304F\u306E\u307C\u3046\u3088\u307F",
      "valent\xEDn elizalde": "Valentin",
      "tk from ling tosite sigure": "TK from \u51DB\u3068\u3057\u3066\u6642\u96E8",
      kuroneko: "96\u732B",
      "soulja boy": "Sou",
      mpire: "mpi",
      "sara bareilles": "sAr ",
      "alyson stoner": "Alys",
      nayutalien: "\u30CA\u30E6\u30BF\u30F3\u661F\u4EBA",
      "kashitaro ito": "\u4F0A\u6771\u6B4C\u8A5E\u592A\u90CE",
      "shota shimizu": "\u6E05\u6C34\u7FD4\u592A",
      "pink floyd": "PINK",
      chomaiyo: "\u3061\u3087\u307E\u3044\u3088",
      tubakiii: "\u553E\u5947",
      "da little": "Da-little",
      umetora: "\u6885\u3068\u3089",
      panaman: "\u3071\u306A\u307E\u3093",
      minamotoya: "\u6E90\u5C4B",
      "niall horan": "Niha",
      "creedence clearwater revival": "clear",
      nissy: "Nissy(\u897F\u5CF6\u9686\u5F18)",
      "seiji igusa": "\u4E95\u8349\u8056\u4E8C",
      "masashi sada": "\u3055\u3060\u307E\u3055\u3057",
      "akiyuki tateyama": "\u7ACB\u5C71\u79CB\u822A",
      "mumford & sons": "\u5B89\u3055\u3093",
      "hiromitsu maeba": "\u524D\u99AC\u5B8F\u5145",
      tokup: "\u3068\u304FP",
      umanlivz: "uma",
      "isao tomita": "\u51A8\u7530\u52F2",
      "nikos oikonomopoulos": "oiko",
      "lili limit": " LILI LIMIT",
      "kentaro hayami": "\u3051\u3093\u305F\u308D\u3046 ",
      byebyesakurablue: "\u30CF\u309A\u30A4\u30CF\u309A\u30FC",
      "demetri martin": "Demetori",
      "wynton marsalis": "\u3069\u3093\u307E\u308B",
      "cast - frozen": "Yuki\u3068",
      motte: "\uBAA8\uD2B8",
      nanahira: "\u306A\u306A\u3072\u3089",
      "van morrison": "V",
      jid: "JIDA",
      "july talk": "July",
      bts: "BTS (\u9632\u5F39\u5C11\u5E74\u56E2)",
      sugarland: "SUGA",
      "kim jong kook": "Jung Kook",
      "blood orange": "BLOO",
      baekhyun: "\u4F2F\u8D24",
      "jimi hendrix": "Jimin",
      "high4, iu": "High4",
      rosal\u00EDa: "rosy",
      "damiano c": "Damiano",
      "chencho corleone": "Ccheng",
      "cristian castro": "Cris",
      "woody guthrie": "Woody",
      "warren g": "Warren",
      "lil barty": "LIL BART",
      baroness: "Baro",
      rythmking: "Rhythmking",
      "lee seung gi": "\u674E\u6607\u57FA",
      "my q": "My-Q",
      "kendrick lamar": "Ken",
      "keith owens iii": "Owen Keith",
      "ra.d": "\uB77C\uB514 (Ra. D)",
      "eastern roots": "East Root",
      ghostemane: "GOHO",
      "youness,6 coups mc,sofiane": "S.COUPS",
      "moonshine bandits": "Moonshine",
      "yoon young joon": "Yoon Yo",
      "george strait": "George",
      "lady gaga": "Ludy",
      "nanase aikawa": "nanase",
      "b free": "B-Free",
      ekali: "EK",
      supafriendz: "SUP.FJ",
      "lil boii kantu": "Lil Boi",
      "d.notive": "D.no",
      asten: "Astep",
      "9cigk & abycc": "9CSIG",
      "tierra whack": "TGER",
      eagles: "eaJ",
      yellowcard: "Yellow",
      "los dos carnales": "Los",
      "jaedal of legit goons": "JaeDal",
      "dj harry": "DJHarry",
      "taylor swift": "Taylor",
      "jae youn": "\uC7AC\uC5F0",
      "erik eriksson": "Erik",
      xxxtentacion: "x_x",
      "isaac dunbar": "Isaac",
      deponyz: "Depo",
      meitei: "Meimei",
      "mike.": "Mike",
      "the isan project": "IS Project",
      owol: "\uC624\uC6D4 (Owol)",
      azchike: "Az",
      "davood behboodi": "DAVOO"
    }
  };

  // src/page/config.ts
  var currentPlatform = (() => {
    const { host } = location;
    if (host.includes("youtube"))
      return "YOUTUBE";
    if (host.includes("deezer"))
      return "DEEZER";
    if (host.includes("tidal"))
      return "TIDAL";
    if (host.includes("apple"))
      return "APPLE";
    return "SPOTIFY";
  })();
  async function getConfig() {
    let result = config_default;
    if (isProd) {
      try {
        result = await request(
          `https://raw.githubusercontent.com/mantou132/Spotify-Lyrics/master/src/page/config.json?t=${Date.now()}`
        );
      } catch {
      }
    }
    return currentPlatform === "SPOTIFY" ? result : Object.assign(result, result[currentPlatform]);
  }
  var configPromise = getConfig();
  var localConfig = (() => {
    const LYRICS_CLASSNAME = "extension-lyrics-button";
    const LYRICS_ACTIVE_CLASSNAME = "active";
    const microphoneIconUrl = getSVGDataUrl(svg`
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12">
      <path d="M5.663 4.25l2.138 2.138-4.702 3.847-1.283-1.282L5.663 4.25zM1.389 9.735l.855.855-.855.427-.427-.427.427-.855zM6.09 3.396a2.565 2.565 0 1 1 2.566 2.565L6.09 3.396z">
      </path>
    </svg>
  `);
    switch (currentPlatform) {
      case "YOUTUBE": {
        const iconUrl = getSVGDataUrl(svg`
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48" fill="white" width="48px" height="48px">
          <path d="M11.85 38.65q-1.1 0-1.8-.7t-.7-1.8v-8.3q0-1.1.725-1.85t1.775-.75q1.1 0 1.85.75t.75 1.85v8.3q0 1.1-.75 1.8t-1.85.7Zm12.15 0q-1.1 0-1.8-.7t-.7-1.8v-24.3q0-1.1.725-1.85T24 9.25q1.1 0 1.85.75t.75 1.85v24.3q0 1.1-.75 1.8t-1.85.7Zm12.15 0q-1.1 0-1.8-.7t-.7-1.8v-14.3q0-1.1.725-1.85t1.775-.75q1.1 0 1.85.75t.75 1.85v14.3q0 1.1-.75 1.8t-1.85.7Z"/>
        </svg>
      `);
        return {
          SERVICE_WORKER: "",
          STATIC_STYLE: css`
          yt-bubble-hint-renderer {
            display: none !important;
          }
          ytmusic-player {
            --ytmusic-mini-player-height: 0px !important;
          }
          .${LYRICS_CLASSNAME} {
            margin-left: var(--ytmusic-like-button-renderer-button-spacing, 8px);
          }
          .${LYRICS_CLASSNAME} .yt-spec-button-shape-next__icon {
            background: var(--ytmusic-text-secondary);
            transform: rotate(90deg) scale(1.1);
            -webkit-mask: url(${iconUrl}) center / 100% no-repeat;
            mask: url(${iconUrl}) center / 100% no-repeat;
          }
          .${LYRICS_CLASSNAME}.${LYRICS_ACTIVE_CLASSNAME} .yt-spec-button-shape-next__icon {
            background: var(--ytmusic-text-primary);
          }
        `,
          NO_PIP_STYLE: "",
          LYRICS_CLASSNAME,
          LYRICS_ACTIVE_CLASSNAME
        };
      }
      case "DEEZER": {
        return {
          SERVICE_WORKER: "",
          STATIC_STYLE: css`
          .page-topbar + div [data-testid='conversionBanner'],
          [data-testid='alert-StreamingNotAllowed'],
          .ads {
            display: none !important;
          }
          .${LYRICS_CLASSNAME} {
            order: 100;
          }
          .${LYRICS_CLASSNAME} svg path {
            display: none;
          }
          .${LYRICS_CLASSNAME} svg {
            background: var(--text-primary);
            -webkit-mask: url(${microphoneIconUrl}) center / 66.7% no-repeat;
            mask: url(${microphoneIconUrl}) center / 66.7% no-repeat;
          }
          .${LYRICS_CLASSNAME}.${LYRICS_ACTIVE_CLASSNAME} svg {
            background: var(--color-accent);
          }
        `,
          NO_PIP_STYLE: "",
          LYRICS_CLASSNAME,
          LYRICS_ACTIVE_CLASSNAME
        };
      }
      case "APPLE": {
        return {
          SERVICE_WORKER: "",
          STATIC_STYLE: css`
          /* logo */
          .navigation__header .logo,
          /* nav native links */
          .navigation__native-cta,
          /* page footer */
          footer,
          /* footer banner */
          cwc-music-upsell-banner-web {
            display: none !important;
          }
        `,
          BTN_CONTAINER_STYLE: css`
          .${LYRICS_CLASSNAME} {
            --playback-control-button-width: var(--shuffle-repeat-button-width, 32px);
            --playback-control-icon-height: var(--shuffle-repeat-icon-height, 28px);
            appearance: none;
            width: var(--playback-control-button-width, 30px);
            height: var(--playback-control-button-height, 30px);
            display: flex;
            flex: 0 0 auto;
            align-items: stretch;
            justify-content: stretch;
            position: relative;
            font-size: 0;
            border: none;
            padding: 0;
            background: var(--systemSecondary);
            -webkit-mask: url(${microphoneIconUrl}) center / 45% no-repeat;
            mask: url(${microphoneIconUrl}) center / 45% no-repeat;
          }
          .${LYRICS_CLASSNAME} * {
            display: none;
          }
          .${LYRICS_CLASSNAME}.${LYRICS_ACTIVE_CLASSNAME} {
            background: var(--keyColor, var(--musicKeyColor, var(--systemBlue)));
          }
        `,
          NO_PIP_STYLE: "",
          LYRICS_CLASSNAME,
          LYRICS_ACTIVE_CLASSNAME,
          USE_AUDIO_SELECTOR: true
        };
      }
      case "TIDAL": {
        return {
          SERVICE_WORKER: "",
          STATIC_STYLE: css`
          .${LYRICS_CLASSNAME} svg path {
            display: none;
          }
          .${LYRICS_CLASSNAME} svg {
            background: currentColor;
            -webkit-mask: url(${microphoneIconUrl}) center / 75% no-repeat;
            mask: url(${microphoneIconUrl}) center / 75% no-repeat;
          }
          .${LYRICS_CLASSNAME}.${LYRICS_ACTIVE_CLASSNAME} svg {
            background: #0ff;
          }
        `,
          NO_PIP_STYLE: "",
          LYRICS_CLASSNAME,
          LYRICS_ACTIVE_CLASSNAME
        };
      }
      default: {
        return {
          SERVICE_WORKER: "https://open.spotify.com/service-worker.js",
          STATIC_STYLE: css`
          /* not logged in, cookie banner */
          #onetrust-consent-sdk,
          /* webpage: upgrade button */
          .Root #global-nav-bar [data-testid="upgrade-button"],
          /* webpage: download link */
          .Root #global-nav-bar [href*=download] {
            display: none;
          }
          .${LYRICS_CLASSNAME} {
            order: 100;
          }
          .${LYRICS_CLASSNAME} svg {
            fill: transparent;
            background: var(--text-subdued, rgb(106, 106, 106));
            -webkit-mask: url(${microphoneIconUrl}) center / 100% no-repeat;
            mask: url(${microphoneIconUrl}) center / 100% no-repeat;
          }
          .${LYRICS_CLASSNAME}.${LYRICS_ACTIVE_CLASSNAME} svg {
            background: var(--text-bright-accent, rgb(17, 122, 55));
          }
        `,
          // hidden album expand button
          NO_PIP_STYLE: css`
          [role='contentinfo'] > div:nth-child(1) > button {
            display: none;
          }
        `,
          LYRICS_CLASSNAME,
          LYRICS_ACTIVE_CLASSNAME
        };
      }
    }
  })();

  // node_modules/@mantou/gem/lib/utils.js
  var __classPrivateFieldGet = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var __classPrivateFieldSet = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var _LinkedList_instances;
  var _LinkedList_map;
  var _LinkedList_firstItem;
  var _LinkedList_lastItem;
  var _LinkedList_delete;
  var _QueryString_stringify;
  var _QueryString_parse;
  var microtaskSet = /* @__PURE__ */ new Set();
  function addMicrotask(func) {
    if (typeof func !== "function")
      return;
    if (!microtaskSet.size) {
      globalThis.queueMicrotask(() => {
        microtaskSet.forEach((func2) => func2());
        microtaskSet.clear();
      });
    }
    microtaskSet.delete(func);
    microtaskSet.add(func);
  }
  function addListener(target, type, listener, options2) {
    target.addEventListener(type, listener, options2);
    return () => target.removeEventListener(type, listener, options2);
  }
  var LinkedList = class extends EventTarget {
    constructor() {
      super(...arguments);
      _LinkedList_instances.add(this);
      _LinkedList_map.set(this, /* @__PURE__ */ new Map());
      _LinkedList_firstItem.set(this, void 0);
      _LinkedList_lastItem.set(this, void 0);
    }
    get size() {
      return __classPrivateFieldGet(this, _LinkedList_map, "f").size;
    }
    get first() {
      return __classPrivateFieldGet(this, _LinkedList_firstItem, "f");
    }
    get last() {
      return __classPrivateFieldGet(this, _LinkedList_lastItem, "f");
    }
    isSuperLinkOf(subLink) {
      let subItem = subLink.first;
      if (!subItem)
        return true;
      let item = this.find(subItem.value);
      while (item && item.value === subItem.value) {
        subItem = subItem.next;
        if (!subItem)
          return true;
        item = item.next;
      }
      return false;
    }
    find(value) {
      return __classPrivateFieldGet(this, _LinkedList_map, "f").get(value);
    }
    // 添加到尾部，已存在时会删除老的项目
    // 如果是添加第一个，start 事件会在添加前触发，避免处理事件重复的逻辑
    add(value) {
      if (!__classPrivateFieldGet(this, _LinkedList_lastItem, "f")) {
        this.dispatchEvent(new CustomEvent("start"));
      }
      const item = __classPrivateFieldGet(this, _LinkedList_instances, "m", _LinkedList_delete).call(this, value) || { value };
      item.prev = __classPrivateFieldGet(this, _LinkedList_lastItem, "f");
      if (item.prev) {
        item.prev.next = item;
      }
      item.next = void 0;
      __classPrivateFieldSet(this, _LinkedList_lastItem, item, "f");
      if (!__classPrivateFieldGet(this, _LinkedList_firstItem, "f")) {
        __classPrivateFieldSet(this, _LinkedList_firstItem, item, "f");
      }
      __classPrivateFieldGet(this, _LinkedList_map, "f").set(value, item);
    }
    // 删除这个元素后没有其他元素时立即出发 end 事件
    delete(value) {
      const deleteItem = __classPrivateFieldGet(this, _LinkedList_instances, "m", _LinkedList_delete).call(this, value);
      if (!__classPrivateFieldGet(this, _LinkedList_firstItem, "f")) {
        this.dispatchEvent(new CustomEvent("end"));
      }
      return deleteItem;
    }
    // 获取头部元素
    // 会从链表删除
    get() {
      const firstItem = __classPrivateFieldGet(this, _LinkedList_firstItem, "f");
      if (!firstItem)
        return;
      this.delete(firstItem.value);
      return firstItem.value;
    }
  };
  _LinkedList_map = /* @__PURE__ */ new WeakMap(), _LinkedList_firstItem = /* @__PURE__ */ new WeakMap(), _LinkedList_lastItem = /* @__PURE__ */ new WeakMap(), _LinkedList_instances = /* @__PURE__ */ new WeakSet(), _LinkedList_delete = function _LinkedList_delete2(value) {
    const existItem = __classPrivateFieldGet(this, _LinkedList_map, "f").get(value);
    if (existItem) {
      if (existItem.prev) {
        existItem.prev.next = existItem.next;
      } else {
        __classPrivateFieldSet(this, _LinkedList_firstItem, existItem.next, "f");
      }
      if (existItem.next) {
        existItem.next.prev = existItem.prev;
      } else {
        __classPrivateFieldSet(this, _LinkedList_lastItem, existItem.prev, "f");
      }
      __classPrivateFieldGet(this, _LinkedList_map, "f").delete(value);
    }
    return existItem;
  };
  var PropProxyMap = class extends WeakMap {
    get(ele) {
      let proxy = super.get(ele);
      if (!proxy) {
        proxy = {};
        this.set(ele, proxy);
      }
      return proxy;
    }
  };
  _QueryString_stringify = /* @__PURE__ */ new WeakMap(), _QueryString_parse = /* @__PURE__ */ new WeakMap();
  var SheetToken = Symbol.for("gem@sheetToken");
  function randomStr(len = 5) {
    const str = Math.random().toString(36).slice(2).slice(0, len);
    if (str.length < len)
      return str + randomStr(len - str.length);
    return str;
  }
  function camelToKebabCase(str) {
    return str.replace(/[A-Z]/g, ($1) => "-" + $1.toLowerCase());
  }
  function kebabToCamelCase(str) {
    return str.replace(/-(.)/g, (_substr, $1) => $1.toUpperCase());
  }
  var GemError = class extends Error {
    constructor(msg) {
      super(msg);
      this.message = `gem: ${this.message}`;
    }
  };
  function isArrayChange(newValues, oldValues) {
    const length = newValues.length;
    if (oldValues.length !== length)
      return true;
    for (let i = 0; i < length; i++) {
      if (newValues[i] !== oldValues[i])
        return true;
    }
    return false;
  }
  function removeItems(target, items) {
    const set = new Set(items);
    return target.filter((e) => {
      if (set.has(e)) {
        set.delete(e);
        return false;
      }
      return true;
    });
  }

  // node_modules/duoyun-ui/lib/cache.js
  var __classPrivateFieldSet2 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var __classPrivateFieldGet2 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var _Cache_instances;
  var _Cache_max;
  var _Cache_maxAge;
  var _Cache_renewal;
  var _Cache_map;
  var _Cache_reverseMap;
  var _Cache_linkedList;
  var _Cache_trim;
  var Cache = class {
    constructor({ max = Infinity, maxAge = Infinity, renewal = false } = {}) {
      _Cache_instances.add(this);
      _Cache_max.set(this, void 0);
      _Cache_maxAge.set(this, void 0);
      _Cache_renewal.set(this, void 0);
      _Cache_map.set(this, /* @__PURE__ */ new Map());
      _Cache_reverseMap.set(this, /* @__PURE__ */ new Map());
      _Cache_linkedList.set(this, new LinkedList());
      __classPrivateFieldSet2(this, _Cache_max, max, "f");
      __classPrivateFieldSet2(this, _Cache_maxAge, maxAge, "f");
      __classPrivateFieldSet2(this, _Cache_renewal, renewal, "f");
    }
    set(key, value) {
      __classPrivateFieldGet2(this, _Cache_linkedList, "f").add(value);
      __classPrivateFieldGet2(this, _Cache_reverseMap, "f").set(value, key);
      __classPrivateFieldGet2(this, _Cache_map, "f").set(key, { value, timestamp: Date.now() });
      __classPrivateFieldGet2(this, _Cache_instances, "m", _Cache_trim).call(this);
      return value;
    }
    get(key, init) {
      const cache = __classPrivateFieldGet2(this, _Cache_map, "f").get(key);
      if (!cache) {
        return init && this.set(key, init(key));
      }
      const { timestamp, value } = cache;
      if (Date.now() - timestamp > __classPrivateFieldGet2(this, _Cache_maxAge, "f")) {
        __classPrivateFieldGet2(this, _Cache_linkedList, "f").delete(value);
        __classPrivateFieldGet2(this, _Cache_reverseMap, "f").delete(value);
        __classPrivateFieldGet2(this, _Cache_map, "f").delete(key);
        return init && this.set(key, init(key));
      }
      if (__classPrivateFieldGet2(this, _Cache_renewal, "f")) {
        cache.timestamp = Date.now();
      }
      __classPrivateFieldGet2(this, _Cache_linkedList, "f").get();
      __classPrivateFieldGet2(this, _Cache_linkedList, "f").add(value);
      return value;
    }
  };
  _Cache_max = /* @__PURE__ */ new WeakMap(), _Cache_maxAge = /* @__PURE__ */ new WeakMap(), _Cache_renewal = /* @__PURE__ */ new WeakMap(), _Cache_map = /* @__PURE__ */ new WeakMap(), _Cache_reverseMap = /* @__PURE__ */ new WeakMap(), _Cache_linkedList = /* @__PURE__ */ new WeakMap(), _Cache_instances = /* @__PURE__ */ new WeakSet(), _Cache_trim = function _Cache_trim2() {
    for (let i = __classPrivateFieldGet2(this, _Cache_linkedList, "f").size - __classPrivateFieldGet2(this, _Cache_max, "f"); i > 0; i--) {
      const value = __classPrivateFieldGet2(this, _Cache_linkedList, "f").get();
      const key = __classPrivateFieldGet2(this, _Cache_reverseMap, "f").get(value);
      __classPrivateFieldGet2(this, _Cache_reverseMap, "f").delete(value);
      __classPrivateFieldGet2(this, _Cache_map, "f").delete(key);
    }
  };

  // src/page/lyrics.ts
  var import_chinese_conv = __toESM(require_dist());

  // src/page/options.ts
  var options = {};
  var optionsPromise = new Promise((res) => {
    window.postMessage({ type: 100004 /* GET_OPTIONS */ }, "*");
    window.addEventListener("message", async ({ data }) => {
      const msg = data;
      if (msg?.type === 100005 /* SEND_OPTIONS */) {
        Object.assign(options, msg.data);
        res(options);
        const style = await appendStyle(localConfig.NO_PIP_STYLE);
        if (options["show-on"] === "pip" && document.pictureInPictureEnabled) {
          style.remove();
        }
      }
    });
  });

  // src/page/lrclib.ts
  var API_HOST = `https://lrclib.net/api`;
  var LRCLIB_ID_TOKEN = 0.1;
  async function fetchLRCLIBSongList(s, fetchOptions) {
    const searchQuery = new URLSearchParams({ q: s });
    const fetchPromise = request(
      `${API_HOST}/search?${searchQuery}`,
      fetchOptions
    );
    const list = await fetchPromise;
    return list.filter((e) => !!e.syncedLyrics).map((e) => ({
      album: { name: e.albumName },
      artists: e.artistName.split(",").map((name) => ({ name, alias: [] })),
      id: e.id + LRCLIB_ID_TOKEN,
      name: e.trackName,
      duration: e.duration * 1e3
    }));
  }
  async function fetchLRCLIBLyric(songId, fetchOptions) {
    const { syncedLyrics = "" } = await request(
      `${API_HOST}/get/${songId}`,
      fetchOptions
    );
    return { lrc: { lyric: syncedLyrics } };
  }

  // src/page/netease.ts
  async function fetchNetEaseChineseName(s, fetchOptions) {
    const { API_HOST: API_HOST4 } = await configPromise;
    const searchQuery = new URLSearchParams({
      keywords: s,
      type: "100",
      limit: "100"
    });
    return request(`${API_HOST4}/search?${searchQuery}`, fetchOptions);
  }
  var down = 0;
  async function fetchNetEaseSongList(s, fetchOptions) {
    if (down > 3)
      return fetchLRCLIBSongList(s, fetchOptions);
    const { API_HOST: API_HOST4 } = await configPromise;
    const searchQuery = new URLSearchParams({
      keywords: s,
      type: "1",
      limit: "100"
    });
    try {
      const res = await request(`${API_HOST4}/search?${searchQuery}`, fetchOptions);
      return res.result?.songs || [];
    } catch (err) {
      down++;
      return fetchLRCLIBSongList(s, fetchOptions);
    }
  }
  async function fetchNetEaseLyric(songId, fetchOptions) {
    const { API_HOST: API_HOST4 } = await configPromise;
    return request(`${API_HOST4}/lyric?${new URLSearchParams({ id: String(songId) })}`, fetchOptions);
  }

  // src/page/lyrics.ts
  var normalize = (s, emptySymbol = true) => {
    const result = s.replace(/（/g, "(").replace(/）/g, ")").replace(/【/g, "[").replace(/】/g, "]").replace(/。/g, ". ").replace(/；/g, "; ").replace(/：/g, ": ").replace(/？/g, "? ").replace(/！/g, "! ").replace(/、|，/g, ", ").replace(/‘|’|′|＇/g, "'").replace(/“|”/g, '"').replace(/〜/g, "~").replace(/·|・/g, "\u2022");
    if (emptySymbol) {
      result.replace(/-/g, " ").replace(/\//g, " ");
    }
    return result.replace(/\s+/g, " ").trim();
  };
  var plainText = (s) => {
    return s.replace(/[\(\)\[\]\-.,?!:'"~]/g, " ").replace(/((\p{sc=Han}|\p{sc=Katakana}|\p{sc=Hiragana}|\p{sc=Hang})+)/gu, " $1 ").replace(/\s+/g, " ").trim();
  };
  var ignoreAccented = (s) => {
    return s.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  };
  var simplifiedText = (s) => {
    return ignoreAccented(plainText((0, import_chinese_conv.sify)(normalize(s)).toLowerCase()));
  };
  var removeSongFeat = (s) => {
    return s.replace(/-\s+\d*\s*remaster(ed)?\s*\d*/, "").replace(/-\s+(feat|with).*/i, "").replace(/(\(|\[)(feat|with)\.?\s+.*(\)|\])$/i, "").trim() || s;
  };
  var getText = (s) => {
    return s.replace(/\(.*?\)|\[.*?\]|\sremix$|\sversion$/gi, " ").replace(/\s+/g, " ").trim();
  };
  var buildInSingerAliasPromise = new Promise(async (resolve) => {
    const { SINGER } = await configPromise;
    resolve(
      Object.keys(SINGER).reduce(
        (p, v) => {
          p[simplifiedText(v)] = SINGER[v];
          return p;
        },
        {}
      )
    );
  });
  async function fetchChineseName(s, fetchOptions) {
    const singerAlias = {};
    try {
      const { result } = await fetchNetEaseChineseName(s, fetchOptions);
      const artists = result?.artists || [];
      artists.forEach((artist) => {
        const alias = [...artist.alias, ...artist.transNames || []].map(simplifiedText).sort();
        alias.forEach((n) => {
          if (s.includes(n)) {
            singerAlias[n] = artist.name;
          }
        });
      });
    } catch {
    }
    return singerAlias;
  }
  async function matchingLyrics(query, options2 = {}) {
    const { name = "", artists = "" } = query;
    const {
      onlySearchName = false,
      fetchTransName = fetchChineseName,
      fetchSongList: fetchSongList2 = fetchNetEaseSongList,
      getDuration,
      fetchOptions
    } = options2;
    const duration = await getDuration?.() || 0;
    const queryName = normalize(name);
    const queryName1 = queryName.toLowerCase();
    const queryName2 = (0, import_chinese_conv.sify)(queryName1);
    const queryName3 = plainText(queryName2);
    const queryName4 = ignoreAccented(queryName3);
    const queryName5 = removeSongFeat(queryName4);
    const queryName6 = getText(removeSongFeat(ignoreAccented(queryName2)));
    const queryArtistsArr = artists.split(",").map((e) => normalize(e.trim())).sort();
    const queryArtistsArr1 = queryArtistsArr.map((e) => e.toLowerCase());
    const queryArtistsArr2 = queryArtistsArr1.map((e) => (0, import_chinese_conv.sify)(e));
    const queryArtistsArr3 = queryArtistsArr2.map((e) => ignoreAccented(plainText(e)));
    const singerAlias = await fetchTransName(
      queryArtistsArr.map(simplifiedText).join(),
      fetchOptions
    );
    const buildInSingerAlias = await buildInSingerAliasPromise;
    const queryArtistsArr4 = queryArtistsArr3.map((e) => singerAlias[e] || buildInSingerAlias[e] || e).map((e) => (0, import_chinese_conv.sify)(e).toLowerCase());
    const searchString = onlySearchName ? removeSongFeat(name) : `${queryArtistsArr4.join()} ${removeSongFeat(name)}`;
    const songs = await fetchSongList2(searchString, fetchOptions);
    const list = [];
    const listIdSet = /* @__PURE__ */ new Set();
    let id = 0;
    let score = 0;
    songs.forEach((song) => {
      const DURATION_WEIGHT = 10;
      let currentScore = 0;
      if (!duration || !isProd && duration < 40 || !song.duration || Math.abs(duration - song.duration / 1e3) < 2) {
        currentScore += DURATION_WEIGHT;
      }
      let songName = normalize(song.name);
      if (songName === queryName) {
        currentScore += 10;
      } else {
        songName = songName.toLowerCase();
        if (songName === queryName1) {
          currentScore += 9.1;
        } else {
          songName = (0, import_chinese_conv.sify)(songName);
          if (songName === queryName2 || songName.endsWith(`(${queryName2})`) || queryName2.endsWith(`(${songName})`)) {
            currentScore += 9;
          } else {
            songName = plainText(songName);
            if (songName === queryName3) {
              currentScore += 8.2;
            } else {
              songName = ignoreAccented(songName);
              if (songName === queryName4) {
                currentScore += 8.1;
              } else {
                songName = removeSongFeat(songName);
                if (songName === queryName5) {
                  currentScore += 8;
                } else {
                  songName = getText(
                    // without `plainText`
                    removeSongFeat(ignoreAccented((0, import_chinese_conv.sify)(normalize(song.name).toLowerCase())))
                  );
                  if (songName === queryName6) {
                    currentScore += 7;
                  } else if (songName.startsWith(queryName6) || queryName6.startsWith(songName)) {
                    currentScore += 6;
                  } else if (songName.includes(queryName6) || queryName6.includes(songName)) {
                    currentScore += 3;
                  }
                }
              }
            }
          }
        }
      }
      let songArtistsArr = song.artists.map((e) => normalize(e.name)).sort();
      const len = queryArtistsArr.length + songArtistsArr.length;
      if (queryArtistsArr.join() === songArtistsArr.join()) {
        currentScore += 6;
      } else {
        songArtistsArr = songArtistsArr.map((e) => e.toLowerCase());
        if (queryArtistsArr1.join() === songArtistsArr.join() || queryArtistsArr4.join() === songArtistsArr.join()) {
          currentScore += 5.5;
        } else if ((/* @__PURE__ */ new Set([...queryArtistsArr1, ...songArtistsArr])).size < len) {
          currentScore += 5.4;
        } else {
          songArtistsArr = songArtistsArr.map((e) => (0, import_chinese_conv.sify)(e));
          if (queryArtistsArr2.join() === songArtistsArr.join()) {
            currentScore += 5.3;
          } else {
            songArtistsArr = songArtistsArr.map((e) => ignoreAccented(plainText(e)));
            if (queryArtistsArr3.join() === songArtistsArr.join()) {
              currentScore += 5.1;
            } else {
              if ((/* @__PURE__ */ new Set([...queryArtistsArr2, ...songArtistsArr])).size < len || (/* @__PURE__ */ new Set([...queryArtistsArr4, ...songArtistsArr])).size < len) {
                currentScore += 5;
              } else {
                songArtistsArr = songArtistsArr.map((e) => getText(e));
                if (songArtistsArr.some(
                  (artist) => queryName2.includes(artist) || queryArtistsArr2.join().includes(artist) || queryArtistsArr4.join().includes(artist)
                )) {
                  currentScore += 3;
                }
              }
            }
          }
        }
      }
      if (currentScore > score) {
        if (currentScore > 10 + DURATION_WEIGHT) {
          id = song.id;
        }
        score = currentScore;
      }
      if (currentScore > 0) {
        list.push(song);
        listIdSet.add(song.id);
      }
    });
    if (!onlySearchName) {
      const {
        id: idForMissingName,
        list: listForMissingName,
        score: scoreForMissingName
      } = await matchingLyrics(query, {
        onlySearchName: true,
        fetchTransName: async () => singerAlias,
        getDuration,
        fetchSongList: fetchSongList2,
        fetchOptions
      });
      listForMissingName.forEach((song) => {
        if (!listIdSet.has(song.id)) {
          list.push(song);
        }
      });
      const resultId = scoreForMissingName > score ? idForMissingName : id;
      const resultScore = Math.max(scoreForMissingName, score);
      return { id: resultId, list, score: resultScore };
    }
    return { id, list, score };
  }
  async function fetchLyric(songId, fetchOptions) {
    const id = Math.floor(songId);
    const token = Math.round(songId % 1 * 10) / 10;
    const get = () => {
      switch (token) {
        case LRCLIB_ID_TOKEN:
          return fetchLRCLIBLyric(id, fetchOptions);
        default:
          return fetchNetEaseLyric(id, fetchOptions);
      }
    };
    const { lrc, tlyric } = await get();
    const options2 = await optionsPromise;
    return options2["lyrics-transform"] === "Simplified" && tlyric?.lyric || lrc?.lyric || "";
  }
  var Line = class {
    constructor(text = "", starTime = null) {
      /**sec */
      this.startTime = null;
      this.text = "";
      this.startTime = starTime;
      this.text = text;
    }
  };
  function capitalize(s) {
    return s.replace(/^(\w)/, ($1) => $1.toUpperCase());
  }
  function tryParseTimeStr(str) {
    const [key, value] = str?.split(":") || [];
    const [min, sec] = [parseFloat(key), parseFloat(value)];
    return { key, value, time: min * 60 + sec };
  }
  function parseLyrics(lyricStr, options2 = {}) {
    if (!lyricStr)
      return null;
    const otherInfoKeys = [
      "\u4F5C?\\s*\u8BCD|\u4F5C?\\s*\u66F2|\u7F16\\s*\u66F2?|\u76D1\\s*\u5236?",
      ".*\u7F16\u5199|.*\u548C\u97F3|.*\u548C\u58F0|.*\u5408\u58F0|.*\u63D0\u7434|.*\u5F55|.*\u5DE5\u7A0B|.*\u5DE5\u4F5C\u5BA4|.*\u8BBE\u8BA1|.*\u526A\u8F91|.*\u5236\u4F5C|.*\u53D1\u884C|.*\u51FA\u54C1|.*\u540E\u671F|.*\u6DF7\u97F3|.*\u7F29\u6DF7",
      "\u6BCD\u5E26|\u539F\u5531|\u7FFB\u5531|\u9898\u5B57|\u6587\u6848|\u6D77\u62A5|\u53E4\u7B5D|\u4E8C\u80E1|\u94A2\u7434|\u5409\u4ED6|\u8D1D\u65AF|\u7B1B\u5B50|\u9F13|\u5F26\u4E50",
      "lrc|publish|vocal|guitar|program|produce|write"
    ];
    const otherInfoRegexp = new RegExp(`^(${otherInfoKeys.join("|")}).*(:|\uFF1A)`, "i");
    const lines = lyricStr.split(/\r?\n/).map((line) => line.trim());
    const lyrics = lines.map((line) => {
      const matchResult = line.match(/(\[.*?\])|([^\[\]]+)/g) || [line];
      const textIndex = matchResult.findIndex((slice) => !slice.endsWith("]"));
      let text = "";
      if (textIndex > -1) {
        text = matchResult.splice(textIndex, 1)[0];
        text = capitalize(normalize(text, false));
        text = text.replace(/\.|,|\?|!|;$/u, "");
      }
      if (!matchResult.length && options2.keepPlainText) {
        return [new Line(text)];
      }
      return matchResult.map((slice) => {
        const result = new Line();
        const matchResult2 = slice.match(/[^\[\]]+/g);
        const { key, value, time: time2 } = tryParseTimeStr(matchResult2?.[0]);
        if (!isNaN(time2)) {
          if (!options2.cleanLyrics || !otherInfoRegexp.test(text)) {
            result.startTime = time2;
            switch (options2.lyricsTransform) {
              case "Simplified": {
                result.text = (0, import_chinese_conv.sify)(text);
                break;
              }
              case "Traditional": {
                result.text = (0, import_chinese_conv.tify)(text);
                break;
              }
              default:
                result.text = text;
                break;
            }
          }
        } else if (!options2.cleanLyrics && key && value) {
          result.text = `${key.toUpperCase()}: ${value}`;
        }
        return result;
      });
    }).flat().sort((a, b) => {
      if (a.startTime === null) {
        return 0;
      }
      if (b.startTime === null) {
        return 1;
      }
      return a.startTime - b.startTime;
    }).filter(({ text }, index, arr) => {
      if (index === 0) {
        if (text === "") {
          return false;
        }
      } else {
        const prevEle = arr[index - 1];
        if (prevEle.text === text && text === "") {
          return false;
        }
      }
      return true;
    });
    return lyrics.length ? lyrics : null;
  }
  function correctionLyrics(lyrics, str) {
    if (!lyrics)
      return lyrics;
    const normalizeStr = normalize(str, false);
    const regularization = (s) => new RegExp(
      normalize(s, false).toLowerCase().replace(/\./g, "\\.").replace(/\*/g, ".").replace(/\(/g, "\\(").replace(/\)/g, "\\)").replace(/\[/g, "\\[").replace(/\]/g, "\\]"),
      "i"
    );
    return lyrics.map(({ startTime, text }) => {
      let match = null;
      if (text.replace(/\*/g, "").length > 5) {
        try {
          match = normalizeStr.match(regularization(text));
        } catch {
        }
      }
      return {
        startTime,
        text: capitalize(match?.[0] || text)
      };
    });
  }

  // src/page/genius.ts
  var API_HOST2 = "https://files.xianqiao.wang/https://api.genius.com";
  var TOKEN = "jjffIV35KV6yy1XYK1lDAdOjVmQX7Pf4MApr2-1Kmw4Sh6gJilaFEDsmv3VkBiWA";
  async function fetchSongList(q, fetchOptions) {
    const searchQuery = new URLSearchParams({ q, access_token: TOKEN });
    const { response } = await request(
      `${API_HOST2}/search?${searchQuery}`,
      fetchOptions
    );
    if (!response?.hits)
      return [];
    return response.hits.filter((e) => e.type === "song").map(({ result }) => {
      return {
        id: result.id,
        name: result.title,
        artists: [
          {
            name: result.primary_artist.name,
            alias: []
          }
        ],
        album: { name: "" }
      };
    });
  }
  var domParser = new DOMParser();
  async function fetchGeniusLyrics(songId, fetchOptions) {
    try {
      const html2 = await request(
        `https://files.xianqiao.wang/https://genius.com/songs/${songId}`,
        fetchOptions
      );
      const doc = domParser.parseFromString(html2, "text/html");
      const lyricsEle = doc.querySelector(".lyrics");
      if (!lyricsEle) {
        throw new Error("Not found genius lyrics element");
      }
      const text = lyricsEle.innerText;
      const highlights = [...lyricsEle.querySelectorAll("a")].map((e) => e.innerText.replace(/\.?\n/g, ". ").trim()).filter((e) => e.length > 30);
      return { text, highlights: highlights.length ? highlights : null };
    } catch {
      return { text: "", highlights: null };
    }
  }

  // src/page/store.ts
  var API_HOST3 = "https://files.xianqiao.wang/https://us-central1-spotify-lyrics-ef482.cloudfunctions.net";
  async function fetchData(pathname, params, fetchOptions) {
    return await request(`${API_HOST3}${pathname}`, {
      method: "post",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(params),
      ...fetchOptions
    });
  }
  async function getSong(data, fetchOptions) {
    const { cid } = await optionsPromise;
    const res = await fetchData(
      "/getLyric",
      {
        name: data.name,
        artists: data.artists,
        user: cid,
        platform: currentPlatform
      },
      fetchOptions
    );
    return res.data;
  }
  async function setSong(data) {
    const { cid } = await optionsPromise;
    await fetchData("/setLyric", {
      name: data.name,
      artists: data.artists,
      neteaseID: data.id,
      lyric: data.lyric,
      user: cid,
      platform: currentPlatform
    });
  }

  // src/page/share-data.ts
  var cacheStore = new Cache({ max: 100, renewal: true });
  var getCache = (name, artists) => {
    return cacheStore.get([name, artists].join(), () => {
      let _resolveDuration = (_) => {
      };
      const _durationPromise = new Promise((res) => _resolveDuration = res);
      return {
        name,
        artists,
        resolveDuration: _resolveDuration,
        durationPromise: _durationPromise,
        getLyrics: async () => ""
      };
    });
  };
  var SharedData = class {
    constructor() {
      // Popup data
      this._name = "";
      this._artists = "";
      this._id = 0;
      this._aId = 0;
      this._list = [];
      // PIP data
      this._text = "";
      this._highlightLyrics = [];
      // length 0 is loading
      // null is no lyrics
      this._lyrics = [];
      this._error = null;
      this._abortController = new AbortController();
    }
    get cd1() {
      return `${this._name} - ${this._artists}`;
    }
    get cd2() {
      return `${this._id}`;
    }
    get req() {
      return { name: this._name, artists: this._artists };
    }
    get text() {
      return this._text;
    }
    get highlightLyrics() {
      return this._highlightLyrics;
    }
    get lyrics() {
      return this._lyrics;
    }
    get error() {
      return this._error;
    }
    get name() {
      return this._name;
    }
    get artists() {
      return this._artists;
    }
    setLyrics(lyrics) {
      this._lyrics = lyrics && [...lyrics];
    }
    _cancelRequest() {
      this._abortController.abort();
      this._abortController = new AbortController();
    }
    _resetLyrics() {
      this._lyrics = [];
      this._error = null;
      this._cancelRequest();
    }
    resetData() {
      this._resetLyrics();
      this._id = 0;
      this._name = "";
      this._artists = "";
      this._aId = 0;
      this._list = [];
      this._text = "";
      this._highlightLyrics = [];
    }
    async _getParseLyricsOptions() {
      const options2 = await optionsPromise;
      return {
        cleanLyrics: options2["clean-lyrics"] === "on",
        lyricsTransform: options2["lyrics-transform"]
      };
    }
    async _getLyricsFromAPI(fetchOptions) {
      if (this._id === 0) {
        return null;
      }
      const options2 = await optionsPromise;
      const lyricsStr = await fetchLyric(this._id, fetchOptions);
      if (lyricsStr === "") {
        sendEvent(options2.cid, events.noLyrics, { cd1: this.cd1, cd2: this.cd2 });
        return null;
      }
      return parseLyrics(lyricsStr, await this._getParseLyricsOptions());
    }
    async _getLyricsFromBuiltIn(fetchOptions) {
      const lrc = await getCache(this.name, this.artists).getLyrics(fetchOptions);
      return parseLyrics(lrc, await this._getParseLyricsOptions());
    }
    async _fetchHighlight(fetchOptions) {
      const fetchTransName = async () => ({});
      const { id } = await matchingLyrics(this.req, {
        onlySearchName: false,
        fetchSongList,
        fetchTransName,
        fetchOptions
      });
      if (id === 0) {
        this._highlightLyrics = null;
      } else {
        const { text, highlights } = await fetchGeniusLyrics(id, fetchOptions);
        this._lyrics = correctionLyrics(this._lyrics, text);
        this._text = text;
        this._highlightLyrics = highlights;
      }
    }
    cacheTrackAndLyrics(info) {
      const cache = getCache(info.name, info.artists);
      cache.resolveDuration(info.duration);
      if (info.getLyrics)
        cache.getLyrics = info.getLyrics;
    }
    // can only modify `lyrics`/`id`/`aId`/`list`
    async _matching(fetchOptions) {
      const audio2 = await getCurrentAudio();
      const startTime = audio2.currentSrc ? performance.now() : null;
      const options2 = await optionsPromise;
      const parseLyricsOptions = await this._getParseLyricsOptions();
      const [{ list, id }, remoteData] = await Promise.all([
        matchingLyrics(this.req, {
          fetchSongList: options2["lyrics-server"] === "NetEase" ? fetchNetEaseSongList : fetchLRCLIBSongList,
          getDuration: async () => {
            const audioMetadataLoaded = new Promise(
              (res) => audio2.addEventListener("loadedmetadata", res, { once: true })
            );
            return Promise.any([
              getCache(this._name, this._artists).durationPromise,
              audio2.duration || await audioMetadataLoaded || audio2.duration
            ]);
          },
          fetchOptions
        }),
        getSong(this.req, fetchOptions)
      ]);
      this._list = list;
      const reviewed = options2["use-unreviewed-lyrics"] === "on" || remoteData?.reviewed;
      const isSelf = remoteData?.user === options2.cid;
      if (isSelf && remoteData?.lyric) {
        this._lyrics = parseLyrics(remoteData.lyric, parseLyricsOptions);
        sendEvent(options2.cid, events.useRemoteLyrics);
      } else if (isSelf && remoteData?.neteaseID) {
        this._id = remoteData.neteaseID;
        this._aId = this._id;
        this._lyrics = await this._getLyricsFromAPI(fetchOptions);
      } else if (reviewed && remoteData?.lyric) {
        this._lyrics = parseLyrics(remoteData.lyric, parseLyricsOptions);
        sendEvent(options2.cid, events.useRemoteLyrics);
      } else {
        this._id = (reviewed ? remoteData?.neteaseID || id : id || remoteData?.neteaseID) || 0;
        this._aId = this._id;
        const getLyricsList = [
          this._getLyricsFromAPI.bind(this),
          this._getLyricsFromBuiltIn.bind(this)
        ];
        try {
          this._lyrics = await getLyricsList[0](fetchOptions);
        } catch {
        }
        if (this._lyrics === null) {
          this._lyrics = await getLyricsList[1](fetchOptions);
        }
      }
      if (this._lyrics && this._id !== id) {
        sendEvent(options2.cid, events.useRemoteMatch);
      }
      if (!this._lyrics && id === 0) {
        sendEvent(options2.cid, events.notMatch, { cd1: this.cd1 });
      }
      if (startTime) {
        const ev = (performance.now() - startTime).toFixed();
        sendEvent(options2.cid, { ev, ...events.loadLyrics }, { cd1: this.cd1 });
      }
      this._fetchHighlight(fetchOptions);
    }
    async confirmedMId() {
      const { _name, _artists, _id } = this;
      try {
        if (this._lyrics) {
          await setSong({ name: _name, artists: _artists, id: _id });
        }
        this._aId = _id;
        this.sendToContentScript();
      } catch (e) {
        this._error = e;
      }
    }
    async chooseLyricsTrack({ id, name, artists }) {
      if (id === this._id)
        return;
      if (name !== this._name || artists !== this._artists)
        return;
      this._id = id;
      this._resetLyrics();
      try {
        const fetchOptions = { signal: this._abortController.signal };
        if (id === 0) {
          await setSong({ name, artists, id });
          await this._matching(fetchOptions);
          this.sendToContentScript();
        } else {
          this._lyrics = await this._getLyricsFromAPI(fetchOptions);
        }
      } catch (e) {
        if (e.name !== "AbortError") {
          this._error = e;
        }
      }
    }
    async dispatchTrackElementUpdateEvent(isUserAction = false) {
      const { TRACK_NAME_SELECTOR, TRACK_ARTIST_SELECTOR } = await configPromise;
      const name = querySelector(TRACK_NAME_SELECTOR)?.textContent;
      const artists = querySelector(TRACK_ARTIST_SELECTOR)?.textContent;
      try {
        if (this._name === name && this._artists === artists) {
          return;
        }
        if (!name || !artists) {
          if (isUserAction) {
            throw new Error(`Track info not found`);
          }
          return;
        }
        this.resetData();
        this._name = name;
        this._artists = artists;
        await this._matching({ signal: this._abortController.signal });
      } catch (e) {
        if (e.name !== "AbortError") {
          this._error = e;
          captureException(e);
        }
      }
      this.sendToContentScript();
    }
    sendToContentScript() {
      const { _name, _artists, _id, _aId, _list } = this;
      const msg = {
        type: 100001 /* SEND_SONGS */,
        data: {
          name: _name,
          artists: _artists,
          id: _id,
          aId: _aId,
          list: _list
        }
      };
      window.postMessage(msg, "*");
    }
  };
  var sharedData = new SharedData();

  // node_modules/@mantou/gem/lib/element.js
  var element_exports = {};
  __export(element_exports, {
    GemElement: () => GemElement,
    SVGTemplateResult: () => SVGTemplateResult,
    TemplateResult: () => TemplateResult,
    defineAttribute: () => defineAttribute,
    defineCSSState: () => defineCSSState,
    defineProperty: () => defineProperty,
    defineRef: () => defineRef,
    directive: () => directive,
    guard: () => guard,
    html: () => html,
    ifDefined: () => ifDefined,
    nativeDefineElement: () => nativeDefineElement,
    render: () => render,
    repeat: () => repeat,
    svg: () => svg2
  });

  // node_modules/lit-html/lib/directive.js
  var directives = /* @__PURE__ */ new WeakMap();
  var directive = (f) => (...args) => {
    const d = f(...args);
    directives.set(d, true);
    return d;
  };
  var isDirective = (o) => {
    return typeof o === "function" && directives.has(o);
  };

  // node_modules/lit-html/lib/dom.js
  var isCEPolyfill = typeof window !== "undefined" && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== void 0;
  var reparentNodes = (container, start, end = null, before = null) => {
    while (start !== end) {
      const n = start.nextSibling;
      container.insertBefore(start, before);
      start = n;
    }
  };
  var removeNodes = (container, start, end = null) => {
    while (start !== end) {
      const n = start.nextSibling;
      container.removeChild(start);
      start = n;
    }
  };

  // node_modules/lit-html/lib/part.js
  var noChange = {};
  var nothing = {};

  // node_modules/lit-html/lib/template.js
  var marker = `{{lit-${String(Math.random()).slice(2)}}}`;
  var nodeMarker = `<!--${marker}-->`;
  var markerRegex = new RegExp(`${marker}|${nodeMarker}`);
  var boundAttributeSuffix = "$lit$";
  var Template = class {
    constructor(result, element) {
      this.parts = [];
      this.element = element;
      const nodesToRemove = [];
      const stack = [];
      const walker = document.createTreeWalker(element.content, 133, null, false);
      let lastPartIndex = 0;
      let index = -1;
      let partIndex = 0;
      const { strings, values: { length } } = result;
      while (partIndex < length) {
        const node = walker.nextNode();
        if (node === null) {
          walker.currentNode = stack.pop();
          continue;
        }
        index++;
        if (node.nodeType === 1) {
          if (node.hasAttributes()) {
            const attributes = node.attributes;
            const { length: length2 } = attributes;
            let count = 0;
            for (let i = 0; i < length2; i++) {
              if (endsWith(attributes[i].name, boundAttributeSuffix)) {
                count++;
              }
            }
            while (count-- > 0) {
              const stringForPart = strings[partIndex];
              const name = lastAttributeNameRegex.exec(stringForPart)[2];
              const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
              const attributeValue = node.getAttribute(attributeLookupName);
              node.removeAttribute(attributeLookupName);
              const statics = attributeValue.split(markerRegex);
              this.parts.push({ type: "attribute", index, name, strings: statics });
              partIndex += statics.length - 1;
            }
          }
          if (node.tagName === "TEMPLATE") {
            stack.push(node);
            walker.currentNode = node.content;
          }
        } else if (node.nodeType === 3) {
          const data = node.data;
          if (data.indexOf(marker) >= 0) {
            const parent = node.parentNode;
            const strings2 = data.split(markerRegex);
            const lastIndex = strings2.length - 1;
            for (let i = 0; i < lastIndex; i++) {
              let insert;
              let s = strings2[i];
              if (s === "") {
                insert = createMarker();
              } else {
                const match = lastAttributeNameRegex.exec(s);
                if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                  s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                }
                insert = document.createTextNode(s);
              }
              parent.insertBefore(insert, node);
              this.parts.push({ type: "node", index: ++index });
            }
            if (strings2[lastIndex] === "") {
              parent.insertBefore(createMarker(), node);
              nodesToRemove.push(node);
            } else {
              node.data = strings2[lastIndex];
            }
            partIndex += lastIndex;
          }
        } else if (node.nodeType === 8) {
          if (node.data === marker) {
            const parent = node.parentNode;
            if (node.previousSibling === null || index === lastPartIndex) {
              index++;
              parent.insertBefore(createMarker(), node);
            }
            lastPartIndex = index;
            this.parts.push({ type: "node", index });
            if (node.nextSibling === null) {
              node.data = "";
            } else {
              nodesToRemove.push(node);
              index--;
            }
            partIndex++;
          } else {
            let i = -1;
            while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
              this.parts.push({ type: "node", index: -1 });
              partIndex++;
            }
          }
        }
      }
      for (const n of nodesToRemove) {
        n.parentNode.removeChild(n);
      }
    }
  };
  var endsWith = (str, suffix) => {
    const index = str.length - suffix.length;
    return index >= 0 && str.slice(index) === suffix;
  };
  var isTemplatePartActive = (part) => part.index !== -1;
  var createMarker = () => document.createComment("");
  var lastAttributeNameRegex = (
    // eslint-disable-next-line no-control-regex
    /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/
  );

  // node_modules/lit-html/lib/template-instance.js
  var TemplateInstance = class {
    constructor(template, processor, options2) {
      this.__parts = [];
      this.template = template;
      this.processor = processor;
      this.options = options2;
    }
    update(values) {
      let i = 0;
      for (const part of this.__parts) {
        if (part !== void 0) {
          part.setValue(values[i]);
        }
        i++;
      }
      for (const part of this.__parts) {
        if (part !== void 0) {
          part.commit();
        }
      }
    }
    _clone() {
      const fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
      const stack = [];
      const parts2 = this.template.parts;
      const walker = document.createTreeWalker(fragment, 133, null, false);
      let partIndex = 0;
      let nodeIndex = 0;
      let part;
      let node = walker.nextNode();
      while (partIndex < parts2.length) {
        part = parts2[partIndex];
        if (!isTemplatePartActive(part)) {
          this.__parts.push(void 0);
          partIndex++;
          continue;
        }
        while (nodeIndex < part.index) {
          nodeIndex++;
          if (node.nodeName === "TEMPLATE") {
            stack.push(node);
            walker.currentNode = node.content;
          }
          if ((node = walker.nextNode()) === null) {
            walker.currentNode = stack.pop();
            node = walker.nextNode();
          }
        }
        if (part.type === "node") {
          const part2 = this.processor.handleTextExpression(this.options);
          part2.insertAfterNode(node.previousSibling);
          this.__parts.push(part2);
        } else {
          this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
        }
        partIndex++;
      }
      if (isCEPolyfill) {
        document.adoptNode(fragment);
        customElements.upgrade(fragment);
      }
      return fragment;
    }
  };

  // node_modules/lit-html/lib/template-result.js
  var policy = window.trustedTypes && trustedTypes.createPolicy("lit-html", { createHTML: (s) => s });
  var commentMarker = ` ${marker} `;
  var TemplateResult = class {
    constructor(strings, values, type, processor) {
      this.strings = strings;
      this.values = values;
      this.type = type;
      this.processor = processor;
    }
    /**
     * Returns a string of HTML used to create a `<template>` element.
     */
    getHTML() {
      const l = this.strings.length - 1;
      let html2 = "";
      let isCommentBinding = false;
      for (let i = 0; i < l; i++) {
        const s = this.strings[i];
        const commentOpen = s.lastIndexOf("<!--");
        isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf("-->", commentOpen + 1) === -1;
        const attributeMatch = lastAttributeNameRegex.exec(s);
        if (attributeMatch === null) {
          html2 += s + (isCommentBinding ? commentMarker : nodeMarker);
        } else {
          html2 += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;
        }
      }
      html2 += this.strings[l];
      return html2;
    }
    getTemplateElement() {
      const template = document.createElement("template");
      let value = this.getHTML();
      if (policy !== void 0) {
        value = policy.createHTML(value);
      }
      template.innerHTML = value;
      return template;
    }
  };
  var SVGTemplateResult = class extends TemplateResult {
    getHTML() {
      return `<svg>${super.getHTML()}</svg>`;
    }
    getTemplateElement() {
      const template = super.getTemplateElement();
      const content = template.content;
      const svgElement = content.firstChild;
      content.removeChild(svgElement);
      reparentNodes(content, svgElement.firstChild);
      return template;
    }
  };

  // node_modules/lit-html/lib/parts.js
  var isPrimitive = (value) => {
    return value === null || !(typeof value === "object" || typeof value === "function");
  };
  var isIterable = (value) => {
    return Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    !!(value && value[Symbol.iterator]);
  };
  var AttributeCommitter = class {
    constructor(element, name, strings) {
      this.dirty = true;
      this.element = element;
      this.name = name;
      this.strings = strings;
      this.parts = [];
      for (let i = 0; i < strings.length - 1; i++) {
        this.parts[i] = this._createPart();
      }
    }
    /**
     * Creates a single part. Override this to create a differnt type of part.
     */
    _createPart() {
      return new AttributePart(this);
    }
    _getValue() {
      const strings = this.strings;
      const l = strings.length - 1;
      const parts2 = this.parts;
      if (l === 1 && strings[0] === "" && strings[1] === "") {
        const v = parts2[0].value;
        if (typeof v === "symbol") {
          return String(v);
        }
        if (typeof v === "string" || !isIterable(v)) {
          return v;
        }
      }
      let text = "";
      for (let i = 0; i < l; i++) {
        text += strings[i];
        const part = parts2[i];
        if (part !== void 0) {
          const v = part.value;
          if (isPrimitive(v) || !isIterable(v)) {
            text += typeof v === "string" ? v : String(v);
          } else {
            for (const t of v) {
              text += typeof t === "string" ? t : String(t);
            }
          }
        }
      }
      text += strings[l];
      return text;
    }
    commit() {
      if (this.dirty) {
        this.dirty = false;
        this.element.setAttribute(this.name, this._getValue());
      }
    }
  };
  var AttributePart = class {
    constructor(committer) {
      this.value = void 0;
      this.committer = committer;
    }
    setValue(value) {
      if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
        this.value = value;
        if (!isDirective(value)) {
          this.committer.dirty = true;
        }
      }
    }
    commit() {
      while (isDirective(this.value)) {
        const directive2 = this.value;
        this.value = noChange;
        directive2(this);
      }
      if (this.value === noChange) {
        return;
      }
      this.committer.commit();
    }
  };
  var NodePart = class _NodePart {
    constructor(options2) {
      this.value = void 0;
      this.__pendingValue = void 0;
      this.options = options2;
    }
    /**
     * Appends this part into a container.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendInto(container) {
      this.startNode = container.appendChild(createMarker());
      this.endNode = container.appendChild(createMarker());
    }
    /**
     * Inserts this part after the `ref` node (between `ref` and `ref`'s next
     * sibling). Both `ref` and its next sibling must be static, unchanging nodes
     * such as those that appear in a literal section of a template.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterNode(ref) {
      this.startNode = ref;
      this.endNode = ref.nextSibling;
    }
    /**
     * Appends this part into a parent part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    appendIntoPart(part) {
      part.__insert(this.startNode = createMarker());
      part.__insert(this.endNode = createMarker());
    }
    /**
     * Inserts this part after the `ref` part.
     *
     * This part must be empty, as its contents are not automatically moved.
     */
    insertAfterPart(ref) {
      ref.__insert(this.startNode = createMarker());
      this.endNode = ref.endNode;
      ref.endNode = this.startNode;
    }
    setValue(value) {
      this.__pendingValue = value;
    }
    commit() {
      if (this.startNode.parentNode === null) {
        return;
      }
      while (isDirective(this.__pendingValue)) {
        const directive2 = this.__pendingValue;
        this.__pendingValue = noChange;
        directive2(this);
      }
      const value = this.__pendingValue;
      if (value === noChange) {
        return;
      }
      if (isPrimitive(value)) {
        if (value !== this.value) {
          this.__commitText(value);
        }
      } else if (value instanceof TemplateResult) {
        this.__commitTemplateResult(value);
      } else if (value instanceof Node) {
        this.__commitNode(value);
      } else if (isIterable(value)) {
        this.__commitIterable(value);
      } else if (value === nothing) {
        this.value = nothing;
        this.clear();
      } else {
        this.__commitText(value);
      }
    }
    __insert(node) {
      this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
      if (this.value === value) {
        return;
      }
      this.clear();
      this.__insert(value);
      this.value = value;
    }
    __commitText(value) {
      const node = this.startNode.nextSibling;
      value = value == null ? "" : value;
      const valueAsString = typeof value === "string" ? value : String(value);
      if (node === this.endNode.previousSibling && node.nodeType === 3) {
        node.data = valueAsString;
      } else {
        this.__commitNode(document.createTextNode(valueAsString));
      }
      this.value = value;
    }
    __commitTemplateResult(value) {
      const template = this.options.templateFactory(value);
      if (this.value instanceof TemplateInstance && this.value.template === template) {
        this.value.update(value.values);
      } else {
        const instance = new TemplateInstance(template, value.processor, this.options);
        const fragment = instance._clone();
        instance.update(value.values);
        this.__commitNode(fragment);
        this.value = instance;
      }
    }
    __commitIterable(value) {
      if (!Array.isArray(this.value)) {
        this.value = [];
        this.clear();
      }
      const itemParts = this.value;
      let partIndex = 0;
      let itemPart;
      for (const item of value) {
        itemPart = itemParts[partIndex];
        if (itemPart === void 0) {
          itemPart = new _NodePart(this.options);
          itemParts.push(itemPart);
          if (partIndex === 0) {
            itemPart.appendIntoPart(this);
          } else {
            itemPart.insertAfterPart(itemParts[partIndex - 1]);
          }
        }
        itemPart.setValue(item);
        itemPart.commit();
        partIndex++;
      }
      if (partIndex < itemParts.length) {
        itemParts.length = partIndex;
        this.clear(itemPart && itemPart.endNode);
      }
    }
    clear(startNode = this.startNode) {
      removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
  };
  var BooleanAttributePart = class {
    constructor(element, name, strings) {
      this.value = void 0;
      this.__pendingValue = void 0;
      if (strings.length !== 2 || strings[0] !== "" || strings[1] !== "") {
        throw new Error("Boolean attributes can only contain a single expression");
      }
      this.element = element;
      this.name = name;
      this.strings = strings;
    }
    setValue(value) {
      this.__pendingValue = value;
    }
    commit() {
      while (isDirective(this.__pendingValue)) {
        const directive2 = this.__pendingValue;
        this.__pendingValue = noChange;
        directive2(this);
      }
      if (this.__pendingValue === noChange) {
        return;
      }
      const value = !!this.__pendingValue;
      if (this.value !== value) {
        if (value) {
          this.element.setAttribute(this.name, "");
        } else {
          this.element.removeAttribute(this.name);
        }
        this.value = value;
      }
      this.__pendingValue = noChange;
    }
  };
  var PropertyCommitter = class extends AttributeCommitter {
    constructor(element, name, strings) {
      super(element, name, strings);
      this.single = strings.length === 2 && strings[0] === "" && strings[1] === "";
    }
    _createPart() {
      return new PropertyPart(this);
    }
    _getValue() {
      if (this.single) {
        return this.parts[0].value;
      }
      return super._getValue();
    }
    commit() {
      if (this.dirty) {
        this.dirty = false;
        this.element[this.name] = this._getValue();
      }
    }
  };
  var PropertyPart = class extends AttributePart {
  };
  var eventOptionsSupported = false;
  (() => {
    try {
      const options2 = {
        get capture() {
          eventOptionsSupported = true;
          return false;
        }
      };
      window.addEventListener("test", options2, options2);
      window.removeEventListener("test", options2, options2);
    } catch (_e) {
    }
  })();
  var EventPart = class {
    constructor(element, eventName, eventContext) {
      this.value = void 0;
      this.__pendingValue = void 0;
      this.element = element;
      this.eventName = eventName;
      this.eventContext = eventContext;
      this.__boundHandleEvent = (e) => this.handleEvent(e);
    }
    setValue(value) {
      this.__pendingValue = value;
    }
    commit() {
      while (isDirective(this.__pendingValue)) {
        const directive2 = this.__pendingValue;
        this.__pendingValue = noChange;
        directive2(this);
      }
      if (this.__pendingValue === noChange) {
        return;
      }
      const newListener = this.__pendingValue;
      const oldListener = this.value;
      const shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
      const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
      if (shouldRemoveListener) {
        this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
      }
      if (shouldAddListener) {
        this.__options = getOptions(newListener);
        this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
      }
      this.value = newListener;
      this.__pendingValue = noChange;
    }
    handleEvent(event) {
      if (typeof this.value === "function") {
        this.value.call(this.eventContext || this.element, event);
      } else {
        this.value.handleEvent(event);
      }
    }
  };
  var getOptions = (o) => o && (eventOptionsSupported ? { capture: o.capture, passive: o.passive, once: o.once } : o.capture);

  // node_modules/lit-html/lib/default-template-processor.js
  var DefaultTemplateProcessor = class {
    /**
     * Create parts for an attribute-position binding, given the event, attribute
     * name, and string literals.
     *
     * @param element The element containing the binding
     * @param name  The attribute name
     * @param strings The string literals. There are always at least two strings,
     *   event for fully-controlled bindings with a single expression.
     */
    handleAttributeExpressions(element, name, strings, options2) {
      const prefix = name[0];
      if (prefix === ".") {
        const committer2 = new PropertyCommitter(element, name.slice(1), strings);
        return committer2.parts;
      }
      if (prefix === "@") {
        return [new EventPart(element, name.slice(1), options2.eventContext)];
      }
      if (prefix === "?") {
        return [new BooleanAttributePart(element, name.slice(1), strings)];
      }
      const committer = new AttributeCommitter(element, name, strings);
      return committer.parts;
    }
    /**
     * Create parts for a text-position binding.
     * @param templateFactory
     */
    handleTextExpression(options2) {
      return new NodePart(options2);
    }
  };
  var defaultTemplateProcessor = new DefaultTemplateProcessor();

  // node_modules/lit-html/lib/template-factory.js
  function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === void 0) {
      templateCache = {
        stringsArray: /* @__PURE__ */ new WeakMap(),
        keyString: /* @__PURE__ */ new Map()
      };
      templateCaches.set(result.type, templateCache);
    }
    let template = templateCache.stringsArray.get(result.strings);
    if (template !== void 0) {
      return template;
    }
    const key = result.strings.join(marker);
    template = templateCache.keyString.get(key);
    if (template === void 0) {
      template = new Template(result, result.getTemplateElement());
      templateCache.keyString.set(key, template);
    }
    templateCache.stringsArray.set(result.strings, template);
    return template;
  }
  var templateCaches = /* @__PURE__ */ new Map();

  // node_modules/lit-html/lib/render.js
  var parts = /* @__PURE__ */ new WeakMap();
  var render = (result, container, options2) => {
    let part = parts.get(container);
    if (part === void 0) {
      removeNodes(container, container.firstChild);
      parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options2)));
      part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
  };

  // node_modules/lit-html/lit-html.js
  if (typeof window !== "undefined") {
    (window["litHtmlVersions"] || (window["litHtmlVersions"] = [])).push("1.4.1");
  }
  var html = (strings, ...values) => new TemplateResult(strings, values, "html", defaultTemplateProcessor);
  var svg2 = (strings, ...values) => new SVGTemplateResult(strings, values, "svg", defaultTemplateProcessor);

  // node_modules/@mantou/gem/lib/store.js
  var StoreListenerMap = /* @__PURE__ */ new WeakMap();
  function createStore(originStore) {
    if (StoreListenerMap.has(originStore)) {
      throw new GemError("argument error");
    }
    StoreListenerMap.set(originStore, /* @__PURE__ */ new Set());
    return originStore;
  }
  function connect(store, func) {
    const listeners = StoreListenerMap.get(store);
    listeners === null || listeners === void 0 ? void 0 : listeners.add(func);
    return () => {
      listeners === null || listeners === void 0 ? void 0 : listeners.delete(func);
    };
  }

  // node_modules/@mantou/gem/lib/version.js
  var version_exports = {};
  __export(version_exports, {
    version: () => version
  });
  var version = "1.7.12";

  // node_modules/lit-html/directives/repeat.js
  var createAndInsertPart = (containerPart, beforePart) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = beforePart === void 0 ? containerPart.endNode : beforePart.startNode;
    const startNode = container.insertBefore(createMarker(), beforeNode);
    container.insertBefore(createMarker(), beforeNode);
    const newPart = new NodePart(containerPart.options);
    newPart.insertAfterNode(startNode);
    return newPart;
  };
  var updatePart = (part, value) => {
    part.setValue(value);
    part.commit();
    return part;
  };
  var insertPartBefore = (containerPart, part, ref) => {
    const container = containerPart.startNode.parentNode;
    const beforeNode = ref ? ref.startNode : containerPart.endNode;
    const endNode = part.endNode.nextSibling;
    if (endNode !== beforeNode) {
      reparentNodes(container, part.startNode, endNode, beforeNode);
    }
  };
  var removePart = (part) => {
    removeNodes(part.startNode.parentNode, part.startNode, part.endNode.nextSibling);
  };
  var generateMap = (list, start, end) => {
    const map = /* @__PURE__ */ new Map();
    for (let i = start; i <= end; i++) {
      map.set(list[i], i);
    }
    return map;
  };
  var partListCache = /* @__PURE__ */ new WeakMap();
  var keyListCache = /* @__PURE__ */ new WeakMap();
  var repeat = directive((items, keyFnOrTemplate, template) => {
    let keyFn;
    if (template === void 0) {
      template = keyFnOrTemplate;
    } else if (keyFnOrTemplate !== void 0) {
      keyFn = keyFnOrTemplate;
    }
    return (containerPart) => {
      if (!(containerPart instanceof NodePart)) {
        throw new Error("repeat can only be used in text bindings");
      }
      const oldParts = partListCache.get(containerPart) || [];
      const oldKeys = keyListCache.get(containerPart) || [];
      const newParts = [];
      const newValues = [];
      const newKeys = [];
      let index = 0;
      for (const item of items) {
        newKeys[index] = keyFn ? keyFn(item, index) : index;
        newValues[index] = template(item, index);
        index++;
      }
      let newKeyToIndexMap;
      let oldKeyToIndexMap;
      let oldHead = 0;
      let oldTail = oldParts.length - 1;
      let newHead = 0;
      let newTail = newValues.length - 1;
      while (oldHead <= oldTail && newHead <= newTail) {
        if (oldParts[oldHead] === null) {
          oldHead++;
        } else if (oldParts[oldTail] === null) {
          oldTail--;
        } else if (oldKeys[oldHead] === newKeys[newHead]) {
          newParts[newHead] = updatePart(oldParts[oldHead], newValues[newHead]);
          oldHead++;
          newHead++;
        } else if (oldKeys[oldTail] === newKeys[newTail]) {
          newParts[newTail] = updatePart(oldParts[oldTail], newValues[newTail]);
          oldTail--;
          newTail--;
        } else if (oldKeys[oldHead] === newKeys[newTail]) {
          newParts[newTail] = updatePart(oldParts[oldHead], newValues[newTail]);
          insertPartBefore(containerPart, oldParts[oldHead], newParts[newTail + 1]);
          oldHead++;
          newTail--;
        } else if (oldKeys[oldTail] === newKeys[newHead]) {
          newParts[newHead] = updatePart(oldParts[oldTail], newValues[newHead]);
          insertPartBefore(containerPart, oldParts[oldTail], oldParts[oldHead]);
          oldTail--;
          newHead++;
        } else {
          if (newKeyToIndexMap === void 0) {
            newKeyToIndexMap = generateMap(newKeys, newHead, newTail);
            oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);
          }
          if (!newKeyToIndexMap.has(oldKeys[oldHead])) {
            removePart(oldParts[oldHead]);
            oldHead++;
          } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {
            removePart(oldParts[oldTail]);
            oldTail--;
          } else {
            const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);
            const oldPart = oldIndex !== void 0 ? oldParts[oldIndex] : null;
            if (oldPart === null) {
              const newPart = createAndInsertPart(containerPart, oldParts[oldHead]);
              updatePart(newPart, newValues[newHead]);
              newParts[newHead] = newPart;
            } else {
              newParts[newHead] = updatePart(oldPart, newValues[newHead]);
              insertPartBefore(containerPart, oldPart, oldParts[oldHead]);
              oldParts[oldIndex] = null;
            }
            newHead++;
          }
        }
      }
      while (newHead <= newTail) {
        const newPart = createAndInsertPart(containerPart, newParts[newTail + 1]);
        updatePart(newPart, newValues[newHead]);
        newParts[newHead++] = newPart;
      }
      while (oldHead <= oldTail) {
        const oldPart = oldParts[oldHead++];
        if (oldPart !== null) {
          removePart(oldPart);
        }
      }
      partListCache.set(containerPart, newParts);
      keyListCache.set(containerPart, newKeys);
    };
  });

  // node_modules/lit-html/directives/guard.js
  var previousValues = /* @__PURE__ */ new WeakMap();
  var guard = directive((value, f) => (part) => {
    const previousValue = previousValues.get(part);
    if (Array.isArray(value)) {
      if (Array.isArray(previousValue) && previousValue.length === value.length && value.every((v, i) => v === previousValue[i])) {
        return;
      }
    } else if (previousValue === value && (value !== void 0 || previousValues.has(part))) {
      return;
    }
    part.setValue(f());
    previousValues.set(part, Array.isArray(value) ? Array.from(value) : value);
  });

  // node_modules/lit-html/directives/if-defined.js
  var previousValues2 = /* @__PURE__ */ new WeakMap();
  var ifDefined = directive((value) => (part) => {
    const previousValue = previousValues2.get(part);
    if (value === void 0 && part instanceof AttributePart) {
      if (previousValue !== void 0 || !previousValues2.has(part)) {
        const name = part.committer.name;
        part.committer.element.removeAttribute(name);
      }
    } else if (value !== previousValue) {
      part.setValue(value);
    }
    previousValues2.set(part, value);
  });

  // node_modules/@mantou/gem/lib/element.js
  var __classPrivateFieldGet3 = function(receiver, state, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  };
  var __classPrivateFieldSet3 = function(receiver, state, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  };
  var _a;
  var _GemElement_final;
  var _GemElement_renderRoot;
  var _GemElement_internals;
  var _GemElement_isAppendReason;
  var _GemElement_isMounted;
  var _GemElement_isAsync;
  var _GemElement_effectList;
  var _GemElement_memoList;
  var _GemElement_unmountCallback;
  var _GemElement_exec;
  var _GemElement_execEffect;
  var _GemElement_execMemo;
  var _GemElement_initEffect;
  var _GemElement_render;
  var _GemElement_shouldUpdate;
  var _GemElement_updateCallback;
  var _GemElement_update;
  var _GemElement_updated;
  var _GemElement_disconnectStore;
  var _GemElement_connectedCallback;
  var _GemElement_clearEffect;
  function emptyFunction() {
  }
  function execCallback(fun) {
    typeof fun === "function" && fun();
  }
  var asyncRenderTaskList = new LinkedList();
  var tick = (timeStamp = performance.now()) => {
    if (performance.now() > timeStamp + 16)
      return requestAnimationFrame(tick);
    const task = asyncRenderTaskList.get();
    if (task) {
      task();
      tick(timeStamp);
    }
  };
  asyncRenderTaskList.addEventListener("start", () => addMicrotask(tick));
  var constructorSymbol = Symbol("constructor");
  var initSymbol = Symbol("init");
  var updateSymbol = Symbol("update");
  var GemElement = class extends HTMLElement {
    constructor(options2 = {}) {
      super();
      _GemElement_renderRoot.set(this, void 0);
      _GemElement_internals.set(this, void 0);
      _GemElement_isAppendReason.set(this, void 0);
      _GemElement_isMounted.set(this, void 0);
      _GemElement_isAsync.set(this, void 0);
      _GemElement_effectList.set(this, void 0);
      _GemElement_memoList.set(this, void 0);
      _GemElement_unmountCallback.set(this, void 0);
      this.setState = (payload) => {
        if (!this.state)
          throw new GemError("`state` not initialized");
        Object.assign(this.state, payload);
        addMicrotask(__classPrivateFieldGet3(this, _GemElement_update, "f"));
      };
      _GemElement_exec.set(this, (list) => {
        list === null || list === void 0 ? void 0 : list.forEach((effectItem) => {
          const { callback, getDep, values, preCallback } = effectItem;
          const newValues = getDep === null || getDep === void 0 ? void 0 : getDep();
          if (!getDep || !values || isArrayChange(values, newValues)) {
            execCallback(preCallback);
            effectItem.preCallback = callback(newValues, values);
            effectItem.values = newValues;
          }
        });
      });
      _GemElement_execEffect.set(this, () => {
        __classPrivateFieldGet3(this, _GemElement_exec, "f").call(this, __classPrivateFieldGet3(this, _GemElement_effectList, "f"));
      });
      _GemElement_execMemo.set(this, () => {
        __classPrivateFieldGet3(this, _GemElement_exec, "f").call(this, __classPrivateFieldGet3(this, _GemElement_memoList, "f"));
      });
      this.effect = (callback, getDep) => {
        if (!__classPrivateFieldGet3(this, _GemElement_effectList, "f"))
          __classPrivateFieldSet3(this, _GemElement_effectList, [], "f");
        const effectItem = {
          callback,
          getDep,
          initialized: __classPrivateFieldGet3(this, _GemElement_isMounted, "f"),
          inConstructor: this[constructorSymbol]
        };
        if (__classPrivateFieldGet3(this, _GemElement_isMounted, "f")) {
          effectItem.values = getDep === null || getDep === void 0 ? void 0 : getDep();
          effectItem.preCallback = callback(effectItem.values);
        }
        __classPrivateFieldGet3(this, _GemElement_effectList, "f").push(effectItem);
      };
      this.memo = (callback, getDep) => {
        if (!__classPrivateFieldGet3(this, _GemElement_memoList, "f"))
          __classPrivateFieldSet3(this, _GemElement_memoList, [], "f");
        __classPrivateFieldGet3(this, _GemElement_memoList, "f").push({
          callback,
          getDep,
          inConstructor: this[constructorSymbol]
        });
      };
      _GemElement_initEffect.set(this, () => {
        var _b;
        (_b = __classPrivateFieldGet3(this, _GemElement_effectList, "f")) === null || _b === void 0 ? void 0 : _b.forEach((effectItem) => {
          const { callback, getDep, initialized } = effectItem;
          if (!initialized) {
            effectItem.values = getDep === null || getDep === void 0 ? void 0 : getDep();
            effectItem.preCallback = callback(effectItem.values);
            effectItem.initialized = true;
          }
        });
      });
      _GemElement_render.set(this, () => {
        __classPrivateFieldGet3(this, _GemElement_execMemo, "f").call(this);
        const isLight = __classPrivateFieldGet3(this, _GemElement_renderRoot, "f") === this;
        const temp = this.render ? this.render() : isLight ? void 0 : html`<slot></slot>`;
        if (temp === void 0)
          return;
        render(temp, __classPrivateFieldGet3(this, _GemElement_renderRoot, "f"));
      });
      _GemElement_shouldUpdate.set(this, () => {
        return this.shouldUpdate ? this.shouldUpdate() : true;
      });
      _GemElement_updateCallback.set(this, () => {
        if (__classPrivateFieldGet3(this, _GemElement_isMounted, "f") && __classPrivateFieldGet3(this, _GemElement_shouldUpdate, "f").call(this)) {
          __classPrivateFieldGet3(this, _GemElement_render, "f").call(this);
          addMicrotask(__classPrivateFieldGet3(this, _GemElement_updated, "f"));
          addMicrotask(__classPrivateFieldGet3(this, _GemElement_execEffect, "f"));
        }
      });
      _GemElement_update.set(this, () => {
        if (__classPrivateFieldGet3(this, _GemElement_isAsync, "f")) {
          asyncRenderTaskList.add(__classPrivateFieldGet3(this, _GemElement_updateCallback, "f"));
        } else {
          __classPrivateFieldGet3(this, _GemElement_updateCallback, "f").call(this);
        }
      });
      this.update = () => {
        addMicrotask(__classPrivateFieldGet3(this, _GemElement_update, "f"));
      };
      _GemElement_updated.set(this, () => {
        var _b;
        (_b = this.updated) === null || _b === void 0 ? void 0 : _b.call(this);
      });
      _GemElement_disconnectStore.set(this, void 0);
      _GemElement_connectedCallback.set(this, () => {
        var _b, _c, _d;
        if (__classPrivateFieldGet3(this, _GemElement_isAppendReason, "f")) {
          __classPrivateFieldSet3(this, _GemElement_isAppendReason, false, "f");
          return;
        }
        Reflect.set(this, constructorSymbol, false);
        (_b = this.willMount) === null || _b === void 0 ? void 0 : _b.call(this);
        const { observedStores, rootElement } = this.constructor;
        __classPrivateFieldSet3(this, _GemElement_disconnectStore, observedStores === null || observedStores === void 0 ? void 0 : observedStores.map((store) => connect(store, __classPrivateFieldGet3(this, _GemElement_update, "f"))), "f");
        __classPrivateFieldGet3(this, _GemElement_render, "f").call(this);
        __classPrivateFieldSet3(this, _GemElement_isMounted, true, "f");
        __classPrivateFieldSet3(this, _GemElement_unmountCallback, (_c = this.mounted) === null || _c === void 0 ? void 0 : _c.call(this), "f");
        __classPrivateFieldGet3(this, _GemElement_initEffect, "f").call(this);
        if (rootElement && this.isConnected && ((_d = this.getRootNode().host) === null || _d === void 0 ? void 0 : _d.tagName) !== rootElement.toUpperCase()) {
          throw new GemError(`not allow current root type`);
        }
      });
      _GemElement_clearEffect.set(this, (list) => {
        return list === null || list === void 0 ? void 0 : list.filter((e) => {
          execCallback(e.preCallback);
          e.initialized = false;
          return e.inConstructor;
        });
      });
      addMicrotask(() => Reflect.set(this, initSymbol, false));
      Reflect.set(this, constructorSymbol, true);
      Reflect.set(this, initSymbol, true);
      Reflect.set(this, updateSymbol, () => {
        if (__classPrivateFieldGet3(this, _GemElement_isMounted, "f")) {
          addMicrotask(__classPrivateFieldGet3(this, _GemElement_update, "f"));
        }
      });
      __classPrivateFieldSet3(this, _GemElement_isAsync, options2.isAsync, "f");
      __classPrivateFieldSet3(this, _GemElement_renderRoot, options2.isLight ? this : this.attachShadow({
        mode: options2.mode || "open",
        delegatesFocus: options2.delegatesFocus,
        slotAssignment: options2.slotAssignment
      }), "f");
      let hasInitTabIndex;
      this.effect(([disabled = false]) => {
        if (hasInitTabIndex === void 0)
          hasInitTabIndex = this.hasAttribute("tabindex");
        this.internals.ariaDisabled = String(disabled);
        if (options2.focusable && !hasInitTabIndex) {
          this.tabIndex = -Number(disabled);
        }
        if ((options2.focusable || options2.delegatesFocus) && disabled) {
          return addListener(this, "click", (e) => e.isTrusted && e.stopImmediatePropagation(), {
            capture: true
          });
        }
      }, () => [Reflect.get(this, "disabled")]);
      const { adoptedStyleSheets } = new.target;
      if (adoptedStyleSheets) {
        const sheets = adoptedStyleSheets.map((item) => item[SheetToken] || item);
        if (this.shadowRoot) {
          this.shadowRoot.adoptedStyleSheets = sheets;
        } else {
          this.effect(() => {
            const root = this.getRootNode();
            root.adoptedStyleSheets = [...root.adoptedStyleSheets, ...sheets];
            return () => {
              root.adoptedStyleSheets = removeItems(root.adoptedStyleSheets, sheets);
            };
          }, () => []);
        }
      }
    }
    get internals() {
      if (!__classPrivateFieldGet3(this, _GemElement_internals, "f")) {
        __classPrivateFieldSet3(this, _GemElement_internals, this.attachInternals(), "f");
        try {
          __classPrivateFieldGet3(this, _GemElement_internals, "f").states.add("foo");
          __classPrivateFieldGet3(this, _GemElement_internals, "f").states.delete("foo");
        } catch (_b) {
          Reflect.defineProperty(__classPrivateFieldGet3(this, _GemElement_internals, "f"), "states", {
            value: {
              has: (v) => kebabToCamelCase(v) in this.dataset,
              add: (v) => this.dataset[kebabToCamelCase(v)] = "",
              delete: (v) => delete this.dataset[kebabToCamelCase(v)]
            }
          });
        }
      }
      return __classPrivateFieldGet3(this, _GemElement_internals, "f");
    }
    /**
     * @private
     * @final
     * use `effect`
     */
    attributeChangedCallback() {
      if (__classPrivateFieldGet3(this, _GemElement_isMounted, "f")) {
        addMicrotask(__classPrivateFieldGet3(this, _GemElement_update, "f"));
      }
      return __classPrivateFieldGet3(_a, _a, "f", _GemElement_final);
    }
    closestElement(constructorOrTag) {
      const isConstructor = typeof constructorOrTag === "function";
      const tagName = typeof constructorOrTag === "string" && constructorOrTag.toUpperCase();
      const is = (ele) => isConstructor ? ele.constructor === constructorOrTag : ele.tagName === tagName;
      let node = this;
      while (node) {
        if (is(node))
          break;
        node = node.parentElement || node.getRootNode().host;
      }
      return node;
    }
    /**
     * @private
     * @final
     * use `mounted`; 允许手动调用 `connectedCallback` 以清除装饰器定义的字段
     */
    connectedCallback() {
      if (this.isConnected && __classPrivateFieldGet3(this, _GemElement_isAsync, "f")) {
        asyncRenderTaskList.add(__classPrivateFieldGet3(this, _GemElement_connectedCallback, "f"));
      } else {
        __classPrivateFieldGet3(this, _GemElement_connectedCallback, "f").call(this);
      }
      return __classPrivateFieldGet3(_a, _a, "f", _GemElement_final);
    }
    /**
     * @private
     * @final
     */
    adoptedCallback() {
      return __classPrivateFieldGet3(_a, _a, "f", _GemElement_final);
    }
    /**
     * @private
     * @final
     * use `unmounted`
     */
    disconnectedCallback() {
      var _b, _c;
      if (this.isConnected) {
        __classPrivateFieldSet3(this, _GemElement_isAppendReason, true, "f");
        return;
      }
      __classPrivateFieldSet3(this, _GemElement_isMounted, false, "f");
      (_b = __classPrivateFieldGet3(this, _GemElement_disconnectStore, "f")) === null || _b === void 0 ? void 0 : _b.forEach((disconnect) => disconnect());
      execCallback(__classPrivateFieldGet3(this, _GemElement_unmountCallback, "f"));
      (_c = this.unmounted) === null || _c === void 0 ? void 0 : _c.call(this);
      __classPrivateFieldSet3(this, _GemElement_effectList, __classPrivateFieldGet3(this, _GemElement_clearEffect, "f").call(this, __classPrivateFieldGet3(this, _GemElement_effectList, "f")), "f");
      __classPrivateFieldSet3(this, _GemElement_memoList, __classPrivateFieldGet3(this, _GemElement_clearEffect, "f").call(this, __classPrivateFieldGet3(this, _GemElement_memoList, "f")), "f");
      return __classPrivateFieldGet3(_a, _a, "f", _GemElement_final);
    }
  };
  _a = GemElement, _GemElement_renderRoot = /* @__PURE__ */ new WeakMap(), _GemElement_internals = /* @__PURE__ */ new WeakMap(), _GemElement_isAppendReason = /* @__PURE__ */ new WeakMap(), _GemElement_isMounted = /* @__PURE__ */ new WeakMap(), _GemElement_isAsync = /* @__PURE__ */ new WeakMap(), _GemElement_effectList = /* @__PURE__ */ new WeakMap(), _GemElement_memoList = /* @__PURE__ */ new WeakMap(), _GemElement_unmountCallback = /* @__PURE__ */ new WeakMap(), _GemElement_exec = /* @__PURE__ */ new WeakMap(), _GemElement_execEffect = /* @__PURE__ */ new WeakMap(), _GemElement_execMemo = /* @__PURE__ */ new WeakMap(), _GemElement_initEffect = /* @__PURE__ */ new WeakMap(), _GemElement_render = /* @__PURE__ */ new WeakMap(), _GemElement_shouldUpdate = /* @__PURE__ */ new WeakMap(), _GemElement_updateCallback = /* @__PURE__ */ new WeakMap(), _GemElement_update = /* @__PURE__ */ new WeakMap(), _GemElement_updated = /* @__PURE__ */ new WeakMap(), _GemElement_disconnectStore = /* @__PURE__ */ new WeakMap(), _GemElement_connectedCallback = /* @__PURE__ */ new WeakMap(), _GemElement_clearEffect = /* @__PURE__ */ new WeakMap();
  _GemElement_final = { value: Symbol() };
  var gemElementProxyMap = new PropProxyMap();
  function defineAttribute(target, prop, attr) {
    const { booleanAttributes, numberAttributes } = target.constructor;
    Object.defineProperty(target, prop, {
      configurable: true,
      get() {
        if (!(initSymbol in this))
          return;
        const that = this;
        const value = that.getAttribute(attr);
        if (booleanAttributes === null || booleanAttributes === void 0 ? void 0 : booleanAttributes.has(attr)) {
          return value === null ? false : true;
        }
        if (numberAttributes === null || numberAttributes === void 0 ? void 0 : numberAttributes.has(attr)) {
          return Number(value);
        }
        return value || "";
      },
      set(v) {
        const that = this;
        const proxy = gemElementProxyMap.get(this);
        const hasSet = proxy[prop];
        const value = that.getAttribute(attr);
        if (this[initSymbol] && value !== null && !hasSet)
          return;
        proxy[prop] = true;
        const isBool = booleanAttributes === null || booleanAttributes === void 0 ? void 0 : booleanAttributes.has(attr);
        if (v === null || v === void 0) {
          that.removeAttribute(attr);
        } else if (isBool) {
          that.toggleAttribute(attr, !!v);
        } else {
          if (value !== String(v))
            that.setAttribute(attr, String(v));
        }
      }
    });
  }
  var isEventHandleSymbol = Symbol("event handle");
  function defineProperty(target, prop, event, eventOptions) {
    Object.defineProperty(target, prop, {
      configurable: true,
      get() {
        const value = gemElementProxyMap.get(this)[prop];
        if (value || !event) {
          return value;
        } else {
          this[prop] = emptyFunction;
          return this[prop];
        }
      },
      set(v) {
        const that = this;
        const proxy = gemElementProxyMap.get(that);
        if (v !== proxy[prop]) {
          if (event) {
            proxy[prop] = (v === null || v === void 0 ? void 0 : v[isEventHandleSymbol]) ? v : (detail, options2) => {
              const evt = new CustomEvent(event, { ...options2, ...eventOptions, detail });
              that.dispatchEvent(evt);
              v(detail, options2);
            };
            Reflect.set(proxy[prop], isEventHandleSymbol, true);
          } else {
            proxy[prop] = v;
            this[updateSymbol]();
          }
        }
      }
    });
  }
  var getReflectTargets = (ele) => [...ele.querySelectorAll("[data-gem-reflect]")].map((e) => e.target);
  function defineRef(target, prop, ref) {
    const refSelector = `[ref=${ref}]`;
    Object.defineProperty(target, prop, {
      configurable: true,
      get() {
        const proxy = gemElementProxyMap.get(this);
        let refobject2 = proxy[prop];
        if (!refobject2) {
          const that = this;
          const ele = that.shadowRoot || that;
          refobject2 = {
            get ref() {
              return ref;
            },
            get element() {
              for (const e of [ele, ...getReflectTargets(ele)]) {
                const result = e.querySelector(refSelector);
                if (result)
                  return result;
              }
            },
            get elements() {
              return [ele, ...getReflectTargets(ele)].map((e) => [...e.querySelectorAll(refSelector)]).flat();
            }
          };
          proxy[prop] = refobject2;
        }
        return refobject2;
      }
    });
  }
  function defineCSSState(target, prop, state) {
    Object.defineProperty(target, prop, {
      configurable: true,
      get() {
        const that = this;
        const { states } = that.internals;
        return states === null || states === void 0 ? void 0 : states.has(state);
      },
      set(v) {
        const that = this;
        const { states } = that.internals;
        if (v) {
          states === null || states === void 0 ? void 0 : states.add(state);
        } else {
          states === null || states === void 0 ? void 0 : states.delete(state);
        }
      }
    });
  }
  var nativeDefineElement = customElements.define.bind(customElements);
  customElements.define = (name, cls, options2) => {
    if (cls.prototype instanceof GemElement) {
      const { observedAttributes, observedProperties, defineEvents, defineCSSStates, defineRefs } = cls;
      observedAttributes === null || observedAttributes === void 0 ? void 0 : observedAttributes.forEach((attr) => defineAttribute(cls.prototype, kebabToCamelCase(attr), attr));
      observedProperties === null || observedProperties === void 0 ? void 0 : observedProperties.forEach((prop) => defineProperty(cls.prototype, prop));
      defineEvents === null || defineEvents === void 0 ? void 0 : defineEvents.forEach((event) => defineProperty(cls.prototype, kebabToCamelCase(event), event));
      defineCSSStates === null || defineCSSStates === void 0 ? void 0 : defineCSSStates.forEach((state) => defineCSSState(cls.prototype, kebabToCamelCase(state), state));
      defineRefs === null || defineRefs === void 0 ? void 0 : defineRefs.forEach((ref) => defineRef(cls.prototype, kebabToCamelCase(ref), ref));
    }
    nativeDefineElement(name, cls, options2);
  };
  if (window.__GEM_DEVTOOLS__HOOK__) {
    Object.assign(window.__GEM_DEVTOOLS__HOOK__, { ...element_exports, ...version_exports });
  }

  // node_modules/@mantou/gem/lib/decorators.js
  function pushStaticField(target, field, member, isSet = false) {
    const cls = target.constructor;
    const current = cls[field];
    if (!cls.hasOwnProperty(field)) {
      Object.defineProperty(cls, field, {
        value: isSet ? new Set(current) : current ? Array.from(current) : []
      });
    }
    cls[field][isSet ? "add" : "push"](member);
  }
  function refobject(target, prop) {
    const ref = `${camelToKebabCase(prop)}-${randomStr()}`;
    pushStaticField(target, "defineRefs", ref);
    defineRef(target, prop, ref);
  }
  function defineAttr(target, prop, attr) {
    pushStaticField(target, "observedAttributes", attr);
    defineAttribute(target, prop, attr);
  }
  function boolattribute(target, prop) {
    const attr = camelToKebabCase(prop);
    pushStaticField(target, "booleanAttributes", attr, true);
    defineAttr(target, prop, attr);
  }
  function emitter(target, prop) {
    defineEmitter(target, prop);
  }
  function defineEmitter(target, prop, options2) {
    const event = camelToKebabCase(prop);
    pushStaticField(target, "defineEvents", event);
    defineProperty(target, prop, event, options2);
  }
  function customElement(name) {
    return function(cls) {
      nativeDefineElement(name, cls);
    };
  }

  // src/common/elements/modal-base.ts
  var Modal = class extends GemElement {
    constructor(content) {
      super();
      this.close = () => {
        this.constructor.close();
      };
      this.keydownHandler = (e) => {
        if (e.key === "Escape") {
          e.stopImmediatePropagation();
          e.stopPropagation();
          this.close();
        }
      };
      this.content = content;
      this.addEventListener("close", this.close);
      this.tabIndex = 0;
    }
    static {
      this.instance = null;
    }
    static open(content) {
      if (this.instance)
        return;
      this.instance = new this(content);
      document.body.append(this.instance);
    }
    static close() {
      this.instance?.remove();
      this.instance = null;
    }
    mounted() {
      this.focus();
      window.addEventListener("keydown", this.keydownHandler, true);
      return () => {
        window.removeEventListener("keydown", this.keydownHandler, true);
      };
    }
    render() {
      return html`
      <style>
        .root {
          font-size: 10px;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          z-index: 2147483647;
        }
        .body {
          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: white;
          border-radius: 4px;
        }
        .close-btn {
          cursor: pointer;
          position: absolute;
          top: -2em;
          right: -2em;
          height: 2em;
          width: 2em;
        }
        .close-btn::before,
        .close-btn::after {
          position: absolute;
          content: '';
          background: white;
          transform-origin: center;
          width: 1.5em;
          height: 0.2em;
          top: 0.9em;
          left: 0.25em;
        }
        .close-btn::before {
          transform: rotate(-45deg);
        }
        .close-btn::after {
          transform: rotate(45deg);
        }
        .body > :first-child {
          width: 45em;
          max-height: 90vh;
          overflow: auto;
        }
      </style>
      <div class="root">
        <div class="body">
          ${this.content}
          <div class="close-btn" @click=${this.close}></div>
        </div>
      </div>
    `;
    }
  };

  // node_modules/@mantou/gem/helper/theme.js
  var themeStoreMap = /* @__PURE__ */ new WeakMap();
  var themePropsMap = /* @__PURE__ */ new WeakMap();
  var setThemeFnMap = /* @__PURE__ */ new WeakMap();
  function createTheme(themeObj) {
    const salt = randomStr();
    const style = document.createElement("style");
    const store = createStore(themeObj);
    const theme2 = {};
    const props = {};
    themePropsMap.set(theme2, props);
    themeStoreMap.set(theme2, store);
    const setTheme = () => Object.keys(store).forEach((key) => {
      if (props[key])
        return;
      props[key] = `--${camelToKebabCase(key)}-${salt}`;
      theme2[key] = `var(${props[key]})`;
    });
    setThemeFnMap.set(theme2, setTheme);
    setTheme();
    const getStyle = () => `:root, :host {${Object.keys(store).reduce((prev, key) => prev + `${props[key]}:${store[key]};`, "")}}`;
    const replace = () => style.textContent = getStyle();
    connect(store, replace);
    replace();
    (document.head || document.documentElement).append(style);
    return theme2;
  }

  // src/common/theme.ts
  var theme = createTheme({
    primaryRGB: "30, 215, 96",
    backgroundRGB: "18, 18, 18",
    textRGB: "255, 255, 255",
    blackRGB: "0, 0, 0"
  });

  // src/page/editor/elements/button.ts
  var Button = class extends GemElement {
    constructor(props = {}) {
      super();
      this.clickHandler = (e) => {
        if (this.disabled)
          e.stopPropagation();
      };
      if (props.clickHandle) {
        this.addEventListener("click", props.clickHandle);
      }
      if (props.content) {
        this.append(props.content);
      }
      if (props.disabled) {
        this.disabled = true;
      }
    }
    render() {
      return html`
      <style>
        :host {
          display: contents;
        }
        :host([disabled]) button {
          cursor: not-allowed;
          background: rgba(${theme.blackRGB}, 0.1);
          color: rgba(${theme.blackRGB}, 0.5);
        }
        button {
          cursor: pointer;
          border-radius: 2px;
          border: 1px solid;
          background: transparent;
          line-height: 1.3;
          padding: 0.5em 1em;
          font-weight: 500;
        }
        button:hover {
          background: rgba(${theme.blackRGB}, 0.05);
        }
        button:active {
          background: rgba(${theme.blackRGB}, 0.1);
        }
        button:focus {
          outline: none;
        }
        button:focus-visible {
          outline-offset: 1px;
          outline: rgba(${theme.primaryRGB}, 0.2) auto 1px;
        }
      </style>
      <button @click=${this.clickHandler}><slot></slot></button>
    `;
    }
  };
  __decorateClass([
    boolattribute
  ], Button.prototype, "disabled", 2);
  Button = __decorateClass([
    customElement("sl-ext-ele-button")
  ], Button);

  // src/page/editor/app.ts
  function removeEmptyLine(text) {
    return text.replace(/(\r?\n)\s*\1+/g, "$1");
  }
  function initLyrics(text) {
    return parseLyrics(removeEmptyLine(text), {
      cleanLyrics: true,
      keepPlainText: true
    }) || [];
  }
  function formatLRCTime(s) {
    const minStr = Math.floor(s / 60).toString().padStart(2, "0");
    const secStr = (s % 60).toFixed(2).padStart(5, "0");
    return `${minStr}:${secStr}`;
  }
  function serializedLyrics(lyric) {
    let last = 0;
    return lyric.map(({ startTime, text }) => {
      last = startTime || last || 0;
      return `[${formatLRCTime(last)}] ${text}
`;
    }).join("");
  }
  var EditorApp = class extends GemElement {
    constructor(options2) {
      super();
      this.originLyrics = sharedData.lyrics;
      this.originLoop = false;
      this.originPlaybackRate = 1;
      this.state = {
        currentIndex: -1,
        lyrics: this.originLyrics ? JSON.parse(JSON.stringify(this.originLyrics)) : initLyrics(sharedData.text)
      };
      this.pasteHandler = async (e) => {
        const lyrics = initLyrics(e.clipboardData?.getData("text") || "");
        this.resetLocal({ lyrics });
        sharedData.setLyrics(lyrics);
      };
      this.changePlaybackRate = async () => {
        const { element } = this.playbackRateInput;
        if (!element)
          return;
        const audio2 = await getCurrentAudio();
        audio2.playbackRate = Number(element.value);
      };
      this.lyricsChange = () => {
        const file = this.lyricsInput.element?.files?.[0];
        if (!file)
          return;
        const reader = new FileReader();
        reader.addEventListener("load", async (event) => {
          const lyrics = initLyrics(event.target.result);
          this.resetLocal({ lyrics });
          sharedData.setLyrics(lyrics);
        });
        reader.readAsText(file);
      };
      this.scrollInto = () => {
        if (!this.tbody.element)
          return;
        const tr = [...this.tbody.element.querySelectorAll("tr.marked")].pop();
        tr?.scrollIntoView({
          behavior: "smooth"
        });
      };
      this.mark = async () => {
        const audio2 = await getCurrentAudio();
        const { lyrics, currentIndex } = this.state;
        this.scrollInto();
        lyrics[currentIndex + 1].startTime = audio2.currentTime;
        this.setState({ lyrics, currentIndex: currentIndex + 1 });
        sharedData.setLyrics(lyrics);
      };
      this.insertLine = async () => {
        const audio2 = await getCurrentAudio();
        const { lyrics, currentIndex } = this.state;
        this.scrollInto();
        lyrics.splice(currentIndex + 1, 0, { startTime: audio2.currentTime, text: "" });
        this.setState({ lyrics, currentIndex: currentIndex + 1 });
        sharedData.setLyrics(lyrics);
      };
      this.removeLine = (index) => {
        const { lyrics } = this.state;
        lyrics.splice(index, 1);
        this.setState({ lyrics });
        sharedData.setLyrics(lyrics);
      };
      this.clearAll = () => {
        this.setState({ lyrics: [] });
        sharedData.setLyrics([]);
      };
      this.offsetLine = (step, index) => {
        let { lyrics } = this.state;
        const addOffset = (n, step2) => n === null ? null : n + step2;
        if (typeof index === "number") {
          lyrics[index].startTime = addOffset(lyrics[index].startTime, step);
        } else {
          lyrics = lyrics.map(({ text, startTime }) => ({
            text,
            startTime: addOffset(startTime, step)
          }));
        }
        this.setState({ lyrics });
        sharedData.setLyrics(lyrics);
      };
      this.resetLocal = async (state) => {
        const audio2 = await getCurrentAudio();
        audio2.currentTime = 0;
        this.setState({ ...state, currentIndex: -1 });
        setTimeout(this.scrollInto);
      };
      this.resetRemote = async () => {
        await setSong({
          name: sharedData.name,
          artists: sharedData.artists,
          lyric: ""
        });
        const lyrics = initLyrics(sharedData.text);
        this.resetLocal({ lyrics });
        sharedData.setLyrics(lyrics);
      };
      this.saveRemote = async () => {
        const { lyrics } = this.state;
        const { i18nMap } = this.options;
        if (lyrics.some(({ startTime, text }) => text && startTime === null)) {
          return alert(i18nMap.pageEditorSaveValid);
        }
        await setSong({
          name: sharedData.name,
          artists: sharedData.artists,
          lyric: serializedLyrics(lyrics)
        });
        this.originLyrics = lyrics;
        this.close(null, { bubbles: true, composed: true });
      };
      this.download = () => {
        const link = document.createElement("a");
        const text = serializedLyrics(this.state.lyrics);
        const blob = new Blob([text], { type: "text/plain" });
        link.href = URL.createObjectURL(blob);
        link.download = `${sharedData.name} - ${sharedData.artists}.lrc`;
        link.click();
      };
      this.jump = async (t, index) => {
        if (typeof t !== "number")
          return;
        const audio2 = await getCurrentAudio();
        audio2.currentTime = t;
        this.setState({ currentIndex: index });
      };
      this.dragOver = (e) => {
        if (e.dataTransfer) {
          e.preventDefault();
          e.dataTransfer.dropEffect = "none";
        }
      };
      this.pasteText = (e) => {
        if (e.clipboardData) {
          e.stopPropagation();
          e.preventDefault();
          const text = e.clipboardData.getData("text/plain");
          document.execCommand("insertHTML", false, text);
        }
      };
      this.modifyLine = (e, index) => {
        const { lyrics } = this.state;
        lyrics[index].text = e.target.innerText;
        sharedData.setLyrics(lyrics);
      };
      this.options = options2;
      this.addEventListener("keydown", (e) => {
        e.stopPropagation();
      });
    }
    async mounted() {
      if (!lyricVideoIsOpen)
        return;
      this.resetLocal();
      const options2 = await optionsPromise;
      sendEvent(options2.cid, events.openEditor);
      const audio2 = await getCurrentAudio();
      this.originLoop = audio2.loop;
      audio2.loop = true;
      this.originPlaybackRate = audio2.playbackRate;
      document.addEventListener("paste", this.pasteHandler);
    }
    async unmounted() {
      const audio2 = await getCurrentAudio();
      audio2.loop = this.originLoop;
      audio2.playbackRate = this.originPlaybackRate;
      document.removeEventListener("paste", this.pasteHandler);
      sharedData.setLyrics(this.originLyrics);
    }
    render() {
      const { currentIndex, lyrics } = this.state;
      const { i18nMap } = this.options;
      if (!lyricVideoIsOpen) {
        return html`
        <style>
          :host {
            font-size: 1.5em;
            text-align: center;
            display: block;
            padding: 2em 1em 0;
            margin-bottom: 2em;
            color: rgb(${theme.blackRGB});
          }
        </style>
        ${i18nMap.pageEditorOpenValid}
      `;
      }
      return html`
      <style>
        :host {
          font-size: 1.3em;
          display: block;
          padding: 0.8em 1.6em 1.6em;
          color: rgb(${theme.blackRGB});
        }
        a,
        a:visited {
          color: inherit;
          text-decoration: none;
        }
        .title {
          font-size: 1.3em;
          margin: 0.5em 0;
        }
        .body {
          height: 70vh;
          overflow: auto;
          margin-bottom: 1em;
          scrollbar-width: none;
        }
        .body::-webkit-scrollbar {
          width: 0px;
        }
        .body:focus {
          outline: rgba(${theme.blackRGB}, 0.075) auto 1px;
        }
        .tip {
          margin: 2em;
          text-align: center;
          opacity: 0.5;
        }
        .tools {
          display: flex;
          gap: 1em;
          margin: 0.5em 0;
        }
        .button {
          display: inline-flex;
          place-content: center;
          border: 1px solid;
          line-height: 1;
          width: 1em;
          opacity: 0.75;
        }
        .button:hover,
        .text-button:hover {
          cursor: pointer;
        }
        .button:hover {
          opacity: 1;
        }
        .text-button:hover,
        .title a:hover {
          border-bottom: 1px solid;
        }
        table {
          width: 100%;
          line-height: 1.5;
        }
        tr {
          opacity: 0.6;
        }
        tr:hover {
          background: rgba(${theme.blackRGB}, 0.075);
        }
        td {
          width: 1px;
          padding: 0;
          vertical-align: baseline;
        }
        td:focus {
          outline: none;
        }
        .marked {
          opacity: 1;
        }
        .timestamp,
        .timechange {
          font-feature-settings: 'tnum';
          user-select: none;
          white-space: nowrap;
        }
        .timechange {
          padding: 0 0.5em;
        }
        .lyrics-line {
          width: 100%;
        }
        .remove {
          cursor: pointer;
          padding-left: 1em;
          opacity: 0.5;
        }
        .remove:hover {
          opacity: 1;
        }
        .placeholder {
          opacity: 0.5;
        }
        .timestamp:not(.placeholder) {
          cursor: pointer;
        }
        .btns {
          display: flex;
          justify-content: space-between;
        }
      </style>
      <p class="title">
        ${i18nMap.pageEditorTitle}:
        <a
          target="_blank"
          title=${i18nMap.pageEditorSearch}
          href="https://www.google.com/search?q=${encodeURIComponent(
        `${sharedData.name} ${sharedData.artists} lrc lyrics`
      )}"
        >
          ${sharedData.name} - ${sharedData.artists}
        </a>
      </p>
      <div class="tools">
        <div>
          ${i18nMap.pageEditorPlaybackRate}:
          <select ref=${this.playbackRateInput.ref} @change=${this.changePlaybackRate}>
            ${[0.5, 0.75, 1, 1.25, 1.5].map(
        (v) => html`<option value=${v} ?selected=${this.originPlaybackRate === v}>${v}</option>`
      )}
          </select>
        </div>
        <div>
          ${i18nMap.pageEditorOffset}:
          <span
            title=${i18nMap.pageEditorOffsetDetail}
            class="button"
            @click=${() => this.offsetLine(0.1)}
            >+</span
          >
          <span
            title=${i18nMap.pageEditorOffsetDetail}
            class="button"
            @click=${() => this.offsetLine(-0.1)}
            >-</span
          >
        </div>
        <div style="flex-grow: 1;"></div>
        <div>
          <span class="text-button" @click=${this.clearAll}>${i18nMap.pageEditorClearAll}</span>
        </div>
      </div>
      <div class="body" tabindex="-1">
        <table>
          <tbody ref=${this.tbody.ref}>
            ${lyrics.map(
        ({ startTime, text }, index) => html`
                <tr class="${currentIndex >= index ? "marked" : ""}">
                  <td
                    @click=${() => this.jump(startTime, index)}
                    title=${startTime === null ? "" : i18nMap.pageEditorSeek}
                    class="timestamp ${startTime === null ? "placeholder" : ""}"
                  >
                    ${startTime === null ? "" : formatLRCTime(startTime)}
                  </td>
                  <td class="timechange">
                    <span
                      title=${i18nMap.pageEditorOffsetDetail}
                      class="button"
                      @click=${() => this.offsetLine(0.1, index)}
                      >+</span
                    >
                    <span
                      title=${i18nMap.pageEditorOffsetDetail}
                      class="button"
                      @click=${() => this.offsetLine(-0.1, index)}
                      >-</span
                    >
                  </td>
                  ${// The following contenteditable element wrapping will cause the TextNode to be modified during editing
        // eslint-disable-next-line prettier/prettier
        html`<td class="lyrics-line" contenteditable @dragover=${this.dragOver} @paste=${this.pasteText} @input=${(e) => this.modifyLine(e, index)}>${text}</td>`}
                  <td class="remove" @click=${() => this.removeLine(index)}>✕</td>
                </tr>
              `
      )}
          </tbody>
        </table>
        ${lyrics.length === 0 ? html`
              <p class="tip">
                ${i18nMap.pageEditorAddLyrics1}
                <label for="lyrics" class="text-button">${i18nMap.pageEditorAddLyrics2}</label>
                ${i18nMap.pageEditorAddLyrics3}
              </p>
            ` : ""}
      </div>
      <input
        ref=${this.lyricsInput.ref}
        id="lyrics"
        @change=${this.lyricsChange}
        type="file"
        accept="text/plain, .lrc"
        hidden
      />
      <div class="btns">
        ${new Button({ clickHandle: this.mark, content: i18nMap.pageEditorMarkLine })}
        ${new Button({ clickHandle: this.insertLine, content: i18nMap.pageEditorInsetLine })}
        ${new Button({ clickHandle: this.resetRemote, content: i18nMap.pageEditorReset })}
        ${new Button({ clickHandle: this.download, content: i18nMap.pageEditorDownload })}
        ${new Button({ clickHandle: this.saveRemote, content: i18nMap.pageEditorSave })}
      </div>
    `;
    }
  };
  __decorateClass([
    emitter
  ], EditorApp.prototype, "close", 2);
  __decorateClass([
    refobject
  ], EditorApp.prototype, "tbody", 2);
  __decorateClass([
    refobject
  ], EditorApp.prototype, "lyricsInput", 2);
  __decorateClass([
    refobject
  ], EditorApp.prototype, "playbackRateInput", 2);
  EditorApp = __decorateClass([
    customElement("sl-ext-editor-app")
  ], EditorApp);

  // src/page/editor/index.ts
  var EditorModal = class extends Modal {
  };
  EditorModal = __decorateClass([
    customElement("sl-ext-editor-modal")
  ], EditorModal);
  async function openEditor() {
    EditorModal.open(new EditorApp(await optionsPromise));
  }

  // src/page/timer.ts
  var fnList = [];
  var raf = (fn) => {
    requestAnimationFrame(fn);
  };
  var delay = (fn, n) => {
    setTimeout(fn, n);
  };
  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
  if (isSafari) {
    const main = () => {
      requestAnimationFrame(function tick4() {
        self.postMessage(1);
        requestAnimationFrame(tick4);
      });
    };
    const worker = new Worker(URL.createObjectURL(new Blob([`(${main.toString()})();`])));
    worker.addEventListener("message", () => {
      fnList.splice(0).forEach((fn) => fn());
    });
    raf = (fn) => fnList.push(fn);
    delay = raf;
  }

  // src/page/pip.ts
  var nativeExitPictureInPicture = document.exitPictureInPicture?.bind(document);
  if (document.exitPictureInPicture) {
    document.exitPictureInPicture = async function() {
      if (document.pictureInPictureElement !== lyricVideo) {
        await nativeExitPictureInPicture();
      }
    };
  }
  var openLyrics = async function() {
    const options2 = await optionsPromise;
    if (options2["show-on"] === "pip" && document.pictureInPictureEnabled) {
      if (isSafari) {
        const showLitter = "position:absolute;left:calc(100% - 1px);bottom:calc(100% - 1px)";
        lyricVideo.setAttribute("style", showLitter);
        document.body.append(lyricVideo);
      }
      return await lyricVideo.requestPictureInPicture();
    }
    const { LYRICS_CONTAINER_SELECTOR, PAGE_PIP_STYLE } = await configPromise;
    const container = querySelector(LYRICS_CONTAINER_SELECTOR);
    if (container) {
      lyricVideo.setAttribute("style", PAGE_PIP_STYLE);
      container.append(lyricVideo);
      lyricVideo.dispatchEvent(new CustomEvent("enterpictureinpicture"));
      return;
    } else {
      throw new Error("Page PiP container not found");
    }
  };
  var closeLyrics = async function() {
    if (document.pictureInPictureElement === lyricVideo) {
      return await nativeExitPictureInPicture();
    }
    lyricVideo.dispatchEvent(new CustomEvent("leavepictureinpicture"));
  };
  if (!document.pictureInPictureEnabled) {
    appendStyle(localConfig.NO_PIP_STYLE);
  }

  // src/page/btn.ts
  configPromise.then(({ PIP_BTN_SELECTOR }) => {
    appendStyle(css`
    ${PIP_BTN_SELECTOR} {
      display: none;
    }
  `);
  });
  async function getLyricsBtn() {
    const { BTN_WRAPPER_SELECTOR } = await configPromise;
    const btnWrapper = querySelector(BTN_WRAPPER_SELECTOR);
    return btnWrapper?.getElementsByClassName(
      localConfig.LYRICS_CLASSNAME
    )[0];
  }
  window.addEventListener(
    "keydown",
    async (e) => {
      const options2 = await optionsPromise;
      const lyricsBtn = await getLyricsBtn();
      if (!lyricsBtn)
        return;
      const element = e.composedPath?.()[0] || e.target;
      if (element.isContentEditable || element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
        return;
      }
      if (e.key.toLowerCase() === options2["toggle-shortcut"] && !e.repeat) {
        e.stopImmediatePropagation();
        e.stopPropagation();
        e.preventDefault();
        sendEvent(options2.cid, events.keypressToggleLyrics);
        lyricsBtn.click();
      }
    },
    true
  );
  var insetLyricsBtn = async () => {
    await getCurrentAudio();
    const options2 = await optionsPromise;
    const { BTN_WRAPPER_SELECTOR, BTN_LIKE_SELECTOR, OTHER_DEVICE } = await configPromise;
    if (!isProd) {
      console.log("===============================");
      Object.entries(await configPromise).forEach(([k, v]) => {
        if (k.includes("SELECTOR")) {
          console.log(k, querySelector(`${v}`));
        }
      });
      Object.entries(localConfig).forEach(([k, v]) => {
        if (k.includes("STYLE")) {
          const styleSheet = new CSSStyleSheet();
          styleSheet.replaceSync(v);
          [...styleSheet.cssRules].forEach((rule) => {
            console.log(rule.selectorText, querySelectorAll(rule.selectorText));
          });
        }
      });
    }
    const btnWrapper = querySelector(BTN_WRAPPER_SELECTOR);
    const likeBtn = documentQueryHasSelector(BTN_LIKE_SELECTOR);
    if (!btnWrapper || !likeBtn)
      return;
    if (btnWrapper.getElementsByClassName(localConfig.LYRICS_CLASSNAME).length)
      return;
    if (localConfig.BTN_CONTAINER_STYLE) {
      const root = btnWrapper.shadowRoot || btnWrapper.getRootNode();
      const style = new CSSStyleSheet();
      style.replaceSync(localConfig.BTN_CONTAINER_STYLE);
      root.adoptedStyleSheets.push(style);
    }
    btnWrapper.style.display = "flex";
    const lyricsBtn = likeBtn.cloneNode(true);
    window.lyricsBtn = lyricsBtn;
    lyricsBtn.classList.add(localConfig.LYRICS_CLASSNAME);
    lyricsBtn.id = "";
    lyricsBtn.disabled = false;
    lyricsBtn.hidden = false;
    lyricsBtn.title = options2.i18nMap.pageButtonTitle;
    lyricsBtn.setAttribute("aria-label", lyricsBtn.title);
    lyricsBtn.querySelectorAll("*").forEach((e) => {
      e.removeAttribute("title");
      e.removeAttribute("aria-label");
    });
    if (lyricVideoIsOpen) {
      lyricsBtn.classList.add(localConfig.LYRICS_ACTIVE_CLASSNAME);
    }
    lyricVideo.addEventListener("enterpictureinpicture", () => {
      lyricsBtn.classList.add(localConfig.LYRICS_ACTIVE_CLASSNAME);
    });
    lyricVideo.addEventListener("leavepictureinpicture", () => {
      lyricsBtn.classList.remove(localConfig.LYRICS_ACTIVE_CLASSNAME);
    });
    lyricsBtn.addEventListener(
      "contextmenu",
      (e) => {
        lyricsBtn.blur();
        if (e.metaKey || e.ctrlKey) {
          openEditor();
        } else {
          window.postMessage({ type: 100006 /* OPEN_OPTIONS */ }, "*");
        }
        e.stopPropagation();
        e.preventDefault();
      },
      true
    );
    lyricsBtn.addEventListener("auxclick", (e) => {
      if (e.button === 1 && !querySelector(OTHER_DEVICE)) {
        lyricsBtn.blur();
        openEditor();
      }
    });
    lyricsBtn.addEventListener("click", async (evt) => {
      lyricsBtn.blur();
      if (evt.isTrusted)
        sendEvent(options2.cid, events.clickToggleLyrics);
      try {
        if (lyricVideoIsOpen) {
          await closeLyrics();
          sharedData.resetData();
        } else {
          await openLyrics();
          sharedData.dispatchTrackElementUpdateEvent(true);
        }
      } catch (e) {
        captureException(e);
      }
    });
    btnWrapper.append(lyricsBtn);
  };

  // src/page/cover.ts
  function generateCover(ctxs) {
    const colors = ["red", "orange", "yellow", "lime", "green", "teal", "blue", "purple"];
    const getColor = () => colors.splice(Math.floor(Math.random() * colors.length), 1)[0];
    ctxs.forEach((ctx) => {
      ctx.save();
      const fillColor = ctx.createLinearGradient(0, 0, ctx.canvas.width, ctx.canvas.height);
      fillColor.addColorStop(0, getColor());
      fillColor.addColorStop(1, getColor());
      ctx.fillStyle = fillColor;
      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
      ctx.restore();
    });
  }

  // src/page/observer.ts
  var loginResolve;
  var loggedPromise = new Promise((res) => loginResolve = res);
  var weakMap = /* @__PURE__ */ new WeakMap();
  configPromise.then(
    ({
      ALBUM_COVER_SELECTOR,
      ALBUM_COVER_LARGE_REGEXP_REPLACE,
      TRACK_INFO_SELECTOR,
      LOGGED_MARK_SELECTOR,
      BTN_LIKE_SELECTOR
    }) => {
      function getLargeCoverUrl(src) {
        const [regText, replaceText] = ALBUM_COVER_LARGE_REGEXP_REPLACE;
        const reg = new RegExp(regText);
        return reg.test(src) ? src.replace(reg, replaceText) : null;
      }
      let largeImage;
      function coverLoadHandler() {
        const drawSmallCover = (ctx) => {
          if (!("filter" in ctx)) {
            return generateCover([coverCtx]);
          }
          const { width: width2, height: height2 } = ctx.canvas;
          ctx.save();
          ctx.imageSmoothingEnabled = false;
          const blur = 10;
          ctx.filter = `blur(${blur}px)`;
          ctx.drawImage(this, -blur * 2, -blur * 2, width2 + 4 * blur, height2 + 4 * blur);
          ctx.restore();
        };
        drawSmallCover(coverCtx);
        const { width, height } = coverHDCtx.canvas;
        const largeUrl = getLargeCoverUrl(this.src);
        if (this.naturalWidth >= 480) {
          coverHDCtx.drawImage(this, 0, 0, width, height);
        } else if (largeUrl) {
          largeImage = new Image();
          largeImage.crossOrigin = "anonymous";
          largeImage.addEventListener("load", function() {
            if (this !== largeImage)
              return;
            coverHDCtx.drawImage(largeImage, 0, 0, width, height);
          });
          largeImage.addEventListener("error", () => drawSmallCover(coverHDCtx));
          largeImage.src = largeUrl;
        } else {
          drawSmallCover(coverHDCtx);
        }
      }
      function coverErrorHandler() {
        generateCover([coverCtx, coverHDCtx]);
      }
      function coverUpdated() {
        const anonymous = new Image();
        anonymous.crossOrigin = "anonymous";
        anonymous.addEventListener("load", coverLoadHandler);
        anonymous.addEventListener("error", coverErrorHandler);
        anonymous.src = this.currentSrc || this.src;
      }
      const infoElementUpdate = () => {
        const cover = querySelector(ALBUM_COVER_SELECTOR);
        if (cover) {
          cover.addEventListener("load", coverUpdated);
        }
        if (!lyricVideoIsOpen)
          return;
        const likeBtn = documentQueryHasSelector(BTN_LIKE_SELECTOR);
        const likeBtnRect = likeBtn?.getBoundingClientRect();
        if (!likeBtnRect?.width || !likeBtnRect.height) {
          return sharedData.resetData();
        }
        sharedData.dispatchTrackElementUpdateEvent();
        if (!cover) {
          captureException(new Error("Cover not found"));
        }
      };
      let infoElement = null;
      const checkElement = () => {
        if (querySelector(LOGGED_MARK_SELECTOR))
          loginResolve();
        insetLyricsBtn();
        const prevInfoElement = infoElement;
        infoElement = querySelector(TRACK_INFO_SELECTOR);
        if (!infoElement)
          return;
        if (!prevInfoElement || prevInfoElement !== infoElement)
          infoElementUpdate();
        if (!weakMap.has(infoElement)) {
          const infoEleObserver = new MutationObserver(infoElementUpdate);
          infoEleObserver.observe(infoElement, {
            childList: true,
            characterData: true,
            subtree: true
          });
          weakMap.set(infoElement, infoEleObserver);
        }
      };
      checkElement();
      const htmlEleObserver = new MutationObserver(checkElement);
      htmlEleObserver.observe(document.documentElement, { childList: true, subtree: true });
    }
  );
  var originFetch = globalThis.fetch;
  var latestHeader = new Headers();
  globalThis.fetch = async (...rest) => {
    const res = await originFetch(...rest);
    const url = new URL(rest[0] instanceof Request ? rest[0].url : rest[0], location.origin);
    const spotifyAPI = "https://spclient.wg.spotify.com";
    if (url.origin === spotifyAPI && url.pathname.startsWith("/metadata/4/track/")) {
      latestHeader = new Headers(rest[0] instanceof Request ? rest[0].headers : rest[1]?.headers);
      const metadata = await res.clone().json();
      const { name = "", artist = [], duration = 0, canonical_uri, has_lyrics } = metadata || {};
      const trackId = canonical_uri?.match(/spotify:track:([^:]*)/)?.[1];
      const artists = artist?.map((e) => e?.name).join(", ");
      sharedData.cacheTrackAndLyrics({
        name,
        artists,
        duration: duration / 1e3,
        getLyrics: has_lyrics ? async ({ signal }) => {
          const res2 = await fetch(
            `${spotifyAPI}/color-lyrics/v2/track/${trackId}?format=json&vocalRemoval=false&market=from_token`,
            {
              headers: latestHeader,
              signal
            }
          );
          if (!res2.ok)
            return "";
          const { lyrics: spLyrics } = await res2.json();
          console.log(spLyrics);
          if (spLyrics.syncType !== "LINE_SYNCED")
            return "";
          return spLyrics.lines.map(({ startTimeMs, words }) => {
            const sec = Number(startTimeMs) / 1e3;
            return `[${Math.floor(sec / 60)}:${sec % 60}]
${words}`;
          }).flat().join("\n");
        } : void 0
      });
    }
    return res;
  };

  // src/page/element.ts
  var lyricVideo = document.createElement("video");
  lyricVideo.muted = true;
  lyricVideo.width = 640;
  lyricVideo.height = 640;
  var lyricVideoIsOpen = false;
  var lyricCanvas = document.createElement("canvas");
  lyricCanvas.width = lyricVideo.width;
  lyricCanvas.height = lyricVideo.height;
  var lyricCtx = lyricCanvas.getContext("2d");
  lyricVideo.srcObject = lyricCanvas.captureStream();
  lyricCtx.fillRect(0, 0, 1, 1);
  lyricVideo.play();
  var coverCanvas = document.createElement("canvas");
  coverCanvas.width = lyricVideo.width;
  coverCanvas.height = lyricVideo.height;
  var coverCtx = coverCanvas.getContext("2d");
  var coverHDCanvas = document.createElement("canvas");
  coverHDCanvas.width = lyricVideo.width;
  coverHDCanvas.height = lyricVideo.height;
  var coverHDCtx = coverHDCanvas.getContext("2d");
  var setPopupState = (active) => {
    const msg = { type: 100007 /* POPUP_ACTIVE */, data: active };
    window.postMessage(msg, "*");
  };
  lyricVideo.addEventListener("enterpictureinpicture", () => {
    lyricVideoIsOpen = true;
  });
  lyricVideo.addEventListener("leavepictureinpicture", () => {
    lyricVideoIsOpen = false;
    lyricVideo.remove();
  });
  setInterval(() => setPopupState(lyricVideoIsOpen), 1e3);
  window.addEventListener("beforeunload", () => {
    if (lyricVideoIsOpen)
      setPopupState(false);
  });
  var audio = null;
  var audioData = /* @__PURE__ */ new WeakMap();
  var firstAudioPromise = new Promise((resolveAudio) => {
    const createElement = document.createElement.bind(document);
    const elementCountOverrideBefore = document.querySelectorAll("*").length;
    const hrefOverrideBefore = location.href;
    if (!localConfig.USE_AUDIO_SELECTOR) {
      document.createElement = function(tagName, options2) {
        const element = createElement(tagName, options2);
        if ((tagName === "video" || tagName === "audio") && !audio) {
          if (!isProd)
            console.log("capture_audio_element", element);
          performance.measure("capture_audio_element");
          audio = element;
          handleAudio(audio);
          resolveAudio(audio);
        }
        return element;
      };
    }
    const queryOtherDeviceMockAudio = async () => {
      const { OTHER_DEVICE, OTHER_DEVICE_TOTAL, OTHER_DEVICE_CURRENT } = await configPromise;
      if (!isValidSelector(OTHER_DEVICE))
        return;
      const playInOtherDevice = querySelector(OTHER_DEVICE);
      const totalStr = querySelector(OTHER_DEVICE_TOTAL)?.textContent;
      const currentStr = querySelector(OTHER_DEVICE_CURRENT)?.textContent;
      const data = audio && audioData.get(audio);
      if (playInOtherDevice && totalStr && currentStr) {
        const { time: currentTime } = tryParseTimeStr(currentStr);
        const { time: duration } = tryParseTimeStr(totalStr);
        const updateTime = data?.currentTime === currentTime && data.updateTime || Date.now();
        const offset = (Date.now() - updateTime) / 1e3;
        const oldAudio = data?.oldAudio || audio;
        audio = {
          ...audio,
          addEventListener: (..._) => void 0,
          currentSrc: "mock",
          currentTime: currentTime + (offset > 1 ? 0 : offset),
          duration
        };
        audioData.set(audio, { currentTime, updateTime, oldAudio });
      }
      if (playInOtherDevice) {
        requestAnimationFrame(queryOtherDeviceMockAudio);
      } else {
        audio = data?.oldAudio || null;
        setTimeout(queryOtherDeviceMockAudio, 1e3);
      }
    };
    queryOtherDeviceMockAudio();
    const queryAudio = async () => {
      const { AUDIO_SELECTOR } = await configPromise;
      if (!isValidSelector(AUDIO_SELECTOR))
        return;
      const element = querySelector(AUDIO_SELECTOR);
      if (element) {
        audio = element;
        handleAudio(audio);
        resolveAudio(audio);
      } else {
        setTimeout(queryAudio, 100);
      }
    };
    queryAudio();
    if (currentPlatform === "DEEZER") {
      const A = Audio;
      window.Audio = class {
        constructor(src) {
          const element = new A(src);
          element.addEventListener("play", () => {
            audio = element;
            handleAudio(audio);
            resolveAudio(audio);
          });
          return element;
        }
      };
    }
    if (currentPlatform !== "APPLE") {
      Promise.all([loggedPromise, new Promise((res) => window.addEventListener("load", res))]).then(
        () => {
          const loadedTime = performance.now();
          setTimeout(() => {
            if (!audio) {
              captureException(new Error("Audio not found"), {
                // Provide some information that can tell if the extension is working properly
                hrefOverrideBefore,
                elementCountOverrideBefore,
                elementCount: document.querySelectorAll("*").length,
                loadedTime
              });
            }
          }, 5e3);
        }
      );
    }
  });
  async function getCurrentAudio() {
    return audio || firstAudioPromise;
  }
  var reported = false;
  function handleAudio(audio2) {
    audio2.addEventListener("playing", async () => {
      const isMusic = audio2.duration && audio2.duration > 2.6 * 60 && audio2.duration < 4 * 60;
      if (!reported && isMusic && !await getLyricsBtn()) {
        reported = true;
        const { BTN_WRAPPER_SELECTOR, BTN_LIKE_SELECTOR, TRACK_NAME_SELECTOR } = await configPromise;
        captureException(new Error("Lyrics button not found"), {
          duration: audio2.duration,
          TRACK_NAME: querySelector(TRACK_NAME_SELECTOR)?.textContent,
          BTN_WRAPPER: !!querySelector(BTN_WRAPPER_SELECTOR),
          BTN_LIKE: !!documentQueryHasSelector(BTN_LIKE_SELECTOR)
        });
      }
    });
    audio2.addEventListener("play", () => {
      lyricVideo.play();
      navigator.mediaSession.playbackState = "playing";
    });
    audio2.addEventListener("pause", () => {
      lyricVideo.pause();
      navigator.mediaSession.playbackState = "paused";
    });
  }
  var time = performance.now();
  lyricVideo.addEventListener("pause", () => {
    const now = performance.now();
    if (now - time > 300) {
      time = now;
      audio?.pause();
    }
  });
  lyricVideo.addEventListener("play", () => {
    audio?.play();
  });

  // src/page/fps.ts
  var frames = [];
  var second = 3;
  var tick2 = (now) => {
    frames.push(now);
    frames = frames.filter((e) => e > now - second * 1e3);
    requestAnimationFrame(tick2);
  };
  tick2(performance.now());
  function getFPS() {
    const firstFrame = frames[0] || 0;
    const lastFrame = frames[frames.length - 1] || 0;
    const t = frames.length >= 2 ? (lastFrame - firstFrame) / frames.length : 1e3 / 60;
    return Math.round((frames.length + (second * 1e3 - (lastFrame - firstFrame)) / t) / second);
  }

  // src/page/index.ts
  var tick3 = async (options2) => {
    const audio2 = await getCurrentAudio();
    const i18nMap = options2.i18nMap;
    const isOnlyCover = options2["only-cover"] === "on";
    const isHDCover = options2["hd-cover"] === "on";
    const isSmoothScroll = getFPS() >= 30;
    const { error, lyrics, highlightLyrics } = sharedData;
    const backgroundImage = isOnlyCover || isHDCover ? coverHDCanvas : coverCanvas;
    const textOptions = {
      backgroundImage,
      fontFamily: options2["font-family"]
    };
    const renderOptions = {
      backgroundImage,
      focusLineFontSize: Number(options2["font-size"]),
      align: options2["lyrics-align"],
      smooth: isSmoothScroll,
      fontFamily: options2["font-family"]
    };
    if (isOnlyCover) {
      drawBackground(lyricCtx, backgroundImage);
    } else {
      if (error) {
        drawText(lyricCtx, `${i18nMap.pageTipError}: ${error.message}`, {
          color: "red",
          ...textOptions
        });
      } else if (!lyrics && !highlightLyrics) {
        drawText(lyricCtx, i18nMap.pageTipNoLyrics, textOptions);
      } else if (audio2.duration && lyrics?.length) {
        renderLyrics(lyricCtx, lyrics, audio2.currentTime, renderOptions);
      } else if (!audio2.duration || lyrics?.length === 0 || highlightLyrics?.length === 0) {
        drawText(
          lyricCtx,
          audio2.currentSrc ? i18nMap.pageTipLoading : i18nMap.pageTipWaiting,
          textOptions
        );
      } else if (!lyrics && highlightLyrics?.length) {
        renderHighlight(lyricCtx, highlightLyrics, renderOptions);
      }
    }
    if (!isOnlyCover && isSmoothScroll && lyricVideoIsOpen && (lyrics?.length || highlightLyrics?.length)) {
      raf(() => tick3(options2));
    } else {
      delay(() => tick3(options2), 80);
    }
  };
  optionsPromise.then(tick3);
  window.addEventListener("message", async ({ data }) => {
    switch (data.type) {
      case 100011 /* TOGGLE */:
        return (await getLyricsBtn())?.click();
    }
    if (!lyricVideoIsOpen)
      return;
    if (!data?.type)
      return;
    switch (data.type) {
      case 1e5 /* GET_SONGS */:
        return sharedData.sendToContentScript();
      case 100002 /* SELECT_SONG */:
        return sharedData.chooseLyricsTrack(data.data);
      case 100003 /* CONFIRMED_SONG */:
        return sharedData.confirmedMId();
      default:
        return;
    }
  });
  appendStyle(localConfig.STATIC_STYLE);
  if (localConfig.SERVICE_WORKER) {
    navigator.serviceWorker.getRegistration().then((reg) => {
      if (!reg) {
        navigator.serviceWorker.register(localConfig.STATIC_STYLE);
      }
    });
  }
})();
/*! Bundled license information:

lit-html/lib/directive.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/dom.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/part.js:
  (**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/template.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/template-instance.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/template-result.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/parts.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/default-template-processor.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/template-factory.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lib/render.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/lit-html.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/directives/repeat.js:
  (**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/directives/guard.js:
  (**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)

lit-html/directives/if-defined.js:
  (**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   *)
*/
